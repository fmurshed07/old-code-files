# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # python 45 hrs 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	basics of programming
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	collections 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	functional programming 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	oopy + database (mysql)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	vcs --> git 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	django overview 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	assessment 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # file --> code 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # task file 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # python --> programming language 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 		   scripting language

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # programming vs scripting

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # programming
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 2000 				2019 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # fb 		code		fb 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 0    				100 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # apps --> programming language --> programs

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # scripting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # os
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # win7 		folder(code)	win7  + folder		
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 100 							100
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # code --> script ==> ip --> script --> op 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # scripts 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	client / browser level 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	server / backend level
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	os / system level

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # python --> 1991 --> van rossum 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # latest stable --> python --> 3.7 --> py3
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # most used latest stable --> python --> 2.7 --> py2 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # py2 vs py3 --> architectural changes 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # py2 --> py3 XXX 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # py3 --> py2 XXX  


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # python
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	web apps 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	GUI apps 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	scripting automation 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	scientific computing 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # mobile 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # gaming 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 3d design 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # testing

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # web apps 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	- network 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	- browser 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	youtube , torrents , google , dropbox , instagram

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # py 						java , .net
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # youtube				bank.online.com 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 10 billions 			1 billion
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # lots of data 			less data 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # less time 				lots time 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # speed vs security 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # lots of data , speed 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # less security

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # php , java , .net 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # python --> XXX web apps XXX 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # python + web FW --> web apps 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # web FW --> django , flask , rails , bottle . . . .

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # python + django --> web apps

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 3 apps --> next class 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # py3 vs py2 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # GUI apps 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	- XX network XX 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	- XX browser XX 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	- games , ms word , paint , calculator 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	py -->  XX GUI apps XX 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	gui framework --> pyqt4 , tkinter 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	py + pyqt4 / py + tkinter --> gui apps
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	billing systems --> gui 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # .net , java

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # web apps vs gui apps  

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # webapp --> data --> remote 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	- file (fb.com) --> machine1 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	- file (fb.com) --> machine2 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # guiapp --> data --> local 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	- file (ms word) --> machine1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	- file (ms word) --> machine2 XXX 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # scientific computing
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # --------------------
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	advanced algos 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 		maths 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 		stats 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	img process
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	ML , DL , NN , AI , Iot . . . .
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # python 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	multi domain
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # sass , matlab --> paid 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # C++ , R  --> tough 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # automation (devops/cloud)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # -------------------------
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	settools --> language 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	devpr --> t1 t2 t3 t4  --> user 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	scripts --> py , shell , perl , bash . . . .

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 3 scripts 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	- user / client 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 		-> javascript
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 		-> browser level
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	- server 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 		-> all languages  --> php , java , ruby , python ,.net  . . . 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 		-> machine level
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	- os 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 		-> python , ruby 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # py --> 3.7 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # install 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	- win --> python.org --> run  --> py 3.7
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	- linux/mac --> pre installed --> py2 --> upgrade --> py3 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	-> libs 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	-> IDLE --> editor
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	-> shell --> cmd of python 


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # cmd / terminal 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # c:/>python 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # -py2
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # -----
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # -----
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # >>>

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # c:/>python3
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # -py3
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # -----
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # -----
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # >>>

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # c:/>python 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # error 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # path variable  --> XXX

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 3 , 4 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # _ set path 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # _ install pip 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # features 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # --------
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # open source  --> free 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # cross platform 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # multi domain 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # dynamically typed 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # easy syntaxed 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # strict intended
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # pure oops / partial oops 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # interpreted 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # C++ , java 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # install python --> ?? 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # features
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # --------
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # dynamically typed 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # python
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	10 --> number 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	10 --> integer 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # a --> 10 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # .
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # .
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # .
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # .
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # a --> 10.5 


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # C , c++ , java
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	int 10 --> number 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	int 10 --> integer 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # a --> 10 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # .
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # .
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # .
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # .
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # a --> 10.5 XXX  

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # easy syntaxed 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	syntax --> grammar of code 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	control characters 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 		python : 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 		c ; ( ) { }

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # strict intendation
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	spaces , tabs 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	beautify --> c , cpp , java 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	necesary 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # python
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	---- , 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 		------
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	----------
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	----------
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 		------
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	----------
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	----------
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	 	------
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # c c++ java
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	----,------
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	-----------
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	-----------
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	-----------	

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # interpreted

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # executions 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	- compiling  --> c java c++
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	- interpreting --> python

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 100 lines  13 20 40 errors --> c 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 100 ->compile->errors 13 20 40 ->fix 13 20 40 -> compile -> bytecode->run->OP

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 100 lines  13 20 40 errors --> python
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 100->interpert->op12error13 -> fix 13 -> interpret -> op19error20->fix 20->interpret->op39error40->fix40->interpret->op 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # write code 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ----------
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	single line --> unsaved
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 		cmd / terminal / shell
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	file 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 		editor / IDLE 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	project 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 		IDE --> PyCharmCE 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # running code 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ------------ 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	single line 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 		cmd / terminal / shell
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	file 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 		editor 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 			-->cmd 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 			c:/>python <filename>.py 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 		IDLE 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 			run module 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	project 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 		IDE - editor + console

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # keywords 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	- pre defined
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	- libs 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	- immutable --> XX modify XX delete XX add XX
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	- 1 keyword --> 1 function 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # py2 --> 31 keywords
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # py3.5 --> 33 keywords
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # py3.7 --> 35 keywords

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # >>>import keyword
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # >>>keyword.kwlist
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # identifiers 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	- user defined 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	- naming components 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	- rules 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 		- start small case 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 		- start upper case ( not recommended )
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 		- XX start number XX 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 		- XX start symbol XX  _ __ (special case)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 		- use number 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 		- XX use symbol XX  _ 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # a , AGE , first_name , __password , _user , mobile2 , user2name --> valid  
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 2email , $name , name$address --> invalid

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # variables 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ---------
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # store data 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 3 components
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	name  --> identifier
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	value --> data 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	address -> location

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # <varname> = <varvalue>
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # a = 10 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # identifier , name --> a 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # data ,value --> 10 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # location --> id(a)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # type(a) <class 'int'> py3 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # type(a) <type 'int'> py2 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # id(<varname>) --> location of variable
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # type(<varname>) --> data type of variable

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # data types 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ----------
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 5 datatypes
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	independent 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 		numbers 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 		strings

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	collections 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 		derived 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 			lists 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 			tuples 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 			dictionaries

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 		special
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 			sets 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 			frozensets

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # numbers
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	int float complex ---> py3 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	int long float complex ---> py2 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # all whole numbers --> int  --> 10 , 123 , 345 , 65 ,23986
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # all decimal numbers --> float --> 9.3,3.5,10.345
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # a+ib --> c+dj  --> complex --> 10+30j , 40+900j 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # -------------int----------|-----long------------- py2 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # -------------int----------|------int------------- py3 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # | --> maximum possible integer --> py2  --> 9223372036854775807 --> sys config

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # >>>import sys 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # >>>sys.maxint --> py2 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # >>>sys.maxsize --> py3 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # operations 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ----------
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 6 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # numbers 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	arithmetic 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	comparision 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	logical 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	bitwise 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # except numbers
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	membership 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	identity 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # arithmetic --> 7 --> values 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	add  --> +
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	sub  --> - 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	mul  --> * 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	div  --> / --> float
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	modulo-> % 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	floordiv --> // --> int
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	exponent --> ** 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # a = 25 , b = 4 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # py3 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # a/b --> float 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # a//b --> int
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # py2 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # a/b --> int 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # a//b --> int

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # a = 25.0 , b = 4 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # py3 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # a/b --> float 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # a//b --> int
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # py2 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # a/b --> float 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # a//b --> int

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # comparision --> 6 ---> True / False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ==
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # !=
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # >
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # <
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # >=
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # <=

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # logical --> 3 ---> True/False/values
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # and 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # or 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # not 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # truthtables 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ip1      ip2      ip1 and ip2 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # t         t            t 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # t 		  f            f 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # f         t            f 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # f         f            f 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # and --> ttt 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ip1      ip2      ip1 or ip2 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # t         t            t 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # t 		  f            t  
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # f         t            t 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # f         f            f 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # or --> fff 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # not -> 1's complement 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # not(t) --> f 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # not(f) --> t 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 10 and 20  --> 20
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 10 or 20  --> 10

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 20 and 10  --> 10
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 20 or 10  --> 20 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # all numbers --> true 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 10 and 20
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # t and t | ---> 20 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 10 or 20 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # t or |---> 10 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 20 and 10 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # t  and t | --> 10 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 20 or 10 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # t or | ---> 20 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # bitwise --> 6 --> values

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # bw and --> & 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # bw or --> | 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # bw not --> ~ 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # right shift -->  >>
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # left shift -->  <<
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # xor --> ^ 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 		  128   64   32   16    8   4   2   1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 10 -->     0     0   0    0     1   0   1   0  --> 00001010
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 20 -->     0     0   0    1     0   1   0   0  --> 00010100

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # t --> 1 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # f --> 0 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # &  --> 111
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # |  --> 000

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 10    --> 00001010
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 20    --> 00010100
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 10|20 --> 00011110  --> 30 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 10&20 --> 00000000  --> 0 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 12 & 22 --> 4
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 10 | 13 --> 15 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 12 ---> 00001100
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 22 ---> 00010110
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 12&22 ->00000100 --> 4 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 10  --> 00001010
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 13  --> 00001101 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 10|13-> 00001111 --> 15 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ~ --> 2's complement , bitwise not 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ~(x) --> -(x+1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ~10 --> -11
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ~23 --> -24 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ~100 --> -101
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ~(-10) --> 9

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # xor --> ??? tt 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 10 ^ 20 --> ???

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 3 bitwise operators --> 190919

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # right shift 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 10 >> 2  -->   00001010 >> 2  -->   00000010 --> 2 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 10 << 2  -->   00001010 << 2  -->   00101000 --> 40 


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # output in python 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ----------------
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print  --> command --> py2 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print() -> function --> py3 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # py2
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print 10 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print 20 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print 30 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # py3
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(10)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(20)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(30)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # py2 XXX 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # py3
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(10 , end=" ")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(20 , end=" ")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(30)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # strings	
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # -------
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # char 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # group of chars 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # alphanumeric
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # ' ' or " "

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # <strname> = "<strvalue>"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # <strname> = '<strvalue>'

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # tech = "python"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # features
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # --------
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # indexed 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # sliced 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # concatenated 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # iterated 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # immutable XX modify XX add XX delete XX 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # <class str>

# # # # # # # # # # # # # # # # # # # # # # # # # # # # tech = "python"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # p   y    t    h    o    n
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 0   1    2    3    4    5  --> positive / forward indices 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # -6  -5  -4   -3    -2   -1 --> negative / reverse indices

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # indexing 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	single char

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # <strname>[<index>] --> char 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech[0])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech[3])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech[5])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech[-2])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech[-6])

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(type(tech))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # tech = "python and machine learning"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech[3]) # h
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech[6]) #  
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech[-7]) # e

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # slicing 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	substring 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	sindex , eindex 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # <strname>[<sindex> : <eindex>]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech[3:8]) # 34567 hon a
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech[2:4]) # th
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech[10:15]) #  amch

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech[:5]) # start = 0 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech[11:]) # end = last char

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech[7:15]) # start->7 8 9 10 11 12 13 14<-end step = +1

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # <strname>[<sindex> : <eindex> : <step>]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech[7:15:1])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech[7:15:2]) # 7 9 11 13
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech[::2])

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech[-10:-5]) # -10 -9 -8 -7 -6 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech[:-5])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech[-10:]) 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # tech = "python and machine learning"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech[11:18])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech[-16:-9])

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # tech[10:15] # 10 11 12 13 14  step = +1 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # tech[15:10] # 15 14 13 12 11 step = -1 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # <strname>[<sindex> : <eindex> : -<step>] eindex < sindex
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech[15:10:-1])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech[:5:-1]) # last char --> 6 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech[20::-1])

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech[::-1]) # revrese string

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # concatenation  
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	# joining multiple strings
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	# + --> concatenation operator

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # tech = "python"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # city = "hyd"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech + city)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech +" "+ city)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # newvar = tech + city 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(newvar)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # tech = "python"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # version = "3"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech + version)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # tech = "python"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # version = 3
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech + version) # error

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # concatenation

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # tech = "python"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # version = 3
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech + version)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # variables 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	dynamic storage	components

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # string literals 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	static storage components
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	%d --> int 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	%s --> str 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	%f --> float

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # tech = "python"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # version = 3

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print("%s %d" %(tech,version))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print("%s %d" %("java",8))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # tech = "python"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # city = "hyd"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print("%s %s" %(tech,city))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # newvar = "%s %s" %(tech,city)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(newvar)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # tech = "java"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # year = 2017
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # version = 7.4 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # the version of python is 3.4 in 2019 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print("the version of %s  is %f  in %d " %(tech,version,year))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # typecasting 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # -----------
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # a datatype --> other datatype if allowed 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # int --> float 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 4 --> 4.0 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # float --> int  (not recommended)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 4.8 --> 4

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # str --> int (not always)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # "100" --> 100 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # "abc" --> XXXX 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # int --> str 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 100 --> "100"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # int ---> str 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # str(<number>) --> "<number>"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # repr(<number>) --> "<number>"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # str --> int 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # int(<"<number">) --> <number>

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # a = 10 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(a)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(type(a))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # a = str(a)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(a)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(type(a))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # b = "100"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(b)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(type(b))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # b = int(b)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(b)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(type(b))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # XX
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # b = "java"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(b)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(type(b))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # b = int(b)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(b)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(type(b))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # XX error 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # tech = "java"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # year = 2017

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech + str(year))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # newvar = tech + str(year)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(newvar)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # inputs in python  --> cmd / terminal / IDLE / IDE 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # ----------------
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	- keyboard inputs 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	- CLI inputs 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # keyboard inputs 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # user ---> data --> input() --> data --> code --> op 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # py3 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # user 				input() 			code 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 10 					-----> 				"10"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 10.45 				-----> 				"10.45"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # "khan"				-----> 				"khan"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # py2 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # user 				input() 			code 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 10 					-----> 				10
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 10.45 				-----> 				10.45
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # "khan"				-----> 				"khan"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # py2 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # user 				raw_input() 		code 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 10 					-----> 				"10"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 10.45 				-----> 				"10.45"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # "khan"				-----> 				"khan"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # py3 ---> input() 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # py2 ---> input() , raw_input()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # syntax
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # ------
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # <varname> = input("<dialouge>")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # a = input("enter anything : ")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(a)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(type(a))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # a = raw_input("enter anything : ")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(a)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(type(a))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # special strings
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # ----------------

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # special chars --> \n new line  \t space 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # para = "first \n second \n third \n fourth\tline \n fifth"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(para)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # multi line strings  --> ''' '''
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # ------------------
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # book = '''first
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # second
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # third 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # fourth 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # fifth'''
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(book)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # name = "john"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # marks = 80 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # john has secured 80 marks 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print("%s has secured %d marks" %(name,marks))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # john has secured 80 % marks 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print("%s has secured %d %% marks" %(name,marks))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # % --> escape char only string literals

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # dia = "i'm in a python session"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(dia)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # dia = 'i\'m in a python session'
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(dia)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # \ --> escape char

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # path = "c\desktop\pys\code\technology\newfiles\programs"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(path)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # path = "c\desktop\pys\code\\technology\\newfiles\programs"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(path)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # path = "c\\desktop\\pys\\code\\technology\\newfiles\\programs"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(path)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # raw strings
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # -----------
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # path = r"c\desktop\pys\code\technology\newfiles\programs"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(path)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # comments 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	# non executable lines 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # --> single line

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # multi line comments ''' ''' 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # '''
# # # # # # # # # # # # # # # # # # # # # # # # # # # # this 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # is 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # a comment 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # in 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # python
# # # # # # # # # # # # # # # # # # # # # # # # # # # # '''

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # membership operators --> 2 --> True / False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	in 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	not in 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # stmt = "python is an easy 7 programming language"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print("p" in stmt)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print("P" in stmt)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print("hon" in stmt)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(" " in stmt)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print("7" in stmt)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print("z" in stmt)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print("p" not in stmt)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print("," not in stmt)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # identity operators --> 2 --> True / False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # is 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # is not 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # tech = "python"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech is "python")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech is "Python")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(tech is "java")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print("python" is not tech)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print("python" is tech)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # string functions 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # ----------------

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # functions 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	attribute fetching  ---> . 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	parameterised  ---> (<something>)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # string functions
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	# case based 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	# check
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	# manipulative 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # case based functions

# # # # # # # # # # # # # # # # # # # # # # # # # # # # stmt = "Python and Machine learning"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # <strname>.lower()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.lower())

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # <strname>.upper()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.upper())

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # <strname>.swapcase()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.swapcase())

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # <strname>.capitalize()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.capitalize())

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # <strname>.title()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.title())

# # # # # # # # # # # # # # # # # # # # # # # # # # # # stmt = "Python and Machine learning"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # <strname>.startswith(<char/substring>)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.startswith("P"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.startswith("p"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.startswith("Pyth"))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # <strname>.endswith(<char/substring>)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.endswith("g"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.endswith("Python"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.endswith("learning"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.endswith("LEARNING".lower()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.endswith("LEARNING"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print((stmt.upper()).endswith("LEARNING"))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # <strname>.isdigit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	- int --> True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 	- non int --> False

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # a = "python"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(a.isdigit())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # a = "100 "
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(a.isdigit())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # a = "100"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(a.isdigit())

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # ischar() , isalpha() , isfloat() --> ??

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # manipulative
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # ------------

# # # # # # # # # # # # # # # # # # # # # # # # # # # # stmt = "Python and Machine learning"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # len(<strname>)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(len(stmt))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # <strname>.count(<char/substring>)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.count("P"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.count("n"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.count("p"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.count("an"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.count("in"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.count(" "))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # <strname>.index(<char/substring>)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.index("P")) # 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.index("h")) # 3
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.index(" ")) # 6
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.index("Python")) # 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.index("n"))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # n --> 5 , 8 , 15 , 23 , 25 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # stmt = "Python and Machine learning"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.index("n")) # 0 1 2 3 4 5 --> 5 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.index("n",6)) # 6 7 8 ---> 8 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.index("n",9)) # 9 10 . . . --> 16 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.index("n",17))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.index("n",24))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.index("z")) # error

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # <strname>.find(<char/substring>)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.find("Python"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.find("n"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.find("n",6))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.find("z"))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # stmt = "Python and Machine learning"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # <strname>.replace(<old>,<new>)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.replace("Python" , "java"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # stmt = stmt.replace("Python" , "java")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.replace("n" , "m"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.replace("n","m",2)) # count
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.replace("n","m",3))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # stmt = "Python and Machine learning"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # <strname>.split()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.split()) # collection of words  delimiter = " "

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # <strname>.split(<delimiter>)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.split(" "))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.split("a"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.split("and"))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # words = stmt.split("and")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(words) # collection of split output

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # <delimiter>.join(<collection>)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(" ".join(words))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print("-".join(words))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(" @ ".join(words))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # stmt = "    in india we live    "
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # <strname>.strip()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.strip())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # <strname>.lstrip()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.lstrip())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # <strname>.rstrip()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.rstrip())

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # stmt = "    in india we live    "
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.strip(" i"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.strip(" in"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.strip(" live"))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # <strname>.zfill(<int>)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # n = "khan"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(n.zfill(7))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # n = 100 # int
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(str(n).zfill(6)) # 000100

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # n = 1.781 # int
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(str(n).zfill(6)) # 000100

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # len , index , count , find , replace , split , join , strip , zfill

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # enter a number 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 10 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # enter a number 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 20 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 30 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # enter a stmt
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # python is easy 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # enter a char 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # p 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 0  


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # enter a stmt
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # python is easy 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # enter a char 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # z 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # False 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # -1

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # a = int(input("enter a number : "))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # b = int(input("enter a number : "))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(a+b)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # stmt = input("enter a statement : ")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # char = input("enter a character : ")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(char in stmt)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.find(char))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # enter a stmt
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # python is easy 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # enter a char 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # P 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 0  

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # enter a stmt
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # python is easy 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # enter a char 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # N 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # True 	
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 5 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # stmt = input("enter a statement : ") # python IS EASY
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # char = input("enter a character : ")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # stmt = stmt.lower()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # char = char.lower()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(char in stmt)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(stmt.find(char))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # n = input("enter a number : ") # 10.3 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # ind = n.index(".") # 2
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # f = int(n[:ind]) # 10
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # s = int(n[ind+1:]) # 3
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(f**2)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(s**2)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(int(n[:ind])**2)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(int(n[ind+1:])**2)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # a = "100.23"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # a[:3]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # a[4:]

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # stmt
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # python is easy programming language
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # enter an old word
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # python 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # enter a new word 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # java 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # java is easy programming language


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # enter a number 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 100 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # enter a length 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 8 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 00000100

# # # # # # # # # # # # # # # # # # # # # # # # # # # # conditional statements
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	- descisions
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	- descision trees 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # 2 major components --> mandatory 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	- condition --> True / False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	- statement --> executable lines 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # 3 types python 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	- if  --> 1 statement
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	- if else --> 2 statements
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	- if elif elif else --> 4 statements

# # # # # # # # # # # # # # # # # # # # # # # # # # # # 10 conditions --> all True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	- 1st true condition --> executed 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	9 conditions --> XXX executed XXX 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # syntax
# # # # # # # # # # # # # # # # # # # # # # # # # # # # ------

# # # # # # # # # # # # # # # # # # # # # # # # # # # # if <condition>:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	<statement>

# # # # # # # # # # # # # # # # # # # # # # # # # # # # if <condition>:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	<statement1>
# # # # # # # # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	<statement2>

# # # # # # # # # # # # # # # # # # # # # # # # # # # # if <condition1>:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	<statement1>
# # # # # # # # # # # # # # # # # # # # # # # # # # # # elif <condition2>:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	<statement2>
# # # # # # # # # # # # # # # # # # # # # # # # # # # # elif <condition3>:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	<statement3>
# # # # # # # # # # # # # # # # # # # # # # # # # # # # elif <condition4>:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	<statement4>
# # # # # # # # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	<statement5>

# # # # # # # # # # # # # # # # # # # # # # # # # # # # a = 10 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # if a>5: # True condition
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	print("hello") # statement

# # # # # # # # # # # # # # # # # # # # # # # # # # # # a = 10 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # if a>9: # condition
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	print("bye")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # a = 10 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # if a>15: # False condition
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	print("bye")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # a = 10 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # if a>5: # condition --> True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	print("hello") # statement1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	print("bye") # statement2

# # # # # # # # # # # # # # # # # # # # # # # # # # # # a = 2 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # if a>5: # condition --> False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	print("hello") # statement1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	print("bye") # statement2

# # # # # # # # # # # # # # # # # # # # # # # # # # # # a = 10 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # if a>3:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	print("hello")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # elif a>5:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	print("hai")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # elif a>8:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	print("hi")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	print("bye")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # a = 1 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # if a>3:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	print("hello")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # elif a>5:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	print("hai")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # elif a>8:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	print("hi")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	print("bye")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # a = 10
# # # # # # # # # # # # # # # # # # # # # # # # # # # # if a>5:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	print("hello")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # elif a>3:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	print("hai")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # elif a>8:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	print("hi")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	print("bye")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # word = input("enter a word : ")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # if len(word) > 5:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	print("word length is greater than 5 ")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	print("word length is not greater than 5 ")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # even / odd classifier 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # n --> input --> number 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # n --> even / odd 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # n = int(input("enter a number : "))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # if n%2 == 0 :
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	print("%d is even"%(n))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	print("%d is odd"%(n))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # n = input("enter a number : ")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # if n.isdigit():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	print("integer")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	print("string")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # n --> user 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	n --> int str ?? if else 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 		int --> even odd if else 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 		str --> invalid inputs 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # nested if else 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # n = input("enter a number : ")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # if n.isdigit():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	n = int(n)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	if n%2 == 0 :
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 		print("even")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 		print("odd")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # else:	
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	print("invalid inputs passed")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 3/5
# # # # # # # # # # # # # # # # # # # # # # # # # # # # enter a number 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 6
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 6 is multiple of 3 only 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # enter a number 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 20
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 20 is multiple of 5 only 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # enter a number 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 12
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 12 is multiple of 3 only 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # enter a number 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 15
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 15 is multiple of 3 and 5

# # # # # # # # # # # # # # # # # # # # # # # # # # # # enter a number 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 13
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 13 is not a multiple of 3 and 5

# # # # # # # # # # # # # # # # # # # # # # # # # # # # enter a number 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # abc
# # # # # # # # # # # # # # # # # # # # # # # # # # # # invalid inputs passed

# # # # # # # # # # # # # # # # # # # # # # # # # # # # n = input("enter a number : ")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # if n.isdigit():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	n = int(n)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	if n%3 == 0 and n%5 == 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 		print(str(n) + " is multiple of 3 and 5")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	elif n%5 == 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 		print(str(n) + " is multiple of 5 only")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	elif n%3 == 0 :
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 		print(str(n) + " is multiple of 3")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 		print(str(n) + " is not a multiple of 3 and 5")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	print("invalid inputs passed")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # tasks 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # enter a statement
# # # # # # # # # # # # # # # # # # # # # # # # # # # # python is easy programming language
# # # # # # # # # # # # # # # # # # # # # # # # # # # # enter a character
# # # # # # # # # # # # # # # # # # # # # # # # # # # # p

# # # # # # # # # # # # # # # # # # # # # # # # # # # # p is in stmt 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # index of p is 0 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # ocuurences of p - 2 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # enter a statement
# # # # # # # # # # # # # # # # # # # # # # # # # # # # python is easy programming language
# # # # # # # # # # # # # # # # # # # # # # # # # # # # enter a character
# # # # # # # # # # # # # # # # # # # # # # # # # # # # n

# # # # # # # # # # # # # # # # # # # # # # # # # # # # n is in stmt 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # index of n is 5 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # ocuurences of n - 3 


# # # # # # # # # # # # # # # # # # # # # # # # # # # # enter a statement
# # # # # # # # # # # # # # # # # # # # # # # # # # # # python is easy programming language
# # # # # # # # # # # # # # # # # # # # # # # # # # # # enter a character
# # # # # # # # # # # # # # # # # # # # # # # # # # # # P

# # # # # # # # # # # # # # # # # # # # # # # # # # # # p is in stmt 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # index of p is 0 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # ocuurences of p - 2 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # stmt = input("enter a statement :  ")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # char = input("enter a character :  ")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # if char.lower() in stmt.lower():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	print("%s is in %s"%(char,stmt))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	print("index value of %s is %d"%(char.lower(),stmt.find(char)))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	print("occurences of %s is %d"%(char,stmt.count(char)))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	print("%s not in %s"%(char,stmt))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # enter a float value 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 10.3

# # # # # # # # # # # # # # # # # # # # # # # # # # # # 100
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 9 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # enter a float value 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # abc.de

# # # # # # # # # # # # # # # # # # # # # # # # # # # # 3
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 2

# # # # # # # # # # # # # # # # # # # # # # # # # # # # enter a float value 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 10.3.45

# # # # # # # # # # # # # # # # # # # # # # # # # # # # invalid inputs passed

# # # # # # # # # # # # # # # # # # # # # # # # # # # # num = input("enter a float value : ") 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # if num.count(".") == 1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	ind = num.index(".") 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	f = num[0:ind] 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	s = num[ind+1:] 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	if f.isdigit() and s.isdigit():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 		print(int(f)**2)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 		print(int(s)**2)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 		print(len(f))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 		print(len(s))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	print("invalid inputs passed")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # enter time in hh:mm:ssFF format 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 10:34:23pm
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 22:34:23

# # # # # # # # # # # # # # # # # # # # # # # # # # # # enter time in hh:mm:ssFF format
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 08:23:45am 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 08:23:45 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # enter time in hh:mm:ssFF format
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 8:23:45am 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # invalid inputs passed

# # # # # # # # # # # # # # # # # # # # # # # # # # # # 08:23:45am 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # time = input("enter time in hh:mm:ssFF format : ")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # if len(time) == 10:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	if time.count(":") == 2:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 		h = time[0:2] #08
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 		m = time[3:5] #23
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 		s = time[6:8] #45
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 		if time.endswith("pm"):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 			h = int(h)+12
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 			print("%d:%s:%s"%(h,m,s))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 		else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 			print("%s:%s:%s"%(h,m,s))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 		print("invalid inputs passed")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # 	print("invalid inputs passed")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # h , m , s isdigit() ??
# # # # # # # # # # # # # # # # # # # # # # # # # # # # h --> 0 12 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # m --> 0 59 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # s --> 0 59 


# # # # # # # # # # # # # # # # # # # # # # # # # # # enter something 
# # # # # # # # # # # # # # # # # # # # # # # # # # # 10 
# # # # # # # # # # # # # # # # # # # # # # # # # # # 100 

# # # # # # # # # # # # # # # # # # # # # # # # # # # enter something 
# # # # # # # # # # # # # # # # # # # # # # # # # # # 11.2
# # # # # # # # # # # # # # # # # # # # # # # # # # # 121
# # # # # # # # # # # # # # # # # # # # # # # # # # # 4 

# # # # # # # # # # # # # # # # # # # # # # # # # # # enter something 
# # # # # # # # # # # # # # # # # # # # # # # # # # # "python" 
# # # # # # # # # # # # # # # # # # # # # # # # # # # 6

# # # # # # # # # # # # # # # # # # # # # # # # # # # enter something 
# # # # # # # # # # # # # # # # # # # # # # # # # # # "python is easy"
# # # # # # # # # # # # # # # # # # # # # # # # # # # enter delimiter
# # # # # # # # # # # # # # # # # # # # # # # # # # # -
# # # # # # # # # # # # # # # # # # # # # # # # # # # "python-is-easy"

# # # # # # # # # # # # # # # # # # # # # # # # # # # enter something 
# # # # # # # # # # # # # # # # # # # # # # # # # # # "python and machine learning"
# # # # # # # # # # # # # # # # # # # # # # # # # # # enter delimiter
# # # # # # # # # # # # # # # # # # # # # # # # # # # 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # "python0and0machine0learning"


# # # # # # # # # # # # # # # # # # # # # # # # # # loops 
# # # # # # # # # # # # # # # # # # # # # # # # # # -----
# # # # # # # # # # # # # # # # # # # # # # # # # # 	iterations 
# # # # # # # # # # # # # # # # # # # # # # # # # # 	repetitions 

# # # # # # # # # # # # # # # # # # # # # # # # # # finite  --> end point 
# # # # # # # # # # # # # # # # # # # # # # # # # # infinite --> XX end point XX 

# # # # # # # # # # # # # # # # # # # # # # # # # # python loops 	
# # # # # # # # # # # # # # # # # # # # # # # # # # 	- for  --> finite
# # # # # # # # # # # # # # # # # # # # # # # # # # 	- while --> finite and infinite

# # # # # # # # # # # # # # # # # # # # # # # # # # for --> numbers , strings , collections
# # # # # # # # # # # # # # # # # # # # # # # # # # while --> numbers

# # # # # # # # # # # # # # # # # # # # # # # # # # for --> numbers 
# # # # # # # # # # # # # # # # # # # # # # # # # # loop 
# # # # # # # # # # # # # # # # # # # # # # # # # # 	3 components
# # # # # # # # # # # # # # # # # # # # # # # # # # 		- initialisation  --> start point	
# # # # # # # # # # # # # # # # # # # # # # # # # # 		- limit --> end point 
# # # # # # # # # # # # # # # # # # # # # # # # # # 		- inc/dec --> ---> <---
# # # # # # # # # # # # # # # # # # # # # # # # # # 	- statements --> executable lines

# # # # # # # # # # # # # # # # # # # # # # # # # # for numbers

# # # # # # # # # # # # # # # # # # # # # # # # # # range(<end>) # 0 1 2 3 4 ... end-1
# # # # # # # # # # # # # # # # # # # # # # # # # # range(7) #  0 1 2 3 4 5 6 initialisation = 0 limit = 7 inc = +1

# # # # # # # # # # # # # # # # # # # # # # # # # # range(<start>,<end>)
# # # # # # # # # # # # # # # # # # # # # # # # # # range(3,8) # 3 4 5 6 7 initialisation=3 limit=8 inc= +1

# # # # # # # # # # # # # # # # # # # # # # # # # # range(<start>,<end>,<step>)
# # # # # # # # # # # # # # # # # # # # # # # # # # range(2,10,2) # 2 4 6 8 initialisation=2 limit=10 inc=+2

# # # # # # # # # # # # # # # # # # # # # # # # # # range(10,3,-1) # 10 9 8 7 6 5 4 
# # # # # # # # # # # # # # # # # # # # # # # # # # range(10,3,-3) # 10 7 4 

# # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(5):
# # # # # # # # # # # # # # # # # # # # # # # # # # 	print(i)

# # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(3,12):
# # # # # # # # # # # # # # # # # # # # # # # # # # 	print(i)

# # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(0,100,5):
# # # # # # # # # # # # # # # # # # # # # # # # # # 	print(i)

# # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(100,90,-1):
# # # # # # # # # # # # # # # # # # # # # # # # # # 	print(i)

# # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(100,0,-5):
# # # # # # # # # # # # # # # # # # # # # # # # # # 	print(i)

# # # # # # # # # # # # # # # # # # # # # # # # # # enter a number 
# # # # # # # # # # # # # # # # # # # # # # # # # # 4 
# # # # # # # # # # # # # # # # # # # # # # # # # # enter a number 
# # # # # # # # # # # # # # # # # # # # # # # # # # 30 

# # # # # # # # # # # # # # # # # # # # # # # # # # 4 is even 
# # # # # # # # # # # # # # # # # # # # # # # # # # 5 is odd 
# # # # # # # # # # # # # # # # # # # # # # # # # # 6 is even 
# # # # # # # # # # # # # # # # # # # # # # # # # # .
# # # # # # # # # # # # # # # # # # # # # # # # # # .
# # # # # # # # # # # # # # # # # # # # # # # # # # .
# # # # # # # # # # # # # # # # # # # # # # # # # # 30 is even

# # # # # # # # # # # # # # # # # # # # # # # # # # s = int(input("enter a start number : "))
# # # # # # # # # # # # # # # # # # # # # # # # # # e = int(input("enter an end number : "))

# # # # # # # # # # # # # # # # # # # # # # # # # # s = 4 
# # # # # # # # # # # # # # # # # # # # # # # # # # e = 30 

# # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(s,e+1):
# # # # # # # # # # # # # # # # # # # # # # # # # # 	if i%2 == 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # 		print("%d is even"%(i))
# # # # # # # # # # # # # # # # # # # # # # # # # # 	else:
# # # # # # # # # # # # # # # # # # # # # # # # # # 		print("%d is odd"%(i))

# # # # # # # # # # # # # # # # # # # # # # # # # n = 5
# # # # # # # # # # # # # # # # # # # # # # # # # # *
# # # # # # # # # # # # # # # # # # # # # # # # # # **
# # # # # # # # # # # # # # # # # # # # # # # # # # ***
# # # # # # # # # # # # # # # # # # # # # # # # # # ****
# # # # # # # # # # # # # # # # # # # # # # # # # # *****
# # # # # # # # # # # # # # # # # # # # # # # # # # print("*" * 1)
# # # # # # # # # # # # # # # # # # # # # # # # # # print("*" * 2)
# # # # # # # # # # # # # # # # # # # # # # # # # # print("*" * 3)
# # # # # # # # # # # # # # # # # # # # # # # # # # print("*" * 4)
# # # # # # # # # # # # # # # # # # # # # # # # # # print("*" * 5)
# # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(1,n+1):
# # # # # # # # # # # # # # # # # # # # # # # # # # 	print("*" * i)

# # # # # # # # # # # # # # # # # # # # # # # # # n = 5
# # # # # # # # # # # # # # # # # # # # # # # # # # 1
# # # # # # # # # # # # # # # # # # # # # # # # # # 22
# # # # # # # # # # # # # # # # # # # # # # # # # # 333
# # # # # # # # # # # # # # # # # # # # # # # # # # 4444
# # # # # # # # # # # # # # # # # # # # # # # # # # 55555
# # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(1,n+1):
# # # # # # # # # # # # # # # # # # # # # # # # # # 	print(str(i)* i)

# # # # # # # # # # # # # # # # # # # # # # # # # # for --> strings 

# # # # # # # # # # # # # # # # # # # # # # # # # # for <dummy> in <strname>:
# # # # # # # # # # # # # # # # # # # # # # # # # # 	<statements>

# # # # # # # # # # # # # # # # # # # # # # # # # # tech = "python"
# # # # # # # # # # # # # # # # # # # # # # # # # # for i in tech:
# # # # # # # # # # # # # # # # # # # # # # # # # # 	print(i)

# # # # # # # # # # # # # # # # # # # # # # # # # # stmt = "python and machine learning"
# # # # # # # # # # # # # # # # # # # # # # # # # # char = "n"
# # # # # # # # # # # # # # # # # # # # # # # # # # # for i in stmt:
# # # # # # # # # # # # # # # # # # # # # # # # # # 	# print(i , stmt.index(i))

# # # # # # # # # # # # # # # # # # # # # # # # # # stmt = "python and machine learning"
# # # # # # # # # # # # # # # # # # # # # # # # # # char = "n"
# # # # # # # # # # # # # # # # # # # # # # # # # # ind = -1
# # # # # # # # # # # # # # # # # # # # # # # # # # for i in stmt:
# # # # # # # # # # # # # # # # # # # # # # # # # # 	if i == char:
# # # # # # # # # # # # # # # # # # # # # # # # # # 		# print(stmt.index(i))
# # # # # # # # # # # # # # # # # # # # # # # # # # 		ind = stmt.index(i,ind+1)
# # # # # # # # # # # # # # # # # # # # # # # # # # 		print(ind)

# # # # # # # # # # # # # # # # # # # # # # # # # # n --> 10 # 1 2 5 10
# # # # # # # # # # # # # # # # # # # # # # # # # # 10 is composite 

# # # # # # # # # # # # # # # # # # # # # # # # # # n --> 13 # 1 13
# # # # # # # # # # # # # # # # # # # # # # # # # # 13 is prime 

# # # # # # # # # # # # # # # # # # # # # # # # # # n --> 12 # 1 2 3 4 6 12
# # # # # # # # # # # # # # # # # # # # # # # # # # 12 is composite


# # # # # # # # # # # # # # # # # # # # # # # # # n = 12  # 1 2 3 4 6 12 
# # # # # # # # # # # # # # # # # # # # # # # # # # 12%1 == 0 
# # # # # # # # # # # # # # # # # # # # # # # # # # 12%2 == 0 
# # # # # # # # # # # # # # # # # # # # # # # # # # .
# # # # # # # # # # # # # # # # # # # # # # # # # # .
# # # # # # # # # # # # # # # # # # # # # # # # # # .
# # # # # # # # # # # # # # # # # # # # # # # # # # 12%12 == 0 
# # # # # # # # # # # # # # # # # # # # # # # # # # n%i == 0 
# # # # # # # # # # # # # # # # # # # # # # # # # # c = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(1,n+1):
# # # # # # # # # # # # # # # # # # # # # # # # # # 	if n%i == 0 :
# # # # # # # # # # # # # # # # # # # # # # # # # # 		c = c+1
# # # # # # # # # # # # # # # # # # # # # # # # # # if c>2:
# # # # # # # # # # # # # # # # # # # # # # # # # # 	print("composite")
# # # # # # # # # # # # # # # # # # # # # # # # # # 	print("no of factors " + str(c))
# # # # # # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # # # # # 	print("prime")


# # # # # # # # # # # # # # # # # # # # # # # # # s = 10 
# # # # # # # # # # # # # # # # # # # # # # # # # e = 30 
# # # # # # # # # # # # # # # # # # # # # # # # # # 10 --> 1 2 3 4 ..... 10 
# # # # # # # # # # # # # # # # # # # # # # # # # # 11 --> 1 2 3 4 . ... 10 11
# # # # # # # # # # # # # # # # # # # # # # # # # # 12 --> 1 2 3 4 ..... 10 11 12 
# # # # # # # # # # # # # # # # # # # # # # # # # # .
# # # # # # # # # # # # # # # # # # # # # # # # # # .
# # # # # # # # # # # # # # # # # # # # # # # # # # .
# # # # # # # # # # # # # # # # # # # # # # # # # # 30 --> 1 2 3 4  ......... 30
# # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(s,e+1): # 10 11 12 13 ..... 30 
# # # # # # # # # # # # # # # # # # # # # # # # # # 	c = 0 
# # # # # # # # # # # # # # # # # # # # # # # # # # 	for j in range(1,i+1): # 1 2 3 4 . . . 10
# # # # # # # # # # # # # # # # # # # # # # # # # # 		if i%j == 0 :
# # # # # # # # # # # # # # # # # # # # # # # # # # 			c = c+1 
# # # # # # # # # # # # # # # # # # # # # # # # # # 	if c>2:
# # # # # # # # # # # # # # # # # # # # # # # # # # 		print(str(i) + " is composite")
# # # # # # # # # # # # # # # # # # # # # # # # # # 	else:
# # # # # # # # # # # # # # # # # # # # # # # # # # 		print(str(i) + " is prime")

# # # # # # # # # # # # # # # # # # # # # # # # # stmt = "python and machine learning"
# # # # # # # # # # # # # # # # # # # # # # # # # char = "m"
# # # # # # # # # # # # # # # # # # # # # # # # # # p y t o n n n . . . n 

# # # # # # # # # # # # # # # # # # # # # # # # # # for i in stmt:
# # # # # # # # # # # # # # # # # # # # # # # # # # 	if ord(i) > ord(char):
# # # # # # # # # # # # # # # # # # # # # # # # # # 		print(i)

# # # # # # # # # # # # # # # # # # # # # # # # # word = "hai"
# # # # # # # # # # # # # # # # # # # # # # # # # # ibj 

# # # # # # # # # # # # # # # # # # # # # # # # # # word = "python"
# # # # # # # # # # # # # # # # # # # # # # # # # # # qzuipo
# # # # # # # # # # # # # # # # # # # # # # # # # # res = ""
# # # # # # # # # # # # # # # # # # # # # # # # # # for i in word:
# # # # # # # # # # # # # # # # # # # # # # # # # # 	res = res + chr(ord(i)+1)
# # # # # # # # # # # # # # # # # # # # # # # # # # print(res)

# # # # # # # # # # # # # # # # # # # # # # # # # stmt = "python and machine LEARNING"
# # # # # # # # # # # # # # # # # # # # # # # # # vowels = "aeiou"
# # # # # # # # # # # # # # # # # # # # # # # # # # aeiou
# # # # # # # # # # # # # # # # # # # # # # # # # # o a a i e E A I 

# # # # # # # # # # # # # # # # # # # # # # # # # # for i in stmt:
# # # # # # # # # # # # # # # # # # # # # # # # # # 	if i.lower() in vowels:
# # # # # # # # # # # # # # # # # # # # # # # # # # 		print(i)

# # # # # # # # # # # # # # # # # # # # # # # # # # while --> finite , infinite , numbers 
# # # # # # # # # # # # # # # # # # # # # # # # # # for --> initialisation , limit , inc/dec --> range
# # # # # # # # # # # # # # # # # # # # # # # # # # while --> initialisation , limit , inc/dec --> manually 

# # # # # # # # # # # # # # # # # # # # # # # # # # syntax
# # # # # # # # # # # # # # # # # # # # # # # # # # ------
# # # # # # # # # # # # # # # # # # # # # # # # # # <initialisation>
# # # # # # # # # # # # # # # # # # # # # # # # # # while <condition>:
# # # # # # # # # # # # # # # # # # # # # # # # # # 	<statements>
# # # # # # # # # # # # # # # # # # # # # # # # # # 	<inc/dec>

# # # # # # # # # # # # # # # # # # # # # # # # # # incremented
# # # # # # # # # # # # # # # # # # # # # # # # # # a = 1 # initialisation / start 
# # # # # # # # # # # # # # # # # # # # # # # # # # while a<10: # limit / condition
# # # # # # # # # # # # # # # # # # # # # # # # # # 	print(a)
# # # # # # # # # # # # # # # # # # # # # # # # # # 	a = a+1

# # # # # # # # # # # # # # # # # # # # # # # # # # # decremented
# # # # # # # # # # # # # # # # # # # # # # # # # # a = 10 # initialisation / start 
# # # # # # # # # # # # # # # # # # # # # # # # # # while a>0: # limit / condition
# # # # # # # # # # # # # # # # # # # # # # # # # # 	print(a)
# # # # # # # # # # # # # # # # # # # # # # # # # # 	a = a-1

# # # # # # # # # # # # # # # # # # # # # # # # # # tech = "python"
# # # # # # # # # # # # # # # # # # # # # # # # # # a = 0 
# # # # # # # # # # # # # # # # # # # # # # # # # # while a<len(tech):
# # # # # # # # # # # # # # # # # # # # # # # # # # 	print(tech[a]) # indexing
# # # # # # # # # # # # # # # # # # # # # # # # # # 	a = a+1

# # # # # # # # # # # # # # # # # # # # # # # # # # while 
# # # # # # # # # # # # # # # # # # # # # # # # # # n = 5 
# # # # # # # # # # # # # # # # # # # # # # # # # # 000 000 000 
# # # # # # # # # # # # # # # # # # # # # # # # # # 001 001 001 
# # # # # # # # # # # # # # # # # # # # # # # # # # 002 004 008 
# # # # # # # # # # # # # # # # # # # # # # # # # # 003 009 027
# # # # # # # # # # # # # # # # # # # # # # # # # # 004 016 064
# # # # # # # # # # # # # # # # # # # # # # # # # # 005 025 125 

# # # # # # # # # # # # # # # # # # # # # # # # # # 5 X 1 = 5 
# # # # # # # # # # # # # # # # # # # # # # # # # # 5 X 2 = 10 
# # # # # # # # # # # # # # # # # # # # # # # # # # 5 X 3 = 15 
# # # # # # # # # # # # # # # # # # # # # # # # # # .
# # # # # # # # # # # # # # # # # # # # # # # # # # .
# # # # # # # # # # # # # # # # # # # # # # # # # # 5 X 10 = 50 

# # # # # # # # # # # # # # # # # # # # # # # # # # infinite loop --> while 
# # # # # # # # # # # # # # # # # # # # # # # # # # condition --> always true 
# # # # # # # # # # # # # # # # # # # # # # # # # # inc / dec XX 

# # # # # # # # # # # # # # # # # # # # # # # # # # a = 10 
# # # # # # # # # # # # # # # # # # # # # # # # # # while a >5 : # true condition
# # # # # # # # # # # # # # # # # # # # # # # # # # 	print(a)
# # # # # # # # # # # # # # # # # # # # # # # # # # 	# XX inc / dec XX 

# # # # # # # # # # # # # # # # # # # # # # # # # # a = 10 
# # # # # # # # # # # # # # # # # # # # # # # # # # while True:
# # # # # # # # # # # # # # # # # # # # # # # # # # 	print("hello")


# # # # # # # # # # # # # # # # # # # # # # # # # # 1 
# # # # # # # # # # # # # # # # # # # # # # # # # # 12
# # # # # # # # # # # # # # # # # # # # # # # # # # 123
# # # # # # # # # # # # # # # # # # # # # # # # # # 1234
# # # # # # # # # # # # # # # # # # # # # # # # # # 12345

# # # # # # # # # # # # # # # # # # # # # # # # # # n = 5 
# # # # # # # # # # # # # # # # # # # # # # # # # # for j in range(1,n+1):
# # # # # # # # # # # # # # # # # # # # # # # # # # 	for i in range(1,j+1):
# # # # # # # # # # # # # # # # # # # # # # # # # # 		print(i,end="")
# # # # # # # # # # # # # # # # # # # # # # # # # # 	print()

# # # # # # # # # # # # # # # # # # # # # # # # # # control statements 

# # # # # # # # # # # # # # # # # # # # # # # # # # n = int(input("enter a number : "))
# # # # # # # # # # # # # # # # # # # # # # # # # n = 5

# # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(n+1):
# # # # # # # # # # # # # # # # # # # # # # # # # # 	print("%d %d %d" %(i , i**2 , i**3))

# # # # # # # # # # # # # # # # # # # # # # # # # # n = 6
# # # # # # # # # # # # # # # # # # # # # # # # # # l = len(str(n**3)) # 3

# # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(n+1):
# # # # # # # # # # # # # # # # # # # # # # # # # # 	print("%s %s %s"%(str(i).zfill(l),str(i**2).zfill(l),str(i**3).zfill(l)))

# # # # # # # # # # # # # # # # # # # # # # # # # n = 5 

# # # # # # # # # # # # # # # # # # # # # # # # # # 5 X 1 = 5 
# # # # # # # # # # # # # # # # # # # # # # # # # # 5 X 2 = 10 
# # # # # # # # # # # # # # # # # # # # # # # # # # 5 X 3 = 15 
# # # # # # # # # # # # # # # # # # # # # # # # # # .
# # # # # # # # # # # # # # # # # # # # # # # # # # .
# # # # # # # # # # # # # # # # # # # # # # # # # # 5 X 10 = 50 
	
# # # # # # # # # # # # # # # # # # # # # # # # # # n X i = n*i

# # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(1,10):
# # # # # # # # # # # # # # # # # # # # # # # # # # 	print("%d X %d = %d" %(n , i , n*i))

# # # # # # # # # # # # # # # # # # # # # # # # # # control statements --> 3 
# # # # # # # # # # # # # # # # # # # # # # # # # # 	pass 
# # # # # # # # # # # # # # # # # # # # # # # # # # 	break 
# # # # # # # # # # # # # # # # # # # # # # # # # # 	continue 

# # # # # # # # # # # # # # # # # # # # # # # # # # pass 
# # # # # # # # # # # # # # # # # # # # # # # # # # 	- no implementation 
# # # # # # # # # # # # # # # # # # # # # # # # # # 	- no statements
# # # # # # # # # # # # # # # # # # # # # # # # # # 	- skip execution
# # # # # # # # # # # # # # # # # # # # # # # # # # 	- if else , for , while , functions , classes . . . 

# # # # # # # # # # # # # # # # # # # # # # # # # # a = 10 
# # # # # # # # # # # # # # # # # # # # # # # # # # if a<5:
# # # # # # # # # # # # # # # # # # # # # # # # # # 	pass
# # # # # # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # # # # # 	print("bye")

# # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(10):
# # # # # # # # # # # # # # # # # # # # # # # # # # 	pass

# # # # # # # # # # # # # # # # # # # # # # # # # # break 
# # # # # # # # # # # # # # # # # # # # # # # # # # 	- loops 
# # # # # # # # # # # # # # # # # # # # # # # # # # 	- exit the loop 
# # # # # # # # # # # # # # # # # # # # # # # # # # 	- condition 
# # # # # # # # # # # # # # # # # # # # # # # # # # 	- exit --> if condition is true

# # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(10): # 0 1 2 3 4 5
# # # # # # # # # # # # # # # # # # # # # # # # # # 	if i == 5: # F f f f f t
# # # # # # # # # # # # # # # # # # # # # # # # # # 		break # 5 
# # # # # # # # # # # # # # # # # # # # # # # # # # 	print(i) # 0 1 2 3 4

# # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(10): # 0 1 2 3 4 5
# # # # # # # # # # # # # # # # # # # # # # # # # # 	print(i) # 0 1 2 3 4 5
# # # # # # # # # # # # # # # # # # # # # # # # # # 	if i == 5: # f f f f f t
# # # # # # # # # # # # # # # # # # # # # # # # # # 		break # 5

# # # # # # # # # # # # # # # # # # # # # # # # # # stmt = "python is an easy programming language"
# # # # # # # # # # # # # # # # # # # # # # # # # # for i in stmt:
# # # # # # # # # # # # # # # # # # # # # # # # # # 	if i == "n":
# # # # # # # # # # # # # # # # # # # # # # # # # # 		break
# # # # # # # # # # # # # # # # # # # # # # # # # # 	print(i) # pytho

# # # # # # # # # # # # # # # # # # # # # # # # # # for i in stmt:
# # # # # # # # # # # # # # # # # # # # # # # # # # 	print(i) # python
# # # # # # # # # # # # # # # # # # # # # # # # # # 	if i == "n":
# # # # # # # # # # # # # # # # # # # # # # # # # # 		break

# # # # # # # # # # # # # # # # # # # # # # # # # # continue 
# # # # # # # # # # # # # # # # # # # # # # # # # # 	- loops 
# # # # # # # # # # # # # # # # # # # # # # # # # # 	- pause the loop
# # # # # # # # # # # # # # # # # # # # # # # # # # 	- condition
# # # # # # # # # # # # # # # # # # # # # # # # # # 	- pause --> condition --> is true 
# # # # # # # # # # # # # # # # # # # # # # # # # # 	false --> execute
# # # # # # # # # # # # # # # # # # # # # # # # # # 	true --> pause 

# # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(10):
# # # # # # # # # # # # # # # # # # # # # # # # # # 	if i == 5: # t --> 5 
# # # # # # # # # # # # # # # # # # # # # # # # # # 		continue
# # # # # # # # # # # # # # # # # # # # # # # # # # 	print(i) # 0 1 2 3 4 6 7 8 9 

# # # # # # # # # # # # # # # # # # # # # # # # # # stmt = "python is an easy programming language"

# # # # # # # # # # # # # # # # # # # # # # # # # # for i in stmt:
# # # # # # # # # # # # # # # # # # # # # # # # # # 	if i == "n":
# # # # # # # # # # # # # # # # # # # # # # # # # # 		continue
# # # # # # # # # # # # # # # # # # # # # # # # # # 	print(i)

# # # # # # # # # # # # # # # # # # # # # # # # # stmt = "PytHOn is an EAsy programming lanGUage"
# # # # # # # # # # # # # # # # # # # # # # # # # P H O E A G U 

# # # # # # # # # # # # # # # # # # # # # # # # # stmt = "the version of python is 3 in 2019"
# # # # # # # # # # # # # # # # # # # # # # # # # 3 2 0 1 9 

# # # # # # # # # # # # # # # # # # # # # # # # # # module 2
# # # # # # # # # # # # # # # # # # # # # # # # # # 	collections

# # # # # # # # # # # # # # # # # # # # # # # # # # collection --> multiple values 
# # # # # # # # # # # # # # # # # # # # # # # # # # 	lists 
# # # # # # # # # # # # # # # # # # # # # # # # # # 	tuples 
# # # # # # # # # # # # # # # # # # # # # # # # # # 	dictionaries

# # # # # # # # # # # # # # # # # # # # # # # # # # special collections
# # # # # # # # # # # # # # # # # # # # # # # # # # 	sets 
# # # # # # # # # # # # # # # # # # # # # # # # # # 	frozensets

# # # # # # # # # # # # # # # # # # # # # # # # # # sequences 
# # # # # # # # # # # # # # # # # # # # # # # # # # 	lists
# # # # # # # # # # # # # # # # # # # # # # # # # # 	tuples 

# # # # # # # # # # # # # # # # # # # # # # # # # # architecture 
# # # # # # # # # # # # # # # # # # # # # # # # # # 	stacks
# # # # # # # # # # # # # # # # # # # # # # # # # # 	queues 

# # # # # # # # # # # # # # # # # # # # # # # # # # stacks --> LIFO 
# # # # # # # # # # # # # # # # # # # # # # # # # # ------------------
# # # # # # # # # # # # # # # # # # # # # # # # # # | a   b  c   d  
# # # # # # # # # # # # # # # # # # # # # # # # # # ------------------

# # # # # # # # # # # # # # # # # # # # # # # # # # 	-------------------
# # # # # # # # # # # # # # # # # # # # # # # # # # 	  d	 c	 b	 a 
# # # # # # # # # # # # # # # # # # # # # # # # # # 	-------------------
# # # # # # # # # # # # # # # # # # # # # # # # # # entry 				exit 
# # # # # # # # # # # # # # # # # # # # # # # # # # queues --> FIFO 

# # # # # # # # # # # # # # # # # # # # # # # # # # features
# # # # # # # # # # # # # # # # # # # # # # # # # # 	- stacks
# # # # # # # # # # # # # # # # # # # # # # # # # # 	- unlimited length 
# # # # # # # # # # # # # # # # # # # # # # # # # # 	- heterogeneous 
# # # # # # # # # # # # # # # # # # # # # # # # # # 	- nested 
# # # # # # # # # # # # # # # # # # # # # # # # # # 	- each collection --> class 
# # # # # # # # # # # # # # # # # # # # # # # # # # 	- looped / iterated


# # # # # # # # # # # # # # # # # # # # # # # # # # 4 task files , module 1 assessment	--> solve 

# # # # # # # # # # # # # # # # # # # # # # # # # # lists
# # # # # # # # # # # # # # # # # # # # # # # # # # 	- sequences 
# # # # # # # # # # # # # # # # # # # # # # # # # # 	- mutable 
# # # # # # # # # # # # # # # # # # # # # # # # # # 	- i s c i 
# # # # # # # # # # # # # # # # # # # # # # # # # # 	- <class list>
# # # # # # # # # # # # # # # # # # # # # # # # # # 	- heterogeneous
# # # # # # # # # # # # # # # # # # # # # # # # # # 	- repetitions of elements 

# # # # # # # # # # # # # # # # # # # # # # # # # # syntax
# # # # # # # # # # # # # # # # # # # # # # # # # # ------
# # # # # # # # # # # # # # # # # # # # # # # # # # <listname> = [<ele1>,<ele2>,<ele3>,<ele4>,<ele5>]

# # # # # # # # # # # # # # # # # # # # # # # # # nums = [10,30,405,5,10,3]
# # # # # # # # # # # # # # # # # # # # # # # # # print(nums)
# # # # # # # # # # # # # # # # # # # # # # # # # print(type(nums))

# # # # # # # # # # # # # # # # # # # # # # # # # l1 = ["python",3,"hyd",10,30,"mysql",4,"php",2.7,100]
# # # # # # # # # # # # # # # # # # # # # # # # # print(l1)
# # # # # # # # # # # # # # # # # # # # # # # # # print(type(l1))

# # # # # # # # # # # # # # # # # # # # # # # # l1 = ["python",3,"hyd",100,30,"mysql",4,"python",2.7,100]
# # # # # # # # # # # # # # # # # # # # # # # # # print(l1)

# # # # # # # # # # # # # # # # # # # # # # # # # print(l1[3]) # 100 
# # # # # # # # # # # # # # # # # # # # # # # # # print(l1[-2]) # 2.7

# # # # # # # # # # # # # # # # # # # # # # # # # print(l1[3:6]) # [100 , 30 , "mysql"]
# # # # # # # # # # # # # # # # # # # # # # # # # print(l1[::-1])

# # # # # # # # # # # # # # # # # # # # # # # # # for <dummy> in <listname>:
# # # # # # # # # # # # # # # # # # # # # # # # # 	<statements>

# # # # # # # # # # # # # # # # # # # # # # # # # for i in l1:
# # # # # # # # # # # # # # # # # # # # # # # # # 	print(i)


# # # # # # # # # # # # # # # # # # # # # # # # # l1 = ["python",3,"hyd",[100,30,"mysql"],4,"python",2.7,100]
# # # # # # # # # # # # # # # # # # # # # # # # # print(l1[2])
# # # # # # # # # # # # # # # # # # # # # # # # # print(l1[3])
# # # # # # # # # # # # # # # # # # # # # # # # # print(l1[3][1])

# # # # # # # # # # # # # # # # # # # # # # # # # ip = [[[[[[[[10]]]]]]]]
# # # # # # # # # # # # # # # # # # # # # # # # # print(ip[0][0][0][0][0][0][0][0])

# # # # # # # # # # # # # # # # # # # # # # # # # mutable --> modify , delete , add 


# # # # # # # # # # # # # # # # # # # # # # # # l1 = ["python",3,"hyd",[100,30,"mysql"],4,"python",2.7,100]

# # # # # # # # # # # # # # # # # # # # # # # # # del <listname>[<index>]
# # # # # # # # # # # # # # # # # # # # # # # # # print(l1)
# # # # # # # # # # # # # # # # # # # # # # # # # del l1[2]
# # # # # # # # # # # # # # # # # # # # # # # # # print(l1)
# # # # # # # # # # # # # # # # # # # # # # # # # del l1[6]
# # # # # # # # # # # # # # # # # # # # # # # # # print(l1)
# # # # # # # # # # # # # # # # # # # # # # # # # del l1[5:]
# # # # # # # # # # # # # # # # # # # # # # # # # print(l1)

# # # # # # # # # # # # # # # # # # # # # # # # # <listname>[<index>] = <newvalue>
# # # # # # # # # # # # # # # # # # # # # # # # # print(l1)
# # # # # # # # # # # # # # # # # # # # # # # # # l1[1] = "abc"
# # # # # # # # # # # # # # # # # # # # # # # # # print(l1)
# # # # # # # # # # # # # # # # # # # # # # # # # print(l1)
# # # # # # # # # # # # # # # # # # # # # # # # # l1[3:6] = 100,200,300
# # # # # # # # # # # # # # # # # # # # # # # # # print(l1)

# # # # # # # # # # # # # # # # # # # # # # # # # l1 = ["python",3,"hyd",100,30,"mysql",4,2.7,100]
# # # # # # # # # # # # # # # # # # # # # # # # # print(100 in l1)
# # # # # # # # # # # # # # # # # # # # # # # # # print("mysql" in l1)
# # # # # # # # # # # # # # # # # # # # # # # # # print(2 in l1)

# # # # # # # # # # # # # # # # # # # # # # # # # functions
# # # # # # # # # # # # # # # # # # # # # # # # # ---------
# # # # # # # # # # # # # # # # # # # # # # # # l1 = ["python",3,"hyd",100,30,"mysql",4,2.7,100]

# # # # # # # # # # # # # # # # # # # # # # # # # add elements
# # # # # # # # # # # # # # # # # # # # # # # # print(l1)

# # # # # # # # # # # # # # # # # # # # # # # # # <listname>.append(<element>)
# # # # # # # # # # # # # # # # # # # # # # # # # l1.append(2)
# # # # # # # # # # # # # # # # # # # # # # # # # print(l1)
# # # # # # # # # # # # # # # # # # # # # # # # # l1.append("db")
# # # # # # # # # # # # # # # # # # # # # # # # # print(l1)
# # # # # # # # # # # # # # # # # # # # # # # # # l1.append("oracle")
# # # # # # # # # # # # # # # # # # # # # # # # # print(l1)

# # # # # # # # # # # # # # # # # # # # # # # # # <listname>.insert(<index> , <element>)
# # # # # # # # # # # # # # # # # # # # # # # # # l1.insert(3,230)
# # # # # # # # # # # # # # # # # # # # # # # # # print(l1)

# # # # # # # # # # # # # # # # # # # # # # # # # remvoing 

# # # # # # # # # # # # # # # # # # # # # # # # # # <listname>.pop() 
# # # # # # # # # # # # # # # # # # # # # # # # # l1.pop()
# # # # # # # # # # # # # # # # # # # # # # # # # print(l1)
# # # # # # # # # # # # # # # # # # # # # # # # # l1.pop()
# # # # # # # # # # # # # # # # # # # # # # # # # print(l1)
# # # # # # # # # # # # # # # # # # # # # # # # # l1.pop()
# # # # # # # # # # # # # # # # # # # # # # # # # print(l1)

# # # # # # # # # # # # # # # # # # # # # # # # # <listname>.remove(<element>)
# # # # # # # # # # # # # # # # # # # # # # # # # l1.remove("hyd")
# # # # # # # # # # # # # # # # # # # # # # # # # print(l1)
# # # # # # # # # # # # # # # # # # # # # # # # # l1.remove(100)
# # # # # # # # # # # # # # # # # # # # # # # # # print(l1)

# # # # # # # # # # # # # # # # # # # # # # # # # print(len(l1))
# # # # # # # # # # # # # # # # # # # # # # # # # print(l1.index("hyd"))
# # # # # # # # # # # # # # # # # # # # # # # # # print(l1.count(100))
# # # # # # # # # # # # # # # # # # # # # # # # # print(l1.count(30))

# # # # # # # # # # # # # # # # # # # # # # # # l1 = ["python",3,"hyd",100,30,"mysql",4,2.7,100]

# # # # # # # # # # # # # # # # # # # # # # # # # sorting 
# # # # # # # # # # # # # # # # # # # # # # # # 	# - homogeneous -> py3 
# # # # # # # # # # # # # # # # # # # # # # # # 	# - heterogeneous -> py2 

# # # # # # # # # # # # # # # # # # # # # # # # # <listname>.sort() # ascending
# # # # # # # # # # # # # # # # # # # # # # # # # l1.sort() # py2
# # # # # # # # # # # # # # # # # # # # # # # # # print(l1)

# # # # # # # # # # # # # # # # # # # # # # # l1 = [32,43,43,5,7,6,3,21,31,2,143,45,35,3,231]
# # # # # # # # # # # # # # # # # # # # # # # # l1.sort() 
# # # # # # # # # # # # # # # # # # # # # # # # print(l1)

# # # # # # # # # # # # # # # # # # # # # # # # <listname>.reverse()
# # # # # # # # # # # # # # # # # # # # # # # # l1.reverse()
# # # # # # # # # # # # # # # # # # # # # # # # print(l1)

# # # # # # # # # # # # # # # # # # # # # # # # l1.sort()
# # # # # # # # # # # # # # # # # # # # # # # # l1.reverse()
# # # # # # # # # # # # # # # # # # # # # # # # print(l1)

# # # # # # # # # # # # # # # # # # # # # # # # sort --> ascending
# # # # # # # # # # # # # # # # # # # # # # # # sort + reverse --> descending 

# # # # # # # # # # # # # # # # # # # # # # # # l1.sort(reverse=True) # descending
# # # # # # # # # # # # # # # # # # # # # # # # print(l1)


# # # # # # # # # # # # # # # # # # # # # # # # enter a number
# # # # # # # # # # # # # # # # # # # # # # # # 5 

# # # # # # # # # # # # # # # # # # # # # # # # [1,2,3,4,5]

# # # # # # # # # # # # # # # # # # # # # # # # n = int(input("enter a number : "))
# # # # # # # # # # # # # # # # # # # # # # # # l = []
# # # # # # # # # # # # # # # # # # # # # # # # for i in range(1,n+1):
# # # # # # # # # # # # # # # # # # # # # # # # 	l.append(i)
# # # # # # # # # # # # # # # # # # # # # # # # print(l)


# # # # # # # # # # # # # # # # # # # # # # # l1 = ["python",3,"hyd",100,30,"mysql",4,"python",2]
# # # # # # # # # # # # # # # # # # # # # # # # ints --> [3,100,30,4,2]
# # # # # # # # # # # # # # # # # # # # # # # # strs --> ["python" , "hyd" , "mysql" ,"python"]
# # # # # # # # # # # # # # # # # # # # # # # # ints = []
# # # # # # # # # # # # # # # # # # # # # # # # strs = []

# # # # # # # # # # # # # # # # # # # # # # # # for i in l1:
# # # # # # # # # # # # # # # # # # # # # # # # 	if type(i) is int:
# # # # # # # # # # # # # # # # # # # # # # # # 		ints.append(i)
# # # # # # # # # # # # # # # # # # # # # # # # 	else:
# # # # # # # # # # # # # # # # # # # # # # # # 		strs.append(i)
# # # # # # # # # # # # # # # # # # # # # # # # print(ints)
# # # # # # # # # # # # # # # # # # # # # # # # print(strs)

# # # # # # # # # # # # # # # # # # # # # # # l1 = ["py",["sql",3,"hyd"],100,[30,"mysql",4],"java",2,["php","oracle"]]

# # # # # # # # # # # # # # # # # # # # # # # # op->["py","sql",3,"hyd",100,30,"mysql",4,"java",2,"php","oracle"]
# # # # # # # # # # # # # # # # # # # # # # # op = []
# # # # # # # # # # # # # # # # # # # # # # # # for i in l1:
# # # # # # # # # # # # # # # # # # # # # # # # 	if type(i) is str:
# # # # # # # # # # # # # # # # # # # # # # # # 		op.append(i)
# # # # # # # # # # # # # # # # # # # # # # # # 	elif type(i) is list:
# # # # # # # # # # # # # # # # # # # # # # # # 		for j in i:
# # # # # # # # # # # # # # # # # # # # # # # # 			op.append(j)
# # # # # # # # # # # # # # # # # # # # # # # # 	else:
# # # # # # # # # # # # # # # # # # # # # # # # 		op.append(i)
# # # # # # # # # # # # # # # # # # # # # # # # print(op)

# # # # # # # # # # # # # # # # # # # # # # # # for i in l1:
# # # # # # # # # # # # # # # # # # # # # # # # 	if type(i) is list:
# # # # # # # # # # # # # # # # # # # # # # # # 		for j in i:
# # # # # # # # # # # # # # # # # # # # # # # # 			op.append(j)
# # # # # # # # # # # # # # # # # # # # # # # # 	else:
# # # # # # # # # # # # # # # # # # # # # # # # 		op.append(i)
# # # # # # # # # # # # # # # # # # # # # # # # print(op)

# # # # # # # # # # # # # # # # # # # # # # # # enter a number 
# # # # # # # # # # # # # # # # # # # # # # # # 5 
# # # # # # # # # # # # # # # # # # # # # # # # ["a","b","c","d","e"]


# # # # # # # # # # # # # # # # # # # # # # enter a number 
# # # # # # # # # # # # # # # # # # # # # # 3 
# # # # # # # # # # # # # # # # # # # # # # enter a char 
# # # # # # # # # # # # # # # # # # # # # # "g"
# # # # # # # # # # # # # # # # # # # # # # ["g" ,"h" ,"i"]

# # # # # # # # # # # # # # # # # # # # # # enter a statement
# # # # # # # # # # # # # # # # # # # # # # "python is an easy programming language"
# # # # # # # # # # # # # # # # # # # # # # ["python" , "programming" ,"language"]

# # # # # # # # # # # # # # # # # # # # # # # # tasks , list comprehensions 


# # # # # # # # # # # # # # # # # # # # # # # l1 = ["python",3,"hyd",100,30,"mysql",4,"python",2]
# # # # # # # # # # # # # # # # # # # # # # # l2 = [2,3,1,6]

# # # # # # # # # # # # # # # # # # # # # # # # op --> [hyd , 100, 3 , 4]
# # # # # # # # # # # # # # # # # # # # # # # # op = []
# # # # # # # # # # # # # # # # # # # # # # # # for i in l2:
# # # # # # # # # # # # # # # # # # # # # # # # 	op.append(l1[i])
# # # # # # # # # # # # # # # # # # # # # # # # print(op)

# # # # # # # # # # # # # # # # # # # # # # # l1 = ["python",3,"hyd",10,10,3,20,"mysql",4,"python",2]
# # # # # # # # # # # # # # # # # # # # # # # # uni =["python",3,"hyd",10,20,"mysql",4,2]
# # # # # # # # # # # # # # # # # # # # # # # # uni = []
# # # # # # # # # # # # # # # # # # # # # # # # for i in l1:
# # # # # # # # # # # # # # # # # # # # # # # # 	if i not in uni:
# # # # # # # # # # # # # # # # # # # # # # # # 		uni.append(i)
# # # # # # # # # # # # # # # # # # # # # # # # print(uni)

# # # # # # # # # # # # # # # # # # # # # # # # l1 = [10,20,30,40]
# # # # # # # # # # # # # # # # # # # # # # # # l2 = [3,4,5,6]
# # # # # # # # # # # # # # # # # # # # # # # # [13,24,35,46]

# # # # # # # # # # # # # # # # # # # # # # # # concatenation
# # # # # # # # # # # # # # # # # # # # # # # # print(l1+l2)

# # # # # # # # # # # # # # # # # # # # # # # # l1 = [10,20,30,40]
# # # # # # # # # # # # # # # # # # # # # # # # l2 = [3,4,5,6]
# # # # # # # # # # # # # # # # # # # # # # # # op = []
# # # # # # # # # # # # # # # # # # # # # # # # if len(l1) == len(l2):
# # # # # # # # # # # # # # # # # # # # # # # # 	for i in range(len(l1)): # 0 1 2 3
# # # # # # # # # # # # # # # # # # # # # # # # 		op.append(l1[i] + l2[i]) 
# # # # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # # # 	print("lists are unequal")
# # # # # # # # # # # # # # # # # # # # # # # # print(op)

# # # # # # # # # # # # # # # # # # # # # # # # enter a number 
# # # # # # # # # # # # # # # # # # # # # # # # 7 
# # # # # # # # # # # # # # # # # # # # # # # # [1,2,3,4,5,6,7]
# # # # # # # # # # # # # # # # # # # # # # # # [2,4,6]
# # # # # # # # # # # # # # # # # # # # # # # # [1,4,9,16,25,36,49]
# # # # # # # # # # # # # # # # # # # # # # # # [4,16,36]

# # # # # # # # # # # # # # # # # # # # # # # # n = int(input("enter a number : "))
# # # # # # # # # # # # # # # # # # # # # # # n=10
# # # # # # # # # # # # # # # # # # # # # # # nums = [] # initialisation
# # # # # # # # # # # # # # # # # # # # # # # for i in range(1,n+1): # iteration
# # # # # # # # # # # # # # # # # # # # # # # 	nums.append(i) # assignment 
# # # # # # # # # # # # # # # # # # # # # # # print(nums)

# # # # # # # # # # # # # # # # # # # # # # # evens = [] # initialisation
# # # # # # # # # # # # # # # # # # # # # # # for i in range(1,n+1): # iteration
# # # # # # # # # # # # # # # # # # # # # # # 	if i%2 == 0 : # condition
# # # # # # # # # # # # # # # # # # # # # # # 		evens.append(i) # assignment
# # # # # # # # # # # # # # # # # # # # # # # print(evens)

# # # # # # # # # # # # # # # # # # # # # # # sqs = [] # initialisation
# # # # # # # # # # # # # # # # # # # # # # # for i in range(1,n+1): # iteration
# # # # # # # # # # # # # # # # # # # # # # # 	sqs.append(i**2) # operation + assignment
# # # # # # # # # # # # # # # # # # # # # # # print(sqs)

# # # # # # # # # # # # # # # # # # # # # # # evensqs = [] # initialisation
# # # # # # # # # # # # # # # # # # # # # # # for i in range(1,n+1): # iteration
# # # # # # # # # # # # # # # # # # # # # # # 	if i%2 == 0 : # condition
# # # # # # # # # # # # # # # # # # # # # # # 		evensqs.append(i**2) # operation + assignment
# # # # # # # # # # # # # # # # # # # # # # # print(evensqs)

# # # # # # # # # # # # # # # # # # # # # # # list comprehensions

# # # # # # # # # # # # # # # # # # # # # # # <listname> = [<assignment> <iteration>]
# # # # # # # # # # # # # # # # # # # # # # nums = [i for i in range(1,11)]
# # # # # # # # # # # # # # # # # # # # # # print(nums)

# # # # # # # # # # # # # # # # # # # # # # # <listname> = [<assignment> <iteration> <condition>]
# # # # # # # # # # # # # # # # # # # # # # evens = [i for i in range(1,11) if i%2==0]
# # # # # # # # # # # # # # # # # # # # # # print(evens)

# # # # # # # # # # # # # # # # # # # # # # # <listname> = [<operation+assignment> <iteration>]
# # # # # # # # # # # # # # # # # # # # # # sqs = [i**2 for i in range(1,11)]
# # # # # # # # # # # # # # # # # # # # # # print(sqs)

# # # # # # # # # # # # # # # # # # # # # # evensqs = [i**2 for i in range(1,11) if i%2==0]
# # # # # # # # # # # # # # # # # # # # # # print(evensqs)

# # # # # # # # # # # # # # # # # # # # # stmt = "python is an easy programming language"
# # # # # # # # # # # # # # # # # # # # # # ["python","programming","language"]
# # # # # # # # # # # # # # # # # # # # # # op = [i for i in stmt.split() if len(i)>4]
# # # # # # # # # # # # # # # # # # # # # # print(op)

# # # # # # # # # # # # # # # # # # # # # # op = [[j for j in i] for i in stmt.split() if len(i)>4]
# # # # # # # # # # # # # # # # # # # # # # print(op)

# # # # # # # # # # # # # # # # # # # # # # dia = '''Python is an interpreted, highlevel, general-purpose programming language. Created by Guido van Rossum and first released in 1991, Python's design philosophy emphasizes code readability  '''

# # # # # # # # # # # # # # # # # # # # # # l1 = [1,0,1,1,1,0,0,0,1,1,0,0,1,0,1,0,1,0,1,0,1,1,1,0] 

# # # # # # # # # # # # # # # # # # # # # # print(len(l1))
# # # # # # # # # # # # # # # # # # # # # # print(len(dia.split()))
# # # # # # # # # # # # # # # # # # # # # # ["python" , "an interpreted highlevel"]

# # # # # # # # # # # # # # # # # # # # # # l1 = [2,3,4,7,5,8,6,3,4,7,2,3,4]

# # # # # # # # # # # # # # # # # # # # # # [2,3] --> 2 
# # # # # # # # # # # # # # # # # # # # # # [3,4] --> 3
# # # # # # # # # # # # # # # # # # # # # # [4,7] --> 2 
# # # # # # # # # # # # # # # # # # # # # # [2,3,4] --> 2 
# # # # # # # # # # # # # # # # # # # # # # [3,4,7] --> 2 

# # # # # # # # # # # # # # # # # # # # # tuples 
# # # # # # # # # # # # # # # # # # # # # 	- collection
# # # # # # # # # # # # # # # # # # # # # 	- sequence / ordered 
# # # # # # # # # # # # # # # # # # # # # 	- indexed , sliced , concatenated , iterated
# # # # # # # # # # # # # # # # # # # # # 	- <class tuple>
# # # # # # # # # # # # # # # # # # # # # 	- default collections
# # # # # # # # # # # # # # # # # # # # # 	- immutable --> XX modify XX delete XX add XX 

# # # # # # # # # # # # # # # # # # # # # syntax
# # # # # # # # # # # # # # # # # # # # # ------

# # # # # # # # # # # # # # # # # # # # # <tuplename> = (<ele1> , <ele2>,<ele3> ,<ele4>)
# # # # # # # # # # # # # # # # # # # # # nums = (1,2,3,4,5,6,78,8,9,0,3)
# # # # # # # # # # # # # # # # # # # # # print(nums)
# # # # # # # # # # # # # # # # # # # # # print(type(nums))

# # # # # # # # # # # # # # # # # # # # mixed = ("python",3,"hyd",10,34,23,"mysql")
# # # # # # # # # # # # # # # # # # # # # print(mixed)

# # # # # # # # # # # # # # # # # # # # # <tuplename>[<index>]
# # # # # # # # # # # # # # # # # # # # # print(mixed[2])
# # # # # # # # # # # # # # # # # # # # # print(mixed[-1])
# # # # # # # # # # # # # # # # # # # # # print(mixed[5])

# # # # # # # # # # # # # # # # # # # # # <tuplename>[<sindex> : <eindex>]
# # # # # # # # # # # # # # # # # # # # # print(mixed[3:5])
# # # # # # # # # # # # # # # # # # # # # print(mixed[2:])
# # # # # # # # # # # # # # # # # # # # # print(mixed[:4])

# # # # # # # # # # # # # # # # # # # # # for <dummy> in <tuplename>:
# # # # # # # # # # # # # # # # # # # # # 	<statements>

# # # # # # # # # # # # # # # # # # # # # for i in mixed:
# # # # # # # # # # # # # # # # # # # # # 	print(i)

# # # # # # # # # # # # # # # # # # # # # mixed[3] = 100
# # # # # # # # # # # # # # # # # # # # # del mixed[2]
# # # # # # # # # # # # # # # # # # # # # mixed.append(10)

# # # # # # # # # # # # # # # # # # # # # a = 10 
# # # # # # # # # # # # # # # # # # # # # b = 20 
# # # # # # # # # # # # # # # # # # # # # print(a)
# # # # # # # # # # # # # # # # # # # # # print(type(a))
# # # # # # # # # # # # # # # # # # # # # print(b)
# # # # # # # # # # # # # # # # # # # # # print(type(b))

# # # # # # # # # # # # # # # # # # # # a,b = 10,20 # multiple assignment
# # # # # # # # # # # # # # # # # # # # # print(a)
# # # # # # # # # # # # # # # # # # # # # print(type(a))
# # # # # # # # # # # # # # # # # # # # # print(b)
# # # # # # # # # # # # # # # # # # # # # print(type(b))

# # # # # # # # # # # # # # # # # # # # a = 10,20
# # # # # # # # # # # # # # # # # # # # # print(a)
# # # # # # # # # # # # # # # # # # # # # print(type(a))

# # # # # # # # # # # # # # # # # # # # # a,b = 10,20,30 # error


# # # # # # # # # # # # # # # # # # # # # constants , values not changed freq 
# # # # # # # # # # # # # # # # # # # # fees = (10,30,40,15,25)
# # # # # # # # # # # # # # # # # # # # # print(fees)
# # # # # # # # # # # # # # # # # # # # # print(type(fees))
# # # # # # # # # # # # # # # # # # # # # tuple --> list --> modify --> list --> tuple 
# # # # # # # # # # # # # # # # # # # # # tuple() , list()

# # # # # # # # # # # # # # # # # # # # fees = list(fees)
# # # # # # # # # # # # # # # # # # # # # print(fees)
# # # # # # # # # # # # # # # # # # # # # print(type(fees))

# # # # # # # # # # # # # # # # # # # # fees[1] = 35 
# # # # # # # # # # # # # # # # # # # # # print(fees)
# # # # # # # # # # # # # # # # # # # # # print(type(fees))

# # # # # # # # # # # # # # # # # # # # fees = tuple(fees)
# # # # # # # # # # # # # # # # # # # # # print(fees)
# # # # # # # # # # # # # # # # # # # # # print(type(fees))



# # # # # # # # # # # # # # # # # # # # tech = ("py",("sql",3,"hyd"),1.3,(30,"mysql",4),"java",2,["php","oracle"])
# # # # # # # # # # # # # # # # # # # # # int float str list tuple
# # # # # # # # # # # # # # # # # # # # # for i in tech:
# # # # # # # # # # # # # # # # # # # # # 	print(i)
# # # # # # # # # # # # # # # # # # # # # ("py","sql",3,"hyd",1.3,30,"mysql",4,"java",2,"php","oracle") --> op
# # # # # # # # # # # # # # # # # # # # # op = []
# # # # # # # # # # # # # # # # # # # # # for i in tech:
# # # # # # # # # # # # # # # # # # # # # 	if type(i) is list or type(i) is tuple:
# # # # # # # # # # # # # # # # # # # # # 		for j in i:
# # # # # # # # # # # # # # # # # # # # # 			op.append(j)
# # # # # # # # # # # # # # # # # # # # # 	else:
# # # # # # # # # # # # # # # # # # # # # 		op.append(i)
# # # # # # # # # # # # # # # # # # # # # print(tuple(op))

# # # # # # # # # # # # # # # # # # # # l1 = [10,20,30,40]
# # # # # # # # # # # # # # # # # # # # l2 = [3,43,54,6]
# # # # # # # # # # # # # # # # # # # # # op --> ([10,3] , [20,43] , [30,54] , [40,6])
# # # # # # # # # # # # # # # # # # # # op = []

# # # # # # # # # # # # # # # # # # # # # for i in range(len(l1)): # 0 1 2 3 
# # # # # # # # # # # # # # # # # # # # # 	emp = []
# # # # # # # # # # # # # # # # # # # # # 	emp.append(l1[i]) # [10]
# # # # # # # # # # # # # # # # # # # # # 	emp.append(l2[i]) # [10,3]
# # # # # # # # # # # # # # # # # # # # # 	op.append(emp)
# # # # # # # # # # # # # # # # # # # # # print(tuple(op))

# # # # # # # # # # # # # # # # # # # # stmt = "python is easy"
# # # # # # # # # # # # # # # # # # # # # ((python,6) , (is,2) , (easy,4))
# # # # # # # # # # # # # # # # # # # # op = []

# # # # # # # # # # # # # # # # # # # # # for word in stmt.split():
# # # # # # # # # # # # # # # # # # # # # 	emp = []
# # # # # # # # # # # # # # # # # # # # # 	emp.append(word)
# # # # # # # # # # # # # # # # # # # # # 	emp.append(len(word))

# # # # # # # # # # # # # # # # # # # # # 	op.append(tuple(emp))
# # # # # # # # # # # # # # # # # # # # # print(op)

# # # # # # # # # # # # # # # # # # # # # XXX tuple comprehensions --> XXX 
# # # # # # # # # # # # # # # # # # # # # tuple(list comprehensions)

# # # # # # # # # # # # # # # # # # # # # t1 = (10,20,30,40)
# # # # # # # # # # # # # # # # # # # # # t2 = (3,43,54,60)

# # # # # # # # # # # # # # # # # # # # # print(t1 + t2)
# # # # # # # # # # # # # # # # # # # # # t3 = t1 + t2 
# # # # # # # # # # # # # # # # # # # # # print(t3)

# # # # # # # # # # # # # # # # # # # # # dictionaries 
# # # # # # # # # # # # # # # # # # # # # list / tuple --> ???

# # # # # # # # # # # # # # # # # # # # # emp1 = ["khan","emp_1","py",98,76,"hyd"] # 012345
# # # # # # # # # # # # # # # # # # # # # emp2 = ["john","emp_2","java",67,"bom"] #  01234 

# # # # # # # # # # # # # # # # # # # # # emp1[0] --> name 
# # # # # # # # # # # # # # # # # # # # # emp2[0] --> name 

# # # # # # # # # # # # # # # # # # # # # emp1[2] --> technology
# # # # # # # # # # # # # # # # # # # # # emp2[2] --> technology 

# # # # # # # # # # # # # # # # # # # # # emp1[4] --> mobile2
# # # # # # # # # # # # # # # # # # # # # emp2[4] --> location 

# # # # # # # # # # # # # # # # # # # # # 0 --> name 
# # # # # # # # # # # # # # # # # # # # # 2 --> technology
# # # # # # # # # # # # # # # # # # # # # 4 --> ???

# # # # # # # # # # # # # # # # # # # # # indices --> fixed / immutable

# # # # # # # # # # # # # # # # # # # # # 01234 --> abcde 

# # # # # # # # # # # # # # # # # # # # dictionaries
# # # # # # # # # # # # # # # # # # # # 	- customise indices
# # # # # # # # # # # # # # # # # # # # 	- index --> modified 
# # # # # # # # # # # # # # # # # # # # 	- elements --> values 

# # # # # # # # # # # # # # # # # # # # indices --> keys 
# # # # # # # # # # # # # # # # # # # # elements --> values 
# # # # # # # # # # # # # # # # # # # # dictionaries --> key value pair collection
# # # # # # # # # # # # # # # # # # # # key <--> value 

# # # # # # # # # # # # # # # # # # # # features
# # # # # # # # # # # # # # # # # # # # 	mutable
# # # # # # # # # # # # # # # # # # # # 	<class dict>
# # # # # # # # # # # # # # # # # # # # 	XX indexed XX 
# # # # # # # # # # # # # # # # # # # # 	XX sliced XX 
# # # # # # # # # # # # # # # # # # # # 	concatenated
# # # # # # # # # # # # # # # # # # # # 	iterated
# # # # # # # # # # # # # # # # # # # # 	unordered collections
# # # # # # # # # # # # # # # # # # # # 	arbitary collections 
# # # # # # # # # # # # # # # # # # # # 	XX sequences XX

# # # # # # # # # # # # # # # # # # # # syntax
# # # # # # # # # # # # # # # # # # # # ------
# # # # # # # # # # # # # # # # # # # # <dictname> = {<k1>:<v1>,<k2>:<v2>,<k3>:<v3>,<k4>:<v4>}
# # # # # # # # # # # # # # # # # # # # keys --> k1 , k2 , k3 , k4  --> customised indices
# # # # # # # # # # # # # # # # # # # # values --> v1 , v2 , v3 , v4 --> values/ elements 

# # # # # # # # # # # # # # # # # # # # key + value --> item 
# # # # # # # # # # # # # # # # # # # # k1 + v1 / k2 + v2  --> item 

# # # # # # # # # # # # # # # # # # # # nums = {1:10 , 2:40, 10:100, 30:500}
# # # # # # # # # # # # # # # # # # # # print(nums)
# # # # # # # # # # # # # # # # # # # # print(type(nums))

# # # # # # # # # # # # # # # # # # # # heterogeneous

# # # # # # # # # # # # # # # # # # # # tech = {3:"python","mysql":7 ,"pip":19 , "db2":5.6}
# # # # # # # # # # # # # # # # # # # # keys --> 3 mysql pip db2 
# # # # # # # # # # # # # # # # # # # # values --> python 7 19 5.6
# # # # # # # # # # # # # # # # # # # # print(tech)

# # # # # # # # # # # # # # # # # # # # keys 
# # # # # # # # # # # # # # # # # # # # 	immutable --> int float str tuple 
# # # # # # # # # # # # # # # # # # # # 	unique 

# # # # # # # # # # # # # # # # # # # # values
# # # # # # # # # # # # # # # # # # # # 	repetitions

# # # # # # # # # # # # # # # # # # # # tech = {"python":3,"mysql":7 ,"pip":19,"db2":5.6,"java":7}
# # # # # # # # # # # # # # # # # # # # print(tech)

# # # # # # # # # # # # # # # # # # # # tech = {"python":3,"mysql":7 ,"pip":19,"python":2,"java":7}
# # # # # # # # # # # # # # # # # # # # print(tech)

# # # # # # # # # # # # # # # # # # # # repetitions in keys --> latest value 
# # # # # # # # # # # # # # # # # # # # tech = {"python":3,["mysql","java"]:7 ,"pip":19,"db2":5.6}
# # # # # # # # # # # # # # # # # # # # print(tech)

# # # # # # # # # # # # # # # # # # # # "python"
# # # # # # # # # # # # # # # # # # # # ["mysql","java"]
# # # # # # # # # # # # # # # # # # # # "pip"
# # # # # # # # # # # # # # # # # # # # "db2"

# # # # # # # # # # # # # # # # # # # # tech = {"python":3,("mysql","java"):7 ,"pip":19,"db2":5.6}
# # # # # # # # # # # # # # # # # # # # print(tech)

# # # # # # # # # # # # # # # # # # # # <dictname>[<key>] --> value
# # # # # # # # # # # # # # # # # # # # print(tech["python"])
# # # # # # # # # # # # # # # # # # # # print(tech["pip"])
# # # # # # # # # # # # # # # # # # # # print(tech[("mysql","java")])

# # # # # # # # # # # # # # # # # # # # del <dictname>[<key>]
# # # # # # # # # # # # # # # # # # # # del tech["python"]
# # # # # # # # # # # # # # # # # # # # print(tech)

# # # # # # # # # # # # # # # # # # # # <dictname>[<key>] = <newvalue>
# # # # # # # # # # # # # # # # # # # # tech["pip"] = 21
# # # # # # # # # # # # # # # # # # # # print(tech)

# # # # # # # # # # # # # # # # # # # # adding elements
# # # # # # # # # # # # # # # # # # # # key --> un existing 

# # # # # # # # # # # # # # # # # # # # tech["oracle"] = 4 
# # # # # # # # # # # # # # # # # # # # print(tech)

# # # # # # # # # # # # # # # # # # # tech = {"python":3,"mysql":7 ,"pip":19,"db2":5.6,"java":7}

# # # # # # # # # # # # # # # # # # # # default iteration of dict --> keys
# # # # # # # # # # # # # # # # # # # # for i in tech:
# # # # # # # # # # # # # # # # # # # # 	print(i)

# # # # # # # # # # # # # # # # # # # # <dictname>.keys() 
# # # # # # # # # # # # # # # # # # # # <dictname>.values() 
# # # # # # # # # # # # # # # # # # # # <dictname>.items() 

# # # # # # # # # # # # # # # # # # # # for i in tech.keys(): # only keys 
# # # # # # # # # # # # # # # # # # # # 	print(i)

# # # # # # # # # # # # # # # # # # # # for i in tech.values(): # only values 
# # # # # # # # # # # # # # # # # # # # 	print(i)

# # # # # # # # # # # # # # # # # # # # for i in tech.items(): # tuple of items 
# # # # # # # # # # # # # # # # # # # # 	print(i)


# # # # # # # # # # # # # # # # # # # d1 = {"python":3,"mysql":7 }
# # # # # # # # # # # # # # # # # # # d2 = {"pip":19,"db2":5.6,"java":7}
# # # # # # # # # # # # # # # # # # # # print(d1 + d2) # error --> XXX + XXX
# # # # # # # # # # # # # # # # # # # # <dict1>.update(<dict2>)

# # # # # # # # # # # # # # # # # # # # print(d1) # 2 
# # # # # # # # # # # # # # # # # # # # print(d2) # 3 
# # # # # # # # # # # # # # # # # # # # d1.update(d2)
# # # # # # # # # # # # # # # # # # # # print(d1) # 5 
# # # # # # # # # # # # # # # # # # # # print(d2) # 3

# # # # # # # # # # # # # # # # # # # # print(len(d1))

# # # # # # # # # # # # # # # # # # # # print(d2)
# # # # # # # # # # # # # # # # # # # # d2.popitem() # remove random item 
# # # # # # # # # # # # # # # # # # # # print(d2)

# # # # # # # # # # # # # # # # # # # # print(d2)
# # # # # # # # # # # # # # # # # # # # d2.pop("java") # remove specific item 
# # # # # # # # # # # # # # # # # # # # print(d2)

# # # # # # # # # # # # # # # # # # # # del , pop , popitem --> remove
# # # # # # # # # # # # # # # # # # # # index (un existing) --> add 

# # # # # # # # # # # # # # # # # # # # enter a number 
# # # # # # # # # # # # # # # # # # # # 5 
# # # # # # # # # # # # # # # # # # # # {1:1,2:4,3:9,4:16,5:25}

# # # # # # # # # # # # # # # # # # # # n = 5 
# # # # # # # # # # # # # # # # # # # # d = {}
# # # # # # # # # # # # # # # # # # # # for i in range(1,n+1):
# # # # # # # # # # # # # # # # # # # # 	d[i] = i**2
# # # # # # # # # # # # # # # # # # # # print(d)

# # # # # # # # # # # # # # # # # # # # stmt = "python is an easy programming language"
# # # # # # # # # # # # # # # # # # # # d = {}
# # # # # # # # # # # # # # # # # # # # for i in stmt.split():
# # # # # # # # # # # # # # # # # # # # 	d[i] = len(i)
# # # # # # # # # # # # # # # # # # # # print(d)

# # # # # # # # # # # # # # # # # # # # tasks , sets 

# # # # # # # # # # # # # # # # # # # l1 = [1,2,3,4]
# # # # # # # # # # # # # # # # # # # l2 = [10,203,43,22]
# # # # # # # # # # # # # # # # # # # # d = {}

# # # # # # # # # # # # # # # # # # # # for i in range(len(l1)):
# # # # # # # # # # # # # # # # # # # # 	d[l1[i]] = l2[i]
# # # # # # # # # # # # # # # # # # # # print(d)

# # # # # # # # # # # # # # # # # # # # l1 = [1,2,3,4,5,6,7]
# # # # # # # # # # # # # # # # # # # # l2 = [10,203,43,22,30,20]

# # # # # # # # # # # # # # # # # # # # zip() 
# # # # # # # # # # # # # # # # # # # # 	- inputs --> collections
# # # # # # # # # # # # # # # # # # # # 	- output --> zip object 

# # # # # # # # # # # # # # # # # # # zo = zip(l1,l2)
# # # # # # # # # # # # # # # # # # # # print(dict(zo))
# # # # # # # # # # # # # # # # # # # # print(list(zo))
# # # # # # # # # # # # # # # # # # # # print(tuple(zo))

# # # # # # # # # # # # # # # # # # # # l1 = [1,2,3,4,5,6,7]
# # # # # # # # # # # # # # # # # # # # l2 = [10,203,43,22,30,20]
# # # # # # # # # # # # # # # # # # # # l3 = [100,200,3004,324,500]

# # # # # # # # # # # # # # # # # # # # zo = zip(l1,l2,l3)
# # # # # # # # # # # # # # # # # # # # print(list(zo))
# # # # # # # # # # # # # # # # # # # # print(tuple(zo))

# # # # # # # # # # # # # # # # # # # # dictionary comprehensions
# # # # # # # # # # # # # # # # # # # # -------------------------

# # # # # # # # # # # # # # # # # # # n = 10 

# # # # # # # # # # # # # # # # # # # # d = {i:i**2 for i in range(1,n+1)}
# # # # # # # # # # # # # # # # # # # # print(d)
# # # # # # # # # # # # # # # # # # # # d = {i:i**2 for i in range(1,n+1) if i%2 == 0 }
# # # # # # # # # # # # # # # # # # # # print(d)

# # # # # # # # # # # # # # # # # # # # stmt = "python is an easy programming language"
# # # # # # # # # # # # # # # # # # # # d = {i:len(i) for i in stmt.split()}
# # # # # # # # # # # # # # # # # # # # print(d)

# # # # # # # # # # # # # # # # # # # # sets 
# # # # # # # # # # # # # # # # # # # 	# special collections
# # # # # # # # # # # # # # # # # # # 	# XX sequences XX 
# # # # # # # # # # # # # # # # # # # 	# unordered
# # # # # # # # # # # # # # # # # # # 	# unique elements
# # # # # # # # # # # # # # # # # # # 	# XXX indexing , slicing XXX
# # # # # # # # # # # # # # # # # # # 	# concatenation , iteration

# # # # # # # # # # # # # # # # # # # # <setname> = {<ele1>,<ele3>,<ele4>,<ele5>,<ele6>}
# # # # # # # # # # # # # # # # # # # nums = {1,3,4,43,54,6,57,68,4,243,34,657,68,76}
# # # # # # # # # # # # # # # # # # # # print(nums)
# # # # # # # # # # # # # # # # # # # # print(type(nums))

# # # # # # # # # # # # # # # # # # # # for i in nums:
# # # # # # # # # # # # # # # # # # # # 	print(i)

# # # # # # # # # # # # # # # # # # # # mutable
# # # # # # # # # # # # # # # # # # # # <setname>.add(<element>)
# # # # # # # # # # # # # # # # # # # # print(nums)
# # # # # # # # # # # # # # # # # # # # nums.add(100)
# # # # # # # # # # # # # # # # # # # # print(nums)
# # # # # # # # # # # # # # # # # # # # nums.add("python")
# # # # # # # # # # # # # # # # # # # # print(nums)

# # # # # # # # # # # # # # # # # # # # <setname>.remove(<element>)
# # # # # # # # # # # # # # # # # # # # print(nums)
# # # # # # # # # # # # # # # # # # # # nums.remove(34)
# # # # # # # # # # # # # # # # # # # # print(nums)

# # # # # # # # # # # # # # # # # # # s1 = {10,20,30,40}
# # # # # # # # # # # # # # # # # # # s2 = {30,40,50,60}
# # # # # # # # # # # # # # # # # # # s3 = {50,60}
# # # # # # # # # # # # # # # # # # # s4 = {100}

# # # # # # # # # # # # # # # # # # # # print(s1.union(s2))
# # # # # # # # # # # # # # # # # # # # print(s1.intersection(s2))
# # # # # # # # # # # # # # # # # # # # print(s1.difference(s2))
# # # # # # # # # # # # # # # # # # # # print(s2.difference(s1))

# # # # # # # # # # # # # # # # # # # # print(s1.issubset(s2))
# # # # # # # # # # # # # # # # # # # # print(s3.issubset(s2))

# # # # # # # # # # # # # # # # # # # # print(s1.issuperset(s2))
# # # # # # # # # # # # # # # # # # # # print(s2.issuperset(s3))

# # # # # # # # # # # # # # # # # # # # print(s1.isdisjoint(s2))
# # # # # # # # # # # # # # # # # # # # print(s3.isdisjoint(s2))
# # # # # # # # # # # # # # # # # # # # print(s1.isdisjoint(s4))

# # # # # # # # # # # # # # # # # # # # sets --> mutable ----> lists
# # # # # # # # # # # # # # # # # # # # frozensets --> immutable --> tuples

# # # # # # # # # # # # # # # # # # # # frozensets --> ???

# # # # # # # # # # # # # # # # # # # # module 3 
# # # # # # # # # # # # # # # # # # # # 	part 1 --> functional programming
# # # # # # # # # # # # # # # # # # # # 	part 2 --> modules and packages 
# # # # # # # # # # # # # # # # # # # # 	part 3 --> file handling 

# # # # # # # # # # # # # # # # # # # part 1 --> functional programming
# # # # # # # # # # # # # # # # # # # 			-> making , using the functions

# # # # # # # # # # # # # # # # # # # XX functions XX --> tasks 
# # # # # # # # # # # # # # # # # # # functions --> modularisation , reusability of code 

# # # # # # # # # # # # # # # # # # # 100 lines --> code 
# # # # # # # # # # # # # # # # # # # 	even/odd --> 10 lines --> 3 times --> 30 lines

# # # # # # # # # # # # # # # # # # # 	even/odd --> 10 lines --> function --> 1 time 
# # # # # # # # # # # # # # # # # # # 	2 time --> function --> 1 line 
# # # # # # # # # # # # # # # # # # # 	3 time --> function --> 1 line 

# # # # # # # # # # # # # # # # # # # 2 types 
# # # # # # # # # # # # # # # # # # # 	- pre defined --> len() , print() , sort() 
# # # # # # # # # # # # # # # # # # # 	- user defined --> ____() , ____() , ___()

# # # # # # # # # # # # # # # # # # # 4 kinds 
# # # # # # # # # # # # # # # # # # # 0 --> no 
# # # # # # # # # # # # # # # # # # # 1 --> yes
# # # # # # # # # # # # # # # # # # # 		parameters 			returntype 
# # # # # # # # # # # # # # # # # # # 			0 					0 
# # # # # # # # # # # # # # # # # # # 			0					1 
# # # # # # # # # # # # # # # # # # # 			1 					0 
# # # # # # # # # # # # # # # # # # # 			1 					1

# # # # # # # # # # # # # # # # # # # function --> 3 components
# # # # # # # # # # # # # # # # # # # 	-> definition 
# # # # # # # # # # # # # # # # # # # 	-> implementation
# # # # # # # # # # # # # # # # # # # 	-> call 

# # # # # # # # # # # # # # # # # # # definition --> name , inputs --> mandatory --> once 
# # # # # # # # # # # # # # # # # # # implementation -> logic --> mandatory --> once 
# # # # # # # # # # # # # # # # # # # call --> output --> optional --> multiple 

# # # # # # # # # # # # # # # # # # # syntax 
# # # # # # # # # # # # # # # # # # # ------

# # # # # # # # # # # # # # # # # # # def <functionname>(): # definition
# # # # # # # # # # # # # # # # # # # 	<logic> # implementation

# # # # # # # # # # # # # # # # # # # <functionname>() # call 1 
# # # # # # # # # # # # # # # # # # # <functionname>() # call 2 
# # # # # # # # # # # # # # # # # # # <functionname>() # call 3 
# # # # # # # # # # # # # # # # # # # <functionname>() # call 4 

# # # # # # # # # # # # # # # # # # # def sayhello(): # definition
# # # # # # # # # # # # # # # # # # # 	print("hello python") # implementation

# # # # # # # # # # # # # # # # # # # sayhello() # call 
# # # # # # # # # # # # # # # # # # # sayhello() # call 


# # # # # # # # # # # # # # # # # # # def sayhello(): # definition
# # # # # # # # # # # # # # # # # # # 	print("hello") # implementation

# # # # # # # # # # # # # # # # # # # def sayhello(): # definition
# # # # # # # # # # # # # # # # # # # 	print("hai") # implementation

# # # # # # # # # # # # # # # # # # # sayhello() # hai

# # # # # # # # # # # # # # # # # # # def sayhello(): # definition
# # # # # # # # # # # # # # # # # # # 	print("bye") # implementation

# # # # # # # # # # # # # # # # # # # sayhello() # bye
# # # # # # # # # # # # # # # # # # # sayhello() # bye

# # # # # # # # # # # # # # # # # # # inputs --> parameters
# # # # # # # # # # # # # # # # # # # 	-> formal -> definition -> variables
# # # # # # # # # # # # # # # # # # # 	-> actual -> call -> values 

# # # # # # # # # # # # # # # # # # # def sayhello(name): # formal parameter
# # # # # # # # # # # # # # # # # # # 	print("hello " + str(name))

# # # # # # # # # # # # # # # # # # # sayhello("khan") # actual parameter
# # # # # # # # # # # # # # # # # # # sayhello("john") # actual parameter
# # # # # # # # # # # # # # # # # # # sayhello(100) # actual parameter

# # # # # # # # # # # # # # # # # # # formal --> datatype ---> java 
# # # # # # # # # # # # # # # # # # # formal --> XX datatype XX ---> python 

# # # # # # # # # # # # # # # # # # # parameters
# # # # # # # # # # # # # # # # # # # 	- positional 
# # # # # # # # # # # # # # # # # # # 	- default 
# # # # # # # # # # # # # # # # # # # 	- variable length 
# # # # # # # # # # # # # # # # # # # 	- keyworded

# # # # # # # # # # # # # # # # # # # positional 
# # # # # # # # # # # # # # # # # # # 	no of formal == no of actual

# # # # # # # # # # # # # # # # # # # def login(name,pwd): # formal --> 2 
# # # # # # # # # # # # # # # # # # # 	print("username is "+ str(name))
# # # # # # # # # # # # # # # # # # # 	print("password is "+ str(pwd))

# # # # # # # # # # # # # # # # # # # login("khan",98765) # actual --> 2
# # # # # # # # # # # # # # # # # # # login("john",98765,"9876543210") # actual --> 3
# # # # # # # # # # # # # # # # # # # login(98765,"khan") # actual --> 2

# # # # # # # # # # # # # # # # # # # def addnums(a,b,c): # positional --> 3
# # # # # # # # # # # # # # # # # # # 	res = a+b+c
# # # # # # # # # # # # # # # # # # # 	print(res)

# # # # # # # # # # # # # # # # # # # addnums(10,20,30) # 3 

# # # # # # # # # # # # # # # # # # # stmt = "python is easy"
# # # # # # # # # # # # # # # # # # # char = "y"
# # # # # # # # # # # # # # # # # # # getindex(stmt,char) # 1

# # # # # # # # # # # # # # # # # # # def getindex(s,c):
# # # # # # # # # # # # # # # # # # # 	res = s.index(c)
# # # # # # # # # # # # # # # # # # # 	print(res)

# # # # # # # # # # # # # # # # # # # stmt = "python is easy"
# # # # # # # # # # # # # # # # # # # char = "p"
# # # # # # # # # # # # # # # # # # # getindex(stmt,char)

# # # # # # # # # # # # # # # # # # # avg(100,200,150) # 150

# # # # # # # # # # # # # # # # # # # def avg(num1,num2,num3):
# # # # # # # # # # # # # # # # # # # 	ans = (num1+num2+num3)/3 
# # # # # # # # # # # # # # # # # # # 	print(ans)
# # # # # # # # # # # # # # # # # # # avg(100,200,150)

# # # # # # # # # # # # # # # # # # # doc string 
# # # # # # # # # # # # # # # # # # # 	meta data 
# # # # # # # # # # # # # # # # # # # 	introduction 
# # # # # # # # # # # # # # # # # # # 	multi line comment --> under definition
# # # # # # # # # # # # # # # # # # # 	__doc__ 
# # # # # # # # # # # # # # # # # # # 	<functionname>.__doc__

# # # # # # # # # # # # # # # # # # # def avg(num1,num2,num3):
# # # # # # # # # # # # # # # # # # 	'''this function calculates average of 3 numbers.'''
# # # # # # # # # # # # # # # # # # 	# ans = (num1+num2+num3)/3 
# # # # # # # # # # # # # # # # # # 	# print(ans)

# # # # # # # # # # # # # # # # # # # print(avg.__doc__)
# # # # # # # # # # # # # # # # # # # print(len.__doc__)
# # # # # # # # # # # # # # # # # # # print(str.find.__doc__)

# # # # # # # # # # # # # # # # # # # 3 parameters  , returntype

# # # # # # # # # # # # # # # # # # default parameters

# # # # # # # # # # # # # # # # # # def login(name,pwd):
# # # # # # # # # # # # # # # # # # 	print("username is "+ name)
# # # # # # # # # # # # # # # # # # 	print("password is "+ str(pwd))

# # # # # # # # # # # # # # # # # # # login("khan" ,"97392")
# # # # # # # # # # # # # # # # # # login(pwd = "56432" , name="john") # formal + actual->call

# # # # # # # # # # # # # # # # # def subscription(user,acc = "free"): # formal --> user , acc 
# # # # # # # # # # # # # # # # # 	print("username is " + user)
# # # # # # # # # # # # # # # # # 	print("account type is " + acc)

# # # # # # # # # # # # # # # # # # subscription("khan","premium")
# # # # # # # # # # # # # # # # # # subscription("john") # free
# # # # # # # # # # # # # # # # # # subscription("jane" , "paid") 

# # # # # # # # # # # # # # # # # # print(subscription) # functionname / location
# # # # # # # # # # # # # # # # # # print(type(subscription)) # class function

# # # # # # # # # # # # # # # # # # in function --> local variables --> XX out XX 
# # # # # # # # # # # # # # # # # # def addnums(a,b): # 10 20 
# # # # # # # # # # # # # # # # # # 	res = a+b  # 30 
# # # # # # # # # # # # # # # # # # 	print(res) # 30 

# # # # # # # # # # # # # # # # # # addnums(10,20)
# # # # # # # # # # # # # # # # # # print(res) # error

# # # # # # # # # # # # # # # # # # returntype --> call --> data --> from in --> out 

# # # # # # # # # # # # # # # # # # returntype
# # # # # # # # # # # # # # # # # # 	- return values 
# # # # # # # # # # # # # # # # # # 	- return variables
# # # # # # # # # # # # # # # # # # 	- return functionname
# # # # # # # # # # # # # # # # # # 	- return functioncall 

# # # # # # # # # # # # # # # # # # return values 
# # # # # # # # # # # # # # # # # # def addnums(a,b): # 10 20 
# # # # # # # # # # # # # # # # # # 	res = a+b  # 30 
# # # # # # # # # # # # # # # # # # 	return "python"

# # # # # # # # # # # # # # # # # # res = addnums(10,20)
# # # # # # # # # # # # # # # # # # print(res) 

# # # # # # # # # # # # # # # # # # return variables
# # # # # # # # # # # # # # # # # # def addnums(a,b): # 10 20 
# # # # # # # # # # # # # # # # # # 	res = a+b  # 30 
# # # # # # # # # # # # # # # # # # 	return res

# # # # # # # # # # # # # # # # # # res = addnums(10,20)
# # # # # # # # # # # # # # # # # # print(res) 

# # # # # # # # # # # # # # # # # # no return --> None
# # # # # # # # # # # # # # # # # # def addnums(a,b): # 10 20 
# # # # # # # # # # # # # # # # # # 	res = a+b  # 30 

# # # # # # # # # # # # # # # # # # res = addnums(10,20)
# # # # # # # # # # # # # # # # # # print(res) 

# # # # # # # # # # # # # # # # # # def avg(a,b,c): # 3 formal
# # # # # # # # # # # # # # # # # # 	ans = (a+b+c)//3
# # # # # # # # # # # # # # # # # # 	print(ans)

# # # # # # # # # # # # # # # # # # avg(10,200,300) # 3 formal
# # # # # # # # # # # # # # # # # # avg(10,200) # 2 formal
# # # # # # # # # # # # # # # # # # avg(1,2,3,4) # 4 formal

# # # # # # # # # # # # # # # # # # avg --> 1 , 2 , 3  , 4 . . . .

# # # # # # # # # # # # # # # # # # variable length parameters
# # # # # # # # # # # # # # # # # 	# - tuple 
# # # # # # # # # # # # # # # # # 	# - name of tuple --> args 
# # # # # # # # # # # # # # # # # 	# - formal parameter --> *args 
# # # # # # # # # # # # # # # # # 	# - len(tuple) --> 0 . . . . n

# # # # # # # # # # # # # # # # # def avg(*args):
# # # # # # # # # # # # # # # # # 	res = sum(args)/len(args)
# # # # # # # # # # # # # # # # # 	print(res)

# # # # # # # # # # # # # # # # # # avg(10,20)
# # # # # # # # # # # # # # # # # # avg(10,20,3,4,5,6,67)
# # # # # # # # # # # # # # # # # # avg() # XXX 
# # # # # # # # # # # # # # # # # # avg(1) # XXX 

# # # # # # # # # # # # # # # # # # avg --> 2 ......n 
# # # # # # # # # # # # # # # # # # min 2 numbers --> avg
# # # # # # # # # # # # # # # # # def avg(a,b,*args):
# # # # # # # # # # # # # # # # # 	res = (a+b+sum(args)) / (2+len(args))
# # # # # # # # # # # # # # # # # 	print(res)

# # # # # # # # # # # # # # # # # # avg(10,20)
# # # # # # # # # # # # # # # # # # avg(23,24,4,5,4,67,2,8,9,32,43)
# # # # # # # # # # # # # # # # # # avg(10)
# # # # # # # # # # # # # # # # # # avg()

# # # # # # # # # # # # # # # # # n1 --> enter a number --> 40
# # # # # # # # # # # # # # # # # n2 --> enter a number --> 10

# # # # # # # # # # # # # # # # # addnums --> n1 , n2  --> 50 
# # # # # # # # # # # # # # # # # subnums --> 50 , n2  --> 40 
# # # # # # # # # # # # # # # # # mulnums --> 40 , n2  --> 400 
# # # # # # # # # # # # # # # # # divnums --> 400 , n2 --> 40 

# # # # # # # # # # # # # # # # n1 = 40 
# # # # # # # # # # # # # # # # n2 = 10 

# # # # # # # # # # # # # # # # def addnums(a,b):
# # # # # # # # # # # # # # # # 	res = a+b 
# # # # # # # # # # # # # # # # 	print(res)
# # # # # # # # # # # # # # # # 	return res 
# # # # # # # # # # # # # # # # def subnums(a,b):
# # # # # # # # # # # # # # # # 	res = a-b 
# # # # # # # # # # # # # # # # 	print(res)
# # # # # # # # # # # # # # # # 	return res 
# # # # # # # # # # # # # # # # def mulnums(a,b):
# # # # # # # # # # # # # # # # 	res = a*b 
# # # # # # # # # # # # # # # # 	print(res)
# # # # # # # # # # # # # # # # 	return res 
# # # # # # # # # # # # # # # # def divnums(a,b):
# # # # # # # # # # # # # # # # 	res = a//b 
# # # # # # # # # # # # # # # # 	print(res)
# # # # # # # # # # # # # # # # 	return res 

# # # # # # # # # # # # # # # # # addres = addnums(n1,n2)
# # # # # # # # # # # # # # # # # subres = subnums(addres,n2)
# # # # # # # # # # # # # # # # # mulres = mulnums(subres,n2)
# # # # # # # # # # # # # # # # # divnums(mulres,n2)

# # # # # # # # # # # # # # # # # divnums(mulnums(subnums(addnums(n1,n2),n2),n2),n2)


# # # # # # # # # # # # # # # # # makecake ---> flav,wei,shape
# # # # # # # # # # # # # # # # # 	print(flav)
# # # # # # # # # # # # # # # # # 	print(wei)
# # # # # # # # # # # # # # # # # 	print(shape)

# # # # # # # # # # # # # # # # # "vannila" , 3 ,"round"
# # # # # # # # # # # # # # # # # "vannila" , 2
# # # # # # # # # # # # # # # # # "oval" , "choc" , 5 
# # # # # # # # # # # # # # # # # 4 ,"pine" , "square"
# # # # # # # # # # # # # # # # # "rect"
# # # # # # # # # # # # # # # # # "round" , 2 
# # # # # # # # # # # # # # # # # 5 
# # # # # # # # # # # # # # # # # 

# # # # # # # # # # # # # # # # # parameter(1) , returntype(2) --> 231019

# # # # # # # # # # # # # # # # # keyworded parameters

# # # # # # # # # # # # # # # # # def makecake(flav="vannila",shape="round",wei=3):
# # # # # # # # # # # # # # # # # 	print("flavour of cake is "+ flav)
# # # # # # # # # # # # # # # # # 	print("shape of cake is "+ shape)
# # # # # # # # # # # # # # # # # 	print("weight of cake is "+ str(wei))
	
# # # # # # # # # # # # # # # # # makecake("vannila" , wei = 3 ,shape = "round")
# # # # # # # # # # # # # # # # # makecake("vannila" , wei = 2)
# # # # # # # # # # # # # # # # # makecake(shape = "oval" , flav = "choc" , wei = 5 )
# # # # # # # # # # # # # # # # # makecake(shape = "rect")
# # # # # # # # # # # # # # # # # makecake(shape = "round" , wei = 2 )
# # # # # # # # # # # # # # # # # makecake(wei = 5)
# # # # # # # # # # # # # # # # # makecake()

# # # # # # # # # # # # # # # # # keyworded parameters
# # # # # # # # # # # # # # # # 	# -> extra parameters
# # # # # # # # # # # # # # # # 	# -> dictionary
# # # # # # # # # # # # # # # # 	# -> kwargs --> name of dict 
# # # # # # # # # # # # # # # # 	# -> **kwargs --> formal parameter

# # # # # # # # # # # # # # # # # def makecake(flav="vannila",shape="round",wei=3,**kwargs):
# # # # # # # # # # # # # # # # # 	print("flavour of cake is "+ flav)
# # # # # # # # # # # # # # # # # 	print("shape of cake is "+ shape)
# # # # # # # # # # # # # # # # # 	print("weight of cake is "+ str(wei))
# # # # # # # # # # # # # # # # # 	print(kwargs)

# # # # # # # # # # # # # # # # # makecake("choc" , "rect" , 5 , toppings ="almonds" , color ="brown")

# # # # # # # # # # # # # # # # # returntype 
# # # # # # # # # # # # # # # # # 	- functionname
# # # # # # # # # # # # # # # # # 	- functioncall

# # # # # # # # # # # # # # # # # def hello():
# # # # # # # # # # # # # # # # # 	print("hello")

# # # # # # # # # # # # # # # # # def bye():
# # # # # # # # # # # # # # # # # 	print("bye")
# # # # # # # # # # # # # # # # # 	return hello # functionname

# # # # # # # # # # # # # # # # # print(hello) # location
# # # # # # # # # # # # # # # # # print(bye) # location

# # # # # # # # # # # # # # # # # print(hello()) # hello + None
# # # # # # # # # # # # # # # # # print(bye()) # bye + location

# # # # # # # # # # # # # # # # # def hello():
# # # # # # # # # # # # # # # # # 	print("hello")

# # # # # # # # # # # # # # # # # def bye():
# # # # # # # # # # # # # # # # # 	print("bye")
# # # # # # # # # # # # # # # # # 	return hello() # functioncall

# # # # # # # # # # # # # # # # # print(hello()) # hello + None
# # # # # # # # # # # # # # # # # print(bye()) 
# # # # # # # # # # # # # # # # 	# bye + print(hello())
# # # # # # # # # # # # # # # # 	# bye + hello + none

# # # # # # # # # # # # # # # # # print(type(hello())) # hello + NoneType
# # # # # # # # # # # # # # # # # print(type(bye())) # bye + hello + NoneType


# # # # # # # # # # # # # # # # def hello():
# # # # # # # # # # # # # # # # 	print("hello")
# # # # # # # # # # # # # # # # 	return 100 

# # # # # # # # # # # # # # # # def bye():
# # # # # # # # # # # # # # # # 	print("bye")
# # # # # # # # # # # # # # # # 	return hello() # functioncall

# # # # # # # # # # # # # # # # # print(hello()) # hello + 100 
# # # # # # # # # # # # # # # # # print(type(hello())) # hello + int

# # # # # # # # # # # # # # # # # print(bye()) # bye + hello + 100
# # # # # # # # # # # # # # # # # print(type(bye())) # bye + hello + int

# # # # # # # # # # # # # # # # # lambda functions 
# # # # # # # # # # # # # # # # # 	anonymous functions
# # # # # # # # # # # # # # # # # 	lambda operator 
# # # # # # # # # # # # # # # # # 	- one line 
# # # # # # # # # # # # # # # # # 	- def , implementation 
# # # # # # # # # # # # # # # # # 	- auto returned 

# # # # # # # # # # # # # # # # # syntax
# # # # # # # # # # # # # # # # # ------
# # # # # # # # # # # # # # # # # <functionname> = lambda <parameters> : <implementation>

# # # # # # # # # # # # # # # # # addnums = lambda a,b : a+b 
# # # # # # # # # # # # # # # # # print(addnums(100,200))

# # # # # # # # # # # # # # # # # special functions

# # # # # # # # # # # # # # # # # map() 
# # # # # # # # # # # # # # # # # 	- associative operations 
# # # # # # # # # # # # # # # # # 	- parameters --> function rt + collection(s)
# # # # # # # # # # # # # # # # # 	- output --> map object

# # # # # # # # # # # # # # # # # [1,5,6,2] --> square --> [1,25,36,4]
# # # # # # # # # # # # # # # # # [10,20,30] [1,2,3] --> add --> [11,22,33]

# # # # # # # # # # # # # # # # # map(<function> , <collection(s)>)

# # # # # # # # # # # # # # # # # l1 = [10,3,2,5,6,9]

# # # # # # # # # # # # # # # # # def square(a):
# # # # # # # # # # # # # # # # # 	res =  a**2 
# # # # # # # # # # # # # # # # # 	return res

# # # # # # # # # # # # # # # # # mo = map(square , l1)	
# # # # # # # # # # # # # # # # # print(list(mo))

# # # # # # # # # # # # # # # # l1 = [10,20,30,40]
# # # # # # # # # # # # # # # # l2 = [1,2,3,4]

# # # # # # # # # # # # # # # # # def addnums(a,b):
# # # # # # # # # # # # # # # # # 	res = a+b 
# # # # # # # # # # # # # # # # # 	return res 

# # # # # # # # # # # # # # # # # mo = map(addnums , l1 , l2)
# # # # # # # # # # # # # # # # # print(tuple(mo))


# # # # # # # # # # # # # # # # # mo = map(lambda a,b : a+b , l1 , l2)
# # # # # # # # # # # # # # # # # print(list(mo))

# # # # # # # # # # # # # # # # # print(list(map(lambda a:a**2 , l1)))

# # # # # # # # # # # # # # # # # filter() , reduce() 

# # # # # # # # # # # # # # # # # filter() 
# # # # # # # # # # # # # # # # # 	- check operations
# # # # # # # # # # # # # # # # # 	- parameters -> function rt , collection
# # # # # # # # # # # # # # # # # 	- output --> filter object 
# # # # # # # # # # # # # # # # # 	- typecast --> list , tuple 

# # # # # # # # # # # # # # # # l1 = [i for i in range(1,15)]
# # # # # # # # # # # # # # # # # print(l1)

# # # # # # # # # # # # # # # # # even -->????

# # # # # # # # # # # # # # # # # fo = filter(lambda a:a%2==0 , l1)
# # # # # # # # # # # # # # # # # print(list(fo))

# # # # # # # # # # # # # # # # # stmt = "python is an easy programming language"
# # # # # # # # # # # # # # # # # fo = filter(lambda word:len(word)>4 , stmt.split())
# # # # # # # # # # # # # # # # # print(list(fo))


# # # # # # # # # # # # # # # # # reduce()
# # # # # # # # # # # # # # # # # 	- XX default function XX 
# # # # # # # # # # # # # # # # # 	- from functools import reduce 
# # # # # # # # # # # # # # # # # 	- cumulative operation
# # # # # # # # # # # # # # # # # 	- parameters --> function rt , collection 
# # # # # # # # # # # # # # # # # 	- output --> value 

# # # # # # # # # # # # # # # # # l1 = [1,2,3,4,5]

# # # # # # # # # # # # # # # # # s = 0 
# # # # # # # # # # # # # # # # # for i in l1:
# # # # # # # # # # # # # # # # # 	s = s+i 
# # # # # # # # # # # # # # # # # print(s)

# # # # # # # # # # # # # # # # # i --> iterator --> a
# # # # # # # # # # # # # # # # # s --> container --> b 

# # # # # # # # # # # # # # # # # from functools import reduce 

# # # # # # # # # # # # # # # # # l1 = [1,2,3,4,5] # 15 
# # # # # # # # # # # # # # # # # ans = reduce(lambda a,b=0:a+b , l1)
# # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # functions tasks --> 241019

# # # # # # # # # # # # # # # # # module 3 part - 3 --> modules and packages --> 251019
# # # # # # # # # # # # # # # # # module 3 part - 2 --> file handling --> next week 

# # # # # # # # # # # # # # # # modules and packages
# # # # # # # # # # # # # # # # 	module --> python file --> .py 
# # # # # # # # # # # # # # # # 	modules --> import --> components
# # # # # # # # # # # # # # # # 	one module --> import components --> other module
	
# # # # # # # # # # # # # # # # types 
# # # # # # # # # # # # # # # # 	- internal default
# # # # # # # # # # # # # # # # 		- libs 
# # # # # # # # # # # # # # # # 		- available --> all components --> on all files 
# # # # # # # # # # # # # # # # 		- XX import XX 
# # # # # # # # # # # # # # # # 		- print() , len() , sort() --> used 

# # # # # # # # # # # # # # # # 	- internal imported 
# # # # # # # # # # # # # # # # 		- libs 
# # # # # # # # # # # # # # # # 		- import components --> py file 
# # # # # # # # # # # # # # # # 		- XXX available XXX
# # # # # # # # # # # # # # # # 		- from functools import reduce , import sys , import keyword
# # # # # # # # # # # # # # # # 		- os , math , random , sys , functools

# # # # # # # # # # # # # # # # 	- external 
# # # # # # # # # # # # # # # # 		- XX libs XX 
# # # # # # # # # # # # # # # # 		- external source 
# # # # # # # # # # # # # # # # 			- download --> install --> import --> use 
# # # # # # # # # # # # # # # # 		- write code 
# # # # # # # # # # # # # # # # 			- import --> use 

# # # # # # # # # # # # # # # # - external source 
# # # # # # # # # # # # # # # # 	download --> install --> import --> use 

# # # # # # # # # # # # # # # # download + install --> package manager 
# # # # # # # # # # # # # # # # node.js --> npm 
# # # # # # # # # # # # # # # # python --> pip 
# # # # # # # # # # # # # # # # 		python packaging index 	

# # # # # # # # # # # # # # # # pip --> install 
# # # # # # # # # # # # # # # # pre installed --> python installation

# # # # # # # # # # # # # # # # c:/>pip list  --> 22 --> all available external
# # # # # # # # # # # # # # # # c:/>pip freeze --> 20 --> manual downloaded
# # # # # # # # # # # # # # # # c:/>pip install <package/module name>
# # # # # # # # # # # # # # # # c:/>pip uninstall <package/module name>
# # # # # # # # # # # # # # # # c:/>pip install Django
# # # # # # # # # # # # # # # # c:/>pip install Django=2 

# # # # # # # # # # # # # # # # importing 

# # # # # # # # # # # # # # # # 3 types 
# # # # # # # # # # # # # # # # 	- complete import 
# # # # # # # # # # # # # # # # 		- all components
# # # # # # # # # # # # # # # # 		- reference --> mandatory 
# # # # # # # # # # # # # # # # import weekend
# # # # # # # # # # # # # # # # print(weekend.a)
# # # # # # # # # # # # # # # # print(weekend.b)
# # # # # # # # # # # # # # # # print(weekend.addnums(100,200))

# # # # # # # # # # # # # # # 	# - specific import
# # # # # # # # # # # # # # # 	# 	- only given components
# # # # # # # # # # # # # # # 	# 	- no reference mandatory 
# # # # # # # # # # # # # # # # from weekend import a , addnums
# # # # # # # # # # # # # # # # print(a)
# # # # # # # # # # # # # # # # print(addnums(10,33))

# # # # # # # # # # # # # # # 	# - * import 
# # # # # # # # # # # # # # # 	# 	- all components
# # # # # # # # # # # # # # # 	# 	- no reference mandatory 
# # # # # # # # # # # # # # # # from weekend import * 
# # # # # # # # # # # # # # # # print(a)
# # # # # # # # # # # # # # # # print(b)
# # # # # # # # # # # # # # # # print(addnums(20,90))

# # # # # # # # # # # # # # # package

# # # # # # # # # # # # # # # demo --> folder
# # # # # # # # # # # # # # # 	1.py 
# # # # # # # # # # # # # # # 	2.py 
# # # # # # # # # # # # # # # 	3.py 
# # # # # # # # # # # # # # # 	4.py

# # # # # # # # # # # # # # # demo --> folder 
# # # # # # # # # # # # # # # demo + __init__.py --> package

# # # # # # # # # # # # # # # demo -->package
# # # # # # # # # # # # # # # 	1.py 
# # # # # # # # # # # # # # # 	2.py 
# # # # # # # # # # # # # # # 	3.py 
# # # # # # # # # # # # # # # 	4.py
# # # # # # # # # # # # # # # 	__init__.py --> empty file --> initialisation

# # # # # # # # # # # # # # # # os , random 

# # # # # # # # # # # # # # # random	 
# # # # # # # # # # # # # # # 	internal imported 
# # # # # # # # # # # # # # # 	import random
# # # # # # # # # # # # # # # 	libs 
# # # # # # # # # # # # # # # 	numbers , collections	

# # # # # # # # # # # # # # import random 
# # # # # # # # # # # # # # print(random.random()) # float --> 0 and 1 
# # # # # # # # # # # # # # print(random.randint(10,20))

# # # # # # # # # # # # # # l1 = [i for i in range(10)]
# # # # # # # # # # # # # # # print(l1)

# # # # # # # # # # # # # # random.shuffle(l1)
# # # # # # # # # # # # # # # print(l1)

# # # # # # # # # # # # # # print(random.choice(l1))

# # # # # # # # # # # # # # print(random.sample(l1,3))

# # # # # # # # # # # # # # getnums(5) -  32752
# # # # # # # # # # # # # # getnums(3) -  124
# # # # # # # # # # # # # # getnums(8) -  47543242

# # # # # # # # # # # # # # getchars(4) - dhgd
# # # # # # # # # # # # # # getchars(7) - dhfuncy

# # # # # # # # # # # # # # os module --> ??

# # # # # # # # # # # # # # getnums(5) --> 75435

# # # # # # # # # # # # # import random 
# # # # # # # # # # # # # from functools import reduce

# # # # # # # # # # # # # # def getnums(n): # 5
# # # # # # # # # # # # # # 	res = "" 
# # # # # # # # # # # # # # 	for i in range(n): # 5 times
# # # # # # # # # # # # # # 		res = res + str(random.randint(0,9)) # 0 --> 9
# # # # # # # # # # # # # # 	print(int(res))
# # # # # # # # # # # # # # getnums(5)

# # # # # # # # # # # # # # def getchars(n):
# # # # # # # # # # # # # # 	res = ""
# # # # # # # # # # # # # 	# XX chars XX 
# # # # # # # # # # # # # 	# random int --> char 
# # # # # # # # # # # # # # 	for i in range(n):
# # # # # # # # # # # # # # 		res = res + chr(random.randint(97,122))
# # # # # # # # # # # # # # 	print(res)
# # # # # # # # # # # # # # getchars(6)

# # # # # # # # # # # # # # getpwd("khan")
# # # # # # # # # # # # # # getpwd("ravi")
# # # # # # # # # # # # # # getpwd("john")
# # # # # # # # # # # # # # getpwd("khan")

# # # # # # # # # # # # # # 3463JBry3452Gdyu
# # # # # # # # # # # # # # 4363UIRv3476Blbr
# # # # # # # # # # # # # # 6295urhM4593fuUb
# # # # # # # # # # # # # # user already exists 

# # # # # # # # # # # # # # d = {}
# # # # # # # # # # # # # # def checkUser(username):
# # # # # # # # # # # # # # 	names = list(d.keys())
# # # # # # # # # # # # # # 	if username not in names:
# # # # # # # # # # # # # # 		return 1 
# # # # # # # # # # # # # # 	else:
# # # # # # # # # # # # # # 		print("user already exists")

# # # # # # # # # # # # # # def getnums(n): # 5
# # # # # # # # # # # # # # 	res = "" 
# # # # # # # # # # # # # # 	for i in range(n): # 5 times
# # # # # # # # # # # # # # 		res = res + str(random.randint(0,9)) # 0 --> 9
# # # # # # # # # # # # # # 	return res

# # # # # # # # # # # # # # def getchars(n): # 5
# # # # # # # # # # # # # # 	res = ""
# # # # # # # # # # # # # # 	chars = [] # 10 
# # # # # # # # # # # # # # 	for i in range(n): # 5 
# # # # # # # # # # # # # # 		chars.append(chr(random.randint(97,122))) # 5
# # # # # # # # # # # # # # 		chars.append(chr(random.randint(65,92))) # 5
# # # # # # # # # # # # # # 	return res
# # # # # # # # # # # # # # def getchars(n): # 5

# # # # # # # # # # # # # # 	chars = [] # 10 

# # # # # # # # # # # # # # 	for i in range(n): # 5 
# # # # # # # # # # # # # # 		chars.append(chr(random.randint(97,122))) # 5
# # # # # # # # # # # # # # 		chars.append(chr(random.randint(65,90))) # 5

# # # # # # # # # # # # # # 	random.shuffle(chars)

# # # # # # # # # # # # # # 	chars = random.sample(chars,n)
	
# # # # # # # # # # # # # # 	res = reduce(lambda a,b:a+b , chars)
# # # # # # # # # # # # # # 	return res
# # # # # # # # # # # # # # def getpwd(username):
# # # # # # # # # # # # # # 	if checkUser(username) == 1:
# # # # # # # # # # # # # # 		password = getnums(4) + getchars(4) + getnums(4) + getchars(4)
# # # # # # # # # # # # # # 		d[username] = password
# # # # # # # # # # # # # # 		print(password)

# # # # # # # # # # # # # # getpwd("khan")
# # # # # # # # # # # # # # getpwd("ravi")
# # # # # # # # # # # # # # getpwd("john")
# # # # # # # # # # # # # # getpwd("khan")



# # # # # # # # # # # # # # def getchars(n): # 5

# # # # # # # # # # # # # # 	chars = [] # 10 

# # # # # # # # # # # # # # 	for i in range(n): # 5 
# # # # # # # # # # # # # # 		chars.append(chr(random.randint(97,122))) # 5
# # # # # # # # # # # # # # 		chars.append(chr(random.randint(65,90))) # 5

# # # # # # # # # # # # # # 	random.shuffle(chars)

# # # # # # # # # # # # # # 	chars = random.sample(chars,n)

# # # # # # # # # # # # # # 	res = reduce(lambda a,b:a+b , chars)
# # # # # # # # # # # # # # 	return res

# # # # # # # # # # # # # # print(getchars(3))

# # # # # # # # # # # # # import os 

# # # # # # # # # # # # # 	# - folders 
# # # # # # # # # # # # # 	# - system paths 

# # # # # # # # # # # # # # print(os.name) # os family posix / nt 
# # # # # # # # # # # # # # print(os.getcwd()) # current working directory 
# # # # # # # # # # # # # # os.chdir("/Users/digitallync/Downloads") # change of CWD
# # # # # # # # # # # # # # print(os.getcwd())
# # # # # # # # # # # # # # print(os.listdir("/Users/digitallync/Desktop/pys"))

# # # # # # # # # # # # # # for i in os.listdir("/Users/digitallync/Desktop/pys"):
# # # # # # # # # # # # # # 	print(i)

# # # # # # # # # # # # # # making of directories 
# # # # # # # # # # # # # # os.mkdir(<dirname>) # Create empty directory 
# # # # # # # # # # # # # # os.mkdir("demo")
# # # # # # # # # # # # # # os.makedirs("dir1/dir2/dir3")

# # # # # # # # # # # # # # removing of dirs 
# # # # # # # # # # # # # # os.rmdir(<dirname>)
# # # # # # # # # # # # # # os.rmdir("demo") # empty dir removal 
# # # # # # # # # # # # # # os.removedirs("dir1/dir2/dir3")

# # # # # # # # # # # # # # system paths
# # # # # # # # # # # # # # 	os.path.
	
# # # # # # # # # # # # # # os.path.split(<path>) --> path , endpoint --> file,folder
# # # # # # # # # # # # # # print(os.path.split("/Users/digitallync/Desktop/pys/weekend.py"))
# # # # # # # # # # # # # # print(os.path.split("/Users/digitallync/Desktop/pys"))

# # # # # # # # # # # # # # print(os.path.splitext("/Users/digitallync/Desktop/pys/weekend.py"))
# # # # # # # # # # # # # # print(os.path.splitext("/Users/digitallync/Desktop/pys"))

# # # # # # # # # # # # # # print(os.path.isdir("/Users/digitallync/Desktop/pys"))
# # # # # # # # # # # # # # print(os.path.isdir("/Users/digitallync/Desktop/py"))
# # # # # # # # # # # # # # print(os.path.isdir("/Users/digitallync/Desktop/weekend.py"))

# # # # # # # # # # # # # # print(os.path.isfile("/Users/digitallync/Desktop/pys"))
# # # # # # # # # # # # # # print(os.path.isfile("/Users/digitallync/Desktop/pys/weekend.py"))

# # # # # # # # # # # # # # os.walk(<path>) --> paths , dirs , files 

# # # # # # # # # # # # # # for paths,dirs,files in os.walk("/Users/digitallync/Desktop"):
# # # # # # # # # # # # # 	# print(paths)
# # # # # # # # # # # # # 	# print(dirs)
# # # # # # # # # # # # # 	# print(files)

# # # # # # # # # # # # # # password task --> ??

# # # # # # # # # # # # # # module 3 part 3 --> file handling --> 311019
# # # # # # # # # # # # # # task os --> 311019

# # # # # # # # # # # # # # task os --> ??

# # # # # # # # # # # # # # enter a path 
# # # # # # # # # # # # # # /Users/digitallync/Desktop

# # # # # # # # # # # # # # desktop --> 5 folders + 9 files 

# # # # # # # # # # # # # # 	demo 
# # # # # # # # # # # # # # 	pys 
# # # # # # # # # # # # # # 		weekend.py
# # # # # # # # # # # # # # 		pythoncode.py
# # # # # # # # # # # # # # 	pdfs 	
# # # # # # # # # # # # # # 		material.pdf 
# # # # # # # # # # # # # # 		tasks.pdf 
# # # # # # # # # # # # # # 	project 
# # # # # # # # # # # # # # 	videos 

# # # # # # # # # # # # # # folder -> xlsxs --> data.xlsx
# # # # # # # # # # # # # # folder -> txts --> demo.txt , notes.txt 
# # # # # # # # # # # # # # folder -> javas --> school.java , projectFile.java 

# # # # # # # # # # # # # # file handling 
# # # # # # # # # # # # # # -------------
# # # # # # # # # # # # # # 	- file --> store data XX dependencies re initialisation XX 
# # # # # # # # # # # # # # 	- XX variables , collections XX re initialisation
# # # # # # # # # # # # # # 	- variables , collections --> python --> mandatory
# # # # # # # # # # # # # # 	- demo.txt --> XX python XX
# # # # # # # # # # # # # # 10 
# # # # # # # # # # # # # # run 
# # # # # # # # # # # # # # l1 --> 0 1 2 3 4 ......10
# # # # # # # # # # # # # # run 
# # # # # # # # # # # # # # l1 --> 0 1 2 3 4 ......10

# # # # # # # # # # # # # # file 
# # # # # # # # # # # # # # 	- path / location
# # # # # # # # # # # # # # 	- filename 
# # # # # # # # # # # # # # 	- extension 

# # # # # # # # # # # # # # code <--> fileobject <--> file 

# # # # # # # # # # # # # # Create
# # # # # # # # # # # # # # open 
# # # # # # # # # # # # # # operate --> read / write 
# # # # # # # # # # # # # # save 
# # # # # # # # # # # # # # close 

# # # # # # # # # # # # # # python file handling

# # # # # # # # # # # # # # create+open / open
# # # # # # # # # # # # # # operate 
# # # # # # # # # # # # # # close  

# # # # # # # # # # # # # # open()
# # # # # # # # # # # # # # 	file exists --> open 
# # # # # # # # # # # # # # 	file not exists --> create + open
# # # # # # # # # # # # # # 	- inputs --> file , mode 
# # # # # # # # # # # # # # 	- output --> fileobject

# # # # # # # # # # # # # # 7 modes of operation
# # # # # # # # # # # # # # 	r --> read only
# # # # # # # # # # # # # # 	w --> write only	
# # # # # # # # # # # # # # 	a --> append 
# # # # # # # # # # # # # # 	rb --> read binary 
# # # # # # # # # # # # # # 	wb --> write binary
# # # # # # # # # # # # # 	# + --> update 

# # # # # # # # # # # # # # create + open
# # # # # # # # # # # # # # fo = open("/Users/digitallync/Desktop/demo.txt","w")

# # # # # # # # # # # # # # write data 
# # # # # # # # # # # # # # <fileobject>.write(<string>)
# # # # # # # # # # # # # # fo.write("python\n")
# # # # # # # # # # # # # # fo.write("mysql\n")
# # # # # # # # # # # # # # fo.write("java\n")
# # # # # # # # # # # # # # fo.write("oracle\n")
# # # # # # # # # # # # # # fo.write("php")
# # # # # # # # # # # # # # fo.write(str(10))

# # # # # # # # # # # # # # <fileobject>.writelines(<listname>)
# # # # # # # # # # # # # # listname --> strings
# # # # # # # # # # # # # # tech = ["python\n","hyd\n","mysql\n"]
# # # # # # # # # # # # # # fo.writelines(tech)

# # # # # # # # # # # # # # l1 = [str(i)+"\n" for i in range(1,11)]
# # # # # # # # # # # # # # print(l1)
# # # # # # # # # # # # # # fo.writelines(l1)

# # # # # # # # # # # # # # fo.close()


# # # # # # # # # # # # # # fo = open("/Users/digitallync/Desktop/demo.txt","a")

# # # # # # # # # # # # # # tech = ["python\n","hyd\n","mysql\n"]
# # # # # # # # # # # # # # fo.writelines(tech)

# # # # # # # # # # # # # # l1 = [str(i)+"\n" for i in range(1,11)]
# # # # # # # # # # # # # # fo.writelines(l1)

# # # # # # # # # # # # # # fo.close()


# # # # # # # # # # # # # # mode --> w --> clear file -> writing
# # # # # # # # # # # # # # mode --> a --> XX clear file XX -> continuously writing

# # # # # # # # # # # # # # syntax
# # # # # # # # # # # # # # ------

# # # # # # # # # # # # # # with open(<file> , <mode>) as <fileobject>:
# # # # # # # # # # # # # # 	<implementation>

# # # # # # # # # # # # # # with open("/Users/digitallync/Desktop/demo.txt","a") as fo:
# # # # # # # # # # # # # # 	tech = ["python\n","hyd\n","mysql\n"]
# # # # # # # # # # # # # # 	fo.writelines(tech)

# # # # # # # # # # # # # # types 			modules 
# # # # # # # # # # # # # # txt 				- 
# # # # # # # # # # # # # # html 				- 
# # # # # # # # # # # # # # pdf 				pypdf2 
# # # # # # # # # # # # # # xlsx 				xlsxwriter , pandas 
# # # # # # # # # # # # # # csv 				csv , pandas 
# # # # # # # # # # # # # # image				PIL 
# # # # # # # # # # # # # # json 				json 
# # # # # # # # # # # # # # .
# # # # # # # # # # # # # # .
# # # # # # # # # # # # # # .


# # # # # # # # # # # # # enter a name 
# # # # # # # # # # # # # khan 
# # # # # # # # # # # # # 3272JHBr3870tyit

# # # # # # # # # # # # # enter a name 
# # # # # # # # # # # # # john 
# # # # # # # # # # # # # 3475kbjc3248tHBR


# # # # # # # # # # # # # users.txt 

# # # # # # # # # # # # # khan	-		3272JHBr3870tyit
# # # # # # # # # # # # # john 	-		3475kbjc3248tHBR	


# # # # # # # # # # # # # username , password --> file
# # # # # # # # # # # # # os task 

# # # # # # # # # # # # # # read files

# # # # # # # # # # # # # # writing data 
# # # # # # # # # # # # # # 	write()
# # # # # # # # # # # # # # 	writelines() 

# # # # # # # # # # # # # # reading data 



# # # # # # # # # # # # fo = open("/Users/digitallync/Desktop/demo.txt","r")
# # # # # # # # # # # # # existing file 

# # # # # # # # # # # # # <fileobject>.read()
# # # # # # # # # # # # # 	- entire data 
# # # # # # # # # # # # # 	- from current cursor position
# # # # # # # # # # # # # 	- till end of file 
# # # # # # # # # # # # # 	- default current cursor position = start of file 
# # # # # # # # # # # # # data = fo.read()
# # # # # # # # # # # # # print(data)

# # # # # # # # # # # # # <fileobject>.read(<integer>)
# # # # # # # # # # # # # 	- integer no of chars 
# # # # # # # # # # # # # 	- from current cursor position
# # # # # # # # # # # # # 	- till end of file 

# # # # # # # # # # # # # 0 
# # # # # # # # # # # # # data = fo.read(5) # 5 
# # # # # # # # # # # # # print(data)

# # # # # # # # # # # # # # 5
# # # # # # # # # # # # # data = fo.read(5) # 10
# # # # # # # # # # # # # print(data)

# # # # # # # # # # # # #0
# # # # # # # # # # # # # fo.read(3) # 3
# # # # # # # # # # # # # fo.read(7) # 10
# # # # # # # # # # # # # fo.read(5) # 15 
# # # # # # # # # # # # # print(fo.read(2))

# # # # # # # # # # # # # <fileobject>.readline()
# # # # # # # # # # # # # 	- single line 
# # # # # # # # # # # # # 	- first line from current cursor position
# # # # # # # # # # # # # 	- default - 0 

# # # # # # # # # # # # # print(fo.readline())
# # # # # # # # # # # # # print(fo.readline())

# # # # # # # # # # # # # 0 
# # # # # # # # # # # # # print(fo.readline(3)) # 3 
# # # # # # # # # # # # # print(fo.readline()) # 4 --> end of line

# # # # # # # # # # # # # <fileobject>.readlines()
# # # # # # # # # # # # # 	- list of lines 
# # # # # # # # # # # # # 	- special chars

# # # # # # # # # # # # # print(fo.readlines())
# # # # # # # # # # # # # data = fo.readlines()
# # # # # # # # # # # # # print(data[3])
# # # # # # # # # # # # # print(data)

# # # # # # # # # # # # # print(fo.readlines(15))

# # # # # # # # # # # # # <fileobject>.tell() --> current cursor position
# # # # # # # # # # # # # print(fo.tell()) # 0
# # # # # # # # # # # # # fo.read(5)
# # # # # # # # # # # # # print(fo.tell()) # 5 
# # # # # # # # # # # # # fo.read(10) # 15 
# # # # # # # # # # # # # fo.read(5) # 20
# # # # # # # # # # # # # print(fo.tell()) # 20

# # # # # # # # # # # # fo.read() # start --> end 
# # # # # # # # # # # # print(fo.tell()) # no of chars

# # # # # # # # # # # # fo.close()

# # # # # # # # # # # # # ['python\n', 'hyd\n', 'mysql\n', 'java\n', 'php\n']
# # # # # # # # # # # # # [7,11,17,22,26]

# # # # # # # # # # # # # 1-7 --> python 
# # # # # # # # # # # # # 8-12 --> python hyd 
# # # # # # # # # # # # # 13-17 ---> python , hyd , mysql
# # # # # # # # # # # # # 18-22 --> python , hyd , mysql java 
# # # # # # # # # # # # # 23 - 26 --> python , hyd , mysql java ,php

# # # # # # # # # # # # # read() readline() readlines()

# # # # # # # # # # # # seek() --> ??



# # # # # # # # # # # # enter a name 
# # # # # # # # # # # # khan 
# # # # # # # # # # # # 3272JHBr3870tyit

# # # # # # # # # # # # enter a name 
# # # # # # # # # # # # john 
# # # # # # # # # # # # 3475kbjc3248tHBR

# # # # # # # # # # # # enter a name 
# # # # # # # # # # # # khan
# # # # # # # # # # # # User already exists 

# # # # # # # # # # # # users.txt 

# # # # # # # # # # # # khan	-		3272JHBr3870tyit
# # # # # # # # # # # # john 	-		3475kbjc3248tHBR	

# # # # # # # # # # # # ask user --> name 
# # # # # # # # # # # # read file --> check name
# # # # # # # # # # # # 	- 0 -> gen password -> write on file 
# # # # # # # # # # # # 	- 1 -> user already exists

# # # # # # # # # # # # module 4 --> classes OOPY 

# # # # # # # # # # # # classes , objects --> XXX --> run --> code 
# # # # # # # # # # # # python --> mandatory XX -->  class explicitly 
# # # # # # # # # # # # python -->  class auto 

# # # # # # # # # # # # java , c++ --> start --> class --> mandatory 
# # # # # # # # # # # # class --> python --> optional
# # # # # # # # # # # # 	-> reusability
# # # # # # # # # # # # 	-> modularisation

# # # # # # # # # # # # class --> collection of variables and functions
# # # # # # # # # # # # 	   variables --> class variables
# # # # # # # # # # # # 	   functions --> methods 

# # # # # # # # # # # # class --> collection of class variables and methods 
# # # # # # # # # # # # 	-> attributes --> class members 
# # # # # # # # # # # # 	-> blueprint --> template 

# # # # # # # # # # # # object --> representation of class 
# # # # # # # # # # # # 		-> instance of class 


# # # # # # # # # # # # class1 --> obj1 , obj2 , obj3 , obj4 
# # # # # # # # # # # # class2 --> o1,o2,o3,o4

# # # # # # # # # # # # single class --> multiple objects

# # # # # # # # # # # # XXX obj1 --> class1 ,class2 XXX 

# # # # # # # # # # # # XX single object --> multiple classes XX

# # # # # # # # # # # # syntax
# # # # # # # # # # # # ------

# # # # # # # # # # # # class <classname>:
# # # # # # # # # # # # 	<attributes> --> variables methods
	
# # # # # # # # # # # # class <classname>:
# # # # # # # # # # # # 	pass

# # # # # # # # # # # # class organisation:
# # # # # # # # # # # # 	# class variables
# # # # # # # # # # # # 	org_name = "Lync"
# # # # # # # # # # # # 	org_location = "hyd"
# # # # # # # # # # # # 	org_strength = 10 
# # # # # # # # # # # # 	# print(org_name)

# # # # # # # # # # # # # reference --> use class attributes --> out of class 
# # # # # # # # # # # # # 	- class reference --> classname.
# # # # # # # # # # # # # 	- object reference --> objectname.
# # # # # # # # # # # # # <objectname> = <classname>()

# # # # # # # # # # # # o1 = organisation()
# # # # # # # # # # # # o2 = organisation()
# # # # # # # # # # # # o3 = organisation()

# # # # # # # # # # # # print(organisation.org_name) # class reference
# # # # # # # # # # # # print(o1.org_name) # object reference
# # # # # # # # # # # # print(o3.org_name) # object reference

# # # # # # # # # # # # class variable --> object , class reference


# # # # # # # # # # # # class organisation:
# # # # # # # # # # # # 	org_name = "Lync"
# # # # # # # # # # # # 	org_location = "hyd"
# # # # # # # # # # # # 	org_strength = 10 

# # # # # # # # # # # # o1 = organisation()
# # # # # # # # # # # # o2 = organisation()
# # # # # # # # # # # # o3 = organisation()

# # # # # # # # # # # # print(organisation.org_name) # class reference
# # # # # # # # # # # # print(o1.org_name) # object reference
# # # # # # # # # # # # print(o2.org_name)
# # # # # # # # # # # # print(o3.org_name)

# # # # # # # # # # # # organisation.org_name = "DL" # class reference

# # # # # # # # # # # # print(organisation.org_name) # class reference
# # # # # # # # # # # # print(o1.org_name) # object reference
# # # # # # # # # # # # print(o2.org_name)
# # # # # # # # # # # # print(o3.org_name)

# # # # # # # # # # # # o2.org_name = "DL" # object reference

# # # # # # # # # # # # print(organisation.org_name) # class reference
# # # # # # # # # # # # print(o1.org_name) # object reference
# # # # # # # # # # # # print(o2.org_name)
# # # # # # # # # # # # print(o3.org_name)

# # # # # # # # # # # # # modify --> class variable --> class reference --> global
# # # # # # # # # # # # # modify --> class variable --> object reference --> local 

# # # # # # # # # # # # organisation.org_name = "digitallync" # class reference

# # # # # # # # # # # # print(organisation.org_name) # class reference
# # # # # # # # # # # # print(o1.org_name) # object reference
# # # # # # # # # # # # print(o2.org_name)
# # # # # # # # # # # # print(o3.org_name)

# # # # # # # # # # # # modify --> object reference --> final 


# # # # # # # # # # # # class organisation: # 4 attributes --> 3 v + 1 f  
# # # # # # # # # # # # 	org_name = "Lync"
# # # # # # # # # # # # 	org_location = "hyd"
# # # # # # # # # # # # 	org_strength = 10 

# # # # # # # # # # # # 	def addnums(self,a,b): # function
# # # # # # # # # # # # 		print(self)
# # # # # # # # # # # # 		res = a+b 
# # # # # # # # # # # # 		print(res)

# # # # # # # # # # # # o1 = organisation()
# # # # # # # # # # # # o2 = organisation()
# # # # # # # # # # # # o3 = organisation()

# # # # # # # # # # # # print(organisation) # classname main method
# # # # # # # # # # # # print(type(organisation)) # type classname 

# # # # # # # # # # # # o1.addnums(100,200) # object reference
# # # # # # # # # # # # o3.addnums(30,20)

# # # # # # # # # # # # organisation.addnums(10,20) # class reference

# # # # # # # # # # # # self -> stores object reference ONLY  
# # # # # # # # # # # # self --> XXX 
# # # # # # # # # # # # abc

# # # # # # # # # # # # methods --> call object reference
# # # # # # # # # # # # 		--> 	XX class reference XX 
# # # # # # # # # # # # variables --> object  reference
# # # # # # # # # # # # 			--> class reference

# # # # # # # # # # # # types of methods 
# # # # # # # # # # # # 	- instance methods 
# # # # # # # # # # # # 	- class methods 
# # # # # # # # # # # # 	- static methods 


# # # # # # # # # # # # a =10 --> int 
# # # # # # # # # # # # tech = "PytHOn" --> str 
# # # # # # # # # # # # class --> type 

# # # # # # # # # # # # constructors , types of methods 

# # # # # # # # # # # # class organisation: # 4 attributes --> 3 v + 1 f  
# # # # # # # # # # # # 	org_name = "Lync"
# # # # # # # # # # # # 	org_location = "hyd"
# # # # # # # # # # # # 	org_strength = 10 

# # # # # # # # # # # # 	def hire(self , name , role , salary):
# # # # # # # # # # # # 		print("name of employee is "+ name)
# # # # # # # # # # # # 		print("role of employee is "+ role)
# # # # # # # # # # # # 		print("salary of employee is "+ str(salary))
# # # # # # # # # # # # 		organisation.org_strength = organisation.org_strength + 1

# # # # # # # # # # # # o1 = organisation()
# # # # # # # # # # # # o2 = organisation()
# # # # # # # # # # # # o3 = organisation()

# # # # # # # # # # # # print(organisation.org_strength)

# # # # # # # # # # # # o1.hire("khan","pd",1) # emp 1 
# # # # # # # # # # # # o2.hire("john","d",2) # emp 2 

# # # # # # # # # # # # print(organisation.org_strength)

# # # # # # # # # # # # org_strength --> 13 
# # # # # # # # # # # # 10 + o1 o2 o3 --> 13 
# # # # # # # # # # # # 10 + o1.hire o2.hire --> 12 

# # # # # # # # # # # # o1 -> khan
# # # # # # # # # # # # o2 -> john 
# # # # # # # # # # # # o3 -> ?? --> hire() --> XX 

# # # # # # # # # # # # hire --> XX mandatory XX 

# # # # # # # # # # # # method --> mandatory --> constructor
# # # # # # # # # # # # hire --> XX mandatory XX 

# # # # # # # # # # # # constructor 
# # # # # # # # # # # # 	- mandatory called 
# # # # # # # # # # # # 	- object creation 
# # # # # # # # # # # # 	- __init__(self)
# # # # # # # # # # # # 	- implicitly called 



# # # # # # # # # # # # class organisation: # 4 attributes --> 3 v + 1 f  
# # # # # # # # # # # # 	org_name = "Lync"
# # # # # # # # # # # # 	org_location = "hyd"
# # # # # # # # # # # # 	org_strength = 10 

# # # # # # # # # # # # 	# constructor
# # # # # # # # # # # # 	def __init__(self, name , role , salary):
# # # # # # # # # # # # 		self.name = name 
# # # # # # # # # # # # 		self.role = role 
# # # # # # # # # # # # 		self.salary = salary
# # # # # # # # # # # # 		organisation.org_strength = organisation.org_strength + 1

# # # # # # # # # # # # 	def printer(self):
# # # # # # # # # # # # 		print("name of employee is "+ self.name)
# # # # # # # # # # # # 		print("role of employee is "+ self.role)
# # # # # # # # # # # # 		print("salary of employee is "+ str(self.salary))

# # # # # # # # # # # # # print(organisation.org_strength) # 10 
# # # # # # # # # # # # o1 = organisation("khan","pd",1)
# # # # # # # # # # # # o2 = organisation("john","d",2)
# # # # # # # # # # # # o3 = organisation("jane","d",3)
# # # # # # # # # # # # o4 = organisation("harry","d",4)
# # # # # # # # # # # # print(organisation.org_strength)

# # # # # # # # # # # # o2.printer() # john , d , 2
# # # # # # # # # # # # o4.printer() 

# # # # # # # # # # # # class --> company 
# # # # # # # # # # # # object --> employee 

# # # # # # # # # # # # types of methods 
# # # # # # # # # # # # 	- instance methods 
# # # # # # # # # # # # 	- class methods 
# # # # # # # # # # # # 	- static methods 

# # # # # # # # # # # # instance methods 
# # # # # # # # # # # # 	- self --> parameter
# # # # # # # # # # # # 	- self --> store --> object reference
# # # # # # # # # # # # 	- effect objects only 
# # # # # # # # # # # # 	- call instance methods --> object reference
# # # # # # # # # # # # 	- call instance methods --> XX class reference XX
# # # # # # # # # # # # 	- hike() promote() fire() 

# # # # # # # # # # # # class methods 
# # # # # # # # # # # # 	- cls --> parameter
# # # # # # # # # # # # 	- cls --> store --> class reference
# # # # # # # # # # # # 	- effect class and objects (company and employee)
# # # # # # # # # # # # 	- call instance methods --> object reference
# # # # # # # # # # # # 	- call instance methods --> class reference 
# # # # # # # # # # # # 	- special --> decorator 
# # # # # # # # # # # # 	- @classmethod 
# # # # # # # # # # # # 	- changeCname() , changeCaddress() , annualHike()

# # # # # # # # # # # # static methods 
# # # # # # # # # # # # 	- XX parameter XX --> XX self XX cls XX 
# # # # # # # # # # # # 	- no reference --> stored 
# # # # # # # # # # # # 	- XX effect XX class XX object XX 
# # # # # # # # # # # # 	- logics on data (static , constant)
# # # # # # # # # # # # 	- calls --> object reference 
# # # # # # # # # # # # 	- special --> decorator
# # # # # # # # # # # # 	- @staticmethod
# # # # # # # # # # # # 	- datetoday(5-11-19) , calc(12893982,3.6)


# # # # # # # # # # # # class organisation: # 4 attributes --> 3 v + 1 f  
# # # # # # # # # # # # 	org_name = "Lync"
# # # # # # # # # # # # 	org_location = "hyd"
# # # # # # # # # # # # 	org_strength = 10 

# # # # # # # # # # # # 	def __init__(self, name , role , salary):
# # # # # # # # # # # # 		self.name = name 
# # # # # # # # # # # # 		self.role = role 
# # # # # # # # # # # # 		self.salary = salary
# # # # # # # # # # # # 		organisation.org_strength = organisation.org_strength + 1

# # # # # # # # # # # # 	@classmethod
# # # # # # # # # # # # 	def changeCname(cls,newname):
# # # # # # # # # # # # 		organisation.org_name = newname
# # # # # # # # # # # # 		print("company name has changed")

# # # # # # # # # # # # 	@staticmethod
# # # # # # # # # # # # 	def calc(num,perc):
# # # # # # # # # # # # 		res = num + (num*perc)
# # # # # # # # # # # # 		print(res)

# # # # # # # # # # # # o1 = organisation("khan","pd",1)
# # # # # # # # # # # # o2 = organisation("john","d",2)

# # # # # # # # # # # # print(organisation.org_name)
# # # # # # # # # # # # organisation.changeCname("DL") # class method
# # # # # # # # # # # # print(organisation.org_name) # class 
# # # # # # # # # # # # print(o2.org_name) # object1 
# # # # # # # # # # # # print(o1.org_name) # object2 
# # # # # # # # # # # # o2.calc(1200,0.2) # constant / static 

# # # # # # # # # # # # effect object --> instance methods
# # # # # # # # # # # # effect class --> class methods 
# # # # # # # # # # # # XX effect XX --> static methods 


# # # # # # # # # # # car --> class 
# # # # # # # # # # # 	name , model , speed
# # # # # # # # # # # 	start() acc() brake() stop() printer() 

# # # # # # # # # # # c1 = car("verna" , 2019)
# # # # # # # # # # # c1.start(30)
# # # # # # # # # # # c1.printer() # verna 2019 30 
# # # # # # # # # # # c1.acc(40)
# # # # # # # # # # # c1.acc(30)
# # # # # # # # # # # c2 = car("abc" , 2018)
# # # # # # # # # # # c1.brake(20)
# # # # # # # # # # # c1.acc(30)
# # # # # # # # # # # c1.printer() # verna 2019 110 
# # # # # # # # # # # c1.acc(10)
# # # # # # # # # # # c2.start(30)
# # # # # # # # # # # c2.acc(40)
# # # # # # # # # # # c1.brake(60)
# # # # # # # # # # # c1.printer() # verna 2019 60 
# # # # # # # # # # # c1.stop()
# # # # # # # # # # # c2.brake(20)
# # # # # # # # # # # c1.printer() # verna 2019 0 
# # # # # # # # # # # c2.printer() # abc 2018 50 

# # # # # # # # # # # # oops -> 061119

# # # # # # # # # # class car :
# # # # # # # # # # 	speed = 0 

# # # # # # # # # # 	def __init__(self,name,model):
# # # # # # # # # # 		self.name = name 
# # # # # # # # # # 		self.model = model 
# # # # # # # # # # 	def start(self,sspeed):
# # # # # # # # # # 		self.speed = sspeed
# # # # # # # # # # 	def acc(self,aspeed):
# # # # # # # # # # 		self.speed = self.speed + aspeed
# # # # # # # # # # 	def brake(self,bspeed):
# # # # # # # # # # 		self.speed = self.speed - bspeed
# # # # # # # # # # 	def stop(self):
# # # # # # # # # # 		self.speed = 0
# # # # # # # # # # 	def printer(self):
# # # # # # # # # # 		print("name of the car is "+self.name)
# # # # # # # # # # 		print("model of the car is "+str(self.model))
# # # # # # # # # # 		print("speed of the car is "+str(self.speed))

# # # # # # # # # # c1 = car("verna" , 2019)
# # # # # # # # # # c1.start(30)
# # # # # # # # # # # c1.printer() # verna 2019 30 
# # # # # # # # # # c1.acc(40)
# # # # # # # # # # c1.acc(30)
# # # # # # # # # # c2 = car("abc" , 2018)
# # # # # # # # # # c1.brake(20)
# # # # # # # # # # c1.acc(30)
# # # # # # # # # # # c1.printer() # verna 2019 110 
# # # # # # # # # # c1.acc(10)
# # # # # # # # # # c2.start(30)
# # # # # # # # # # c2.acc(40)
# # # # # # # # # # c1.brake(60)
# # # # # # # # # # # c1.printer() # verna 2019 60 
# # # # # # # # # # c1.stop()
# # # # # # # # # # c2.brake(20)
# # # # # # # # # # c1.printer() # verna 2019 0 
# # # # # # # # # # c2.printer() # abc 2018 50 

# # # # # # # # # # # c1 --> verna --> 2019 --> 50 110 60 0 
# # # # # # # # # # # c2 --> city --> 2018 --> 0 50 

# # # # # # # # # # oops 
# # # # # # # # # # 	--> object oriented 
# # # # # # # # # # java    
# # # # # # # # # # 	class 
# # # # # # # # # # 	object 
# # # # # # # # # # 	inheritance 
# # # # # # # # # # 	polymorphism 
# # # # # # # # # # 	abstraction 
# # # # # # # # # # 	encapsulation 

# # # # # # # # # # python 
# # # # # # # # # # 	inheritance 
# # # # # # # # # # 	polymorphism 
# # # # # # # # # # 	abstraction 
# # # # # # # # # # 	encapsulation 

# # # # # # # # # # oops -> XX mandatory XX 
# # # # # # # # # # oops --> reusability of code 

# # # # # # # # # # inheritance 
# # # # # # # # # # 	- atleast 2 classes 
# # # # # # # # # # 	- components class1 --> class2 

# # # # # # # # # # 	parent --> child
# # # # # # # # # # 	super --> sub 

# # # # # # # # # # 	4 types 
# # # # # # # # # # 		- single / simple inheritance
# # # # # # # # # # 		- multiple inheritance 
# # # # # # # # # # 		- multi level inheritance 
# # # # # # # # # # 		- hybrid inheritance

# # # # # # # # # # single inheritance --> "is a" relation
# # # # # # # # # # 	- exactly 2 classes
# # # # # # # # # # 	parent class --> child class 

# # # # # # # # # # 	bankacc --> 4 

# # # # # # # # # # 	savingsacc --> 3 <-- bankacc
# # # # # # # # # # 	corporateacc --> 5 <-- bankacc
# # # # # # # # # # 	jointacc --> 2 <-- bankacc

# # # # # # # # # # 	ba -> 4 
# # # # # # # # # # 	sa -> 7 
# # # # # # # # # # 	ca -> 9 
# # # # # # # # # # 	ja -> 6

# # # # # # # # # # syntax
# # # # # # # # # # ------

# # # # # # # # # # class <parent>():
# # # # # # # # # # 	____
# # # # # # # # # # 	____
# # # # # # # # # # 	____


# # # # # # # # # # class <child>(<parent>):
# # # # # # # # # # 	____

# # # # # # # # # # p = parent() --> 3
# # # # # # # # # # c = child() --> 4 

# # # # # # # # # # multiple inheritance 
# # # # # # # # # # 	- atleast 3 classes 
# # # # # # # # # # 	- one child , remaining parent 
# # # # # # # # # # 	- 4 classes --> 3 P + 1 C 
# # # # # # # # # # 	- 8 classes --> 7 P + 1 C 

# # # # # # # # # # java --> XX multiple inheritance XX -> classes 
# # # # # # # # # # java -->  multiple inheritance  -> interfaces 
# # # # # # # # # # cpp -->  multiple inheritance  -> classes 
# # # # # # # # # # python -->  multiple inheritance  -> classes 
	
# # # # # # # # # # 	techEmp --> 4 
# # # # # # # # # # 	mangEmp --> 3

# # # # # # # # # # 	developer --> 5 <-- techEmp ==> 9 
# # # # # # # # # # 	HR --> 2 <-- mangEmp ==> 5 

# # # # # # # # # # 	techmanager --> 6 <-- techEmp , mangEmp ==> 13 

# # # # # # # # # # syntax 
# # # # # # # # # # ------

# # # # # # # # # # class parent1():
# # # # # # # # # # 	pass 

# # # # # # # # # # class parent2():
# # # # # # # # # # 	pass 

# # # # # # # # # # class child(parent1,parent2):
# # # # # # # # # # 	pass 

# # # # # # # # # # multi level inheritance 
# # # # # # # # # # 	- hierarchial inheritance
# # # # # # # # # # 	- atleast 3 classes
# # # # # # # # # # 	- end classes --> pure parent ,pure child 
# # # # # # # # # # 	- intermediate classes --> both parent + child

# # # # # # # # # # parent1 -> parent2 -> parent3 -> parent4 -> child
# # # # # # # # # # dev 3 --> lead 4 --> manager 2 --> ceo 6 

# # # # # # # # # # d1 --> 3 
# # # # # # # # # # l1 --> 7
# # # # # # # # # # m1 --> 9
# # # # # # # # # # c1 --> 15 

# # # # # # # # # # syntax
# # # # # # # # # # ------

# # # # # # # # # # class parent1():
# # # # # # # # # # 	pass
# # # # # # # # # # class parent2(parent1):
# # # # # # # # # # 	pass
# # # # # # # # # # class parent3(parent2):
# # # # # # # # # # 	pass
# # # # # # # # # # class parent4(parent3):
# # # # # # # # # # 	pass
# # # # # # # # # # class child(parent4):
# # # # # # # # # # 	pass 


# # # # # # # # # # class techEmp():
# # # # # # # # # # 	# attributes --> variables , methods
# # # # # # # # # # 	role = "technical"
# # # # # # # # # # 	technology = "PytHOn"

# # # # # # # # # # class developer(techEmp):
# # # # # # # # # # 	grade = "c"
# # # # # # # # # # 	payscale = "L3"
# # # # # # # # # # 	promotion = "5"

# # # # # # # # # # d1 = developer()
# # # # # # # # # # print(d1.grade)
# # # # # # # # # # print(d1.payscale)
# # # # # # # # # # print(d1.promotion)
# # # # # # # # # # print(d1.role)
# # # # # # # # # # print(d1.technology)

# # # # # # # # # object --> classname -> default super class --> all classes 
# # # # # # # # # hybrid --> ???

# # # # # # # # # polymorphism 
# # # # # # # # # 	- methods --> various implementation

# # # # # # # # # 	- compile time polymorphism
# # # # # # # # # 	- run time polymorphism

# # # # # # # # # 	- static polymorphism
# # # # # # # # # 	- dynamic polymorphism

# # # # # # # # # 	- method overloading 
# # # # # # # # # 	- method overriding 

# # # # # # # # # method overloading
# # # # # # # # # method overriding

# # # # # # # # # method overloading
# # # # # # # # # 	- method/function --> multiple parameters --> multiple calls 
# # # # # # # # # 	- XX oops XX 
# # # # # # # # # 	- overloading --> XX classes XX --> *args , **kwargs
# # # # # # # # # 	- overloading --> classes , objects --> XX mandatory XX 

# # # # # # # # # def avg(*args):
# # # # # # # # # 	print(args)
# # # # # # # # # avg()  # call1 --> 0 
# # # # # # # # # avg(10) # call2 --> 1 
# # # # # # # # # avg(234,24,3,5,6,23,76,8,76) # call3 --> 8 

# # # # # # # # # method overriding
# # # # # # # # # 	- change implementation 
# # # # # # # # # 	- functionname --> multiple implementations
# # # # # # # # # 	- latest function implementation
# # # # # # # # # 	- magic methods 
# # # # # # # # # 	- operator overloading

# # # # # # # # # def hello() :
# # # # # # # # # 	a

# # # # # # # # # def hello() :
# # # # # # # # # 	b

# # # # # # # # # def hello() :
# # # # # # # # # 	c

# # # # # # # # # def hello() :
# # # # # # # # # 	d

# # # # # # # # # hello() ---> d


# # # # # # # # # magic methods --> __(   )__ 
# # # # # # # # # 			__init__()

# # # # # # # # class company:
# # # # # # # # 	cname = "lync"

# # # # # # # # 	def __init__(self,name,role,salary):
# # # # # # # # 		self.name = name
# # # # # # # # 		self.role = role 
# # # # # # # # 		self.salary = salary

# # # # # # # # 	def __str__(self):
# # # # # # # # 		return self.name

# # # # # # # # 	def __repr__(self):
# # # # # # # # 		return self.role

# # # # # # # # emp1 = company("khan","pd",1)
# # # # # # # # emp2 = company("john","d",3)
# # # # # # # # emp3 = company("jane","p",5)

# # # # # # # # print(emp3) # location / khan pd 1 

# # # # # # # # # __str__ --> location emp1 --> print
# # # # # # # # # 		-> fetch location of object 
# # # # # # # # # 		-> pass location to print

# # # # # # # # # details of employee --> modify /override --> __str__

# # # # # # # # __str__ 
# # # # # # # # 	-> instance method
# # # # # # # # 	-> self 
# # # # # # # # 	-> mandatory return 
# # # # # # # # 	-> only return string 
# # # # # # # # 	-> return XX int XX
# # # # # # # # -> high priority

# # # # # # # # __repr__ 
# # # # # # # # - not high priority
# # # # # # # # 	-> instance method
# # # # # # # # 	-> self 
# # # # # # # # 	-> mandatory return 
# # # # # # # # 	-> only return string 
# # # # # # # # 	-> return XX int XX

# # # # # # # # str , repr --> str 
# # # # # # # # str --> str 
# # # # # # # # repr --> repr 

# # # # # # # # str --> type cast --> int float 
# # # # # # # # repr --> type cast --> int str float 

# # # # # # # # operator overloading


# # # # # # # # a = int(10) 
# # # # # # # # b = int(20)
# # # # # # # # print(a+b) # + --> __add__(10,20)

# # # # # # # # a,b --> objects 
# # # # # # # # int --> class 
# # # # # # # # 10 , 20 --> parameters of __init__
# # # # # # # # a+b --> __add__(a,b)

# # # # # # # # a = num(100)
# # # # # # # # b = num(30)
# # # # # # # # print(a+b) # 70 

# # # # # # # # # __add__ --> sum --> diff 

# # # # # # # # class num:
# # # # # # # # 	def __init__(self,n):
# # # # # # # # 		self.n = n 
# # # # # # # # 	def __add__(first,second):
# # # # # # # # 		res = first.n - second.n 
# # # # # # # # 		return res
# # # # # # # # a = num(100)
# # # # # # # # b = num(30)
# # # # # # # # print(a+b) # 70 

# # # # # # # # print(dir(int)) # list of magic methods of operators

# # # # # # # # java --> tostring() --> location --> return 

# # # # # # # abstraction

# # # # # # # # java
# # # # # # # # 	abstract --> incomplete 
# # # # # # # # 		classes , methods 
# # # # # # # # 	access specifiers / access modifiers 

# # # # # # # python
# # # # # # # 	hiding , showing the data 
# # # # # # # 	syntax 
# # # # # # # 	XX access specifiers / access modifiers  XX 
# # # # # # # 	components 
# # # # # # # 		public 
# # # # # # # 		private 
# # # # # # # 		protected 

# # # # # # # public 
# # # # # # # 	- default components
# # # # # # # 	- accessed in class 
# # # # # # # 	- accessed out class 
# # # # # # # 	- reference --> class , object
# # # # # # # 	- a = 10 , cname = "lync"

# # # # # # # protected
# # # # # # # 	-> syntax --> start _ 
# # # # # # # 	-> accessed in class 
# # # # # # # 	-> accessed out class (not recommended)
# # # # # # # 	-> reference --> class , object 
# # # # # # # 	-> _user = "khan" _mobile = "987654310"

# # # # # # # private 
# # # # # # # 	-> syntax --> start __ 
# # # # # # # 	-> accessed in class 
# # # # # # # 	-> XX accessed out class XX 
# # # # # # # 	-> outside -> dual reference --> both class and object 
# # # # # # # 	-> __pwd = "hsgdy" __salary ="26537"

# # # # # # class variables:
# # # # # # 	a = 10  # public
# # # # # # 	_b = 20 # protected
# # # # # # 	__c = 30 # private

# # # # # # 	# print(a)
# # # # # # 	# print(_b)
# # # # # # 	# print(__c)

# # # # # # v = variables()
# # # # # # # print(v.a) # public --> object
# # # # # # # print(v._b) # protected --> object
# # # # # # # print(v.__c) # private --> object XXX

# # # # # # # <objectname>._<classname>__<variablename>
# # # # # # # print(v._variables__c) # private --> 2 references

# # # # # # PytHOn --> XX pure oops XX partial oops 

# # # # # # overloading --> XX oops XX 
# # # # # # abstraction --> XX absolute XX 
# # # # # # in complete classes , methods --> abstract 
# # # # # # XX oops XX --> pass 

# # # # # # abstraction(pass) ,overloading(*args,**kwargs) --> XX classes objects XX


# # # # # # class car --> class vehicle 


# # # # # # vehicle->parent __init__(name,model,wheels),acc,brake,start,stop,printer
# # # # # # 	car --> child1 --> reverse() <-- vehicle
# # # # # # 	bike --> child2 --> XX <-- vehicle

# # # # # # v1 --> 6 
# # # # # # c1 --> 7 --> 4 
# # # # # # b1 --> 6 --> 2 

# # # # # # explore --> abstraction --> methods --> ???
# # # # # # __init__ __str__ --> magic 
# # # # # # __init --> private

# # # # # # exception handling --> 081119
# # # # # # git --> 2 
# # # # # # databases --> 4 

# # # # # # encapsulation
# # # # # # 	- binding of data / properties 
# # # # # # 	- into single component
# # # # # # 	- data --> values --> variables
# # # # # # 	- properties --> methods 
# # # # # # 	- implicit --> auto 
# # # # # # 	- create class 

# # # # # # binding of data --> object 
# # # # # # binding of properties --> class 

# # # # # # company --> class 
# # # # # # 	__init__ , hike , fire , promote --> properties 
# # # # # # emp1 --> object
# # # # # # 	khan , pd , 10 , "reason" , "__" --> data 

# # # # # exception handling
# # # # # 	exception --> conflict execution
# # # # # 	error
# # # # # 		- compile time errors --> XX fix XX 
# # # # # 		- run time errors --> fix 
# # # # # 	run time errors -> exceptions 
# # # # # 	exceptions 
# # # # # 		- handled  --> run time 
# # # # # 		- un handled --> compile time 

# # # # # handled --> TypeError , NameError 
# # # # # un handled --> SyntaxError  , IndentationError 

# # # # # Error --> parentclass 
# # # # # 	Errors <--- child1 
# # # # # 	Exceptions <--- child2

# # # # # Exception --> parentclass
# # # # # 	TypeError <-- child1
# # # # # 	NameError <-- child2
# # # # # 	SyntaxError <-- child3
# # # # # 	IndentationError <-- child4

# # # # # fixing --> handling

# # # # # try except 
# # # # # try except except except except 
# # # # # try except finally 

# # # # # try except

# # # # # def mulnums(n1,n2):
# # # # # 	res = n1 * n2 
# # # # # 	print(res)
# # # # # # mulnums(10,20)
# # # # # # mulnums("abc",10)
# # # # # mulnums("abc" ,"def") # error

# # # # # try --> code with errors 
# # # # # except --> errorname , dialouge

# # # # # try:
# # # # # 	def mulnums(n1,n2):
# # # # # 		res = n1 * n2 
# # # # # 		print(res)
# # # # # 		print(ans)

# # # # # 	mulnums(10,20)
# # # # # 	# mulnums("abc",10)
# # # # # 	# mulnums("abc" ,"def") # error

# # # # # except TypeError:
# # # # # 	print("enter numbers only")
# # # # # except NameError:
# # # # # 	print("undefined variable")

# # # # # try:
# # # # # 	def divnums(n1,n2):
# # # # # 		res = n1 / n2 
# # # # # 		print(res)
# # # # 	# divnums(100,10)
# # # # 	# divnums(200,5)
# # # # 	# divnums("abc",3) # TypeError 
# # # # 	# divnums(100,0) # ZeroDivisionError

# # # # # except TypeError:
# # # # # 	print("enter numbers only")
# # # # # except Exception as e :
# # # # # 	print(e)

# # # # # finally --> mandatory execution block 
# # # # # 		-> error execute 
# # # # # 		-> no errors execute

# # # # 100 lines  --> no error 
# # # # 	30 --> file open 
# # # # 	.
# # # # 	.
# # # # 	.
# # # # 	.
# # # # 	80 --> closed file 
# # # # 	.
# # # # 	.
# # # # 	100 
# # # # execution --> 0 - 100 

# # # # 100 lines  --> no error 
# # # # try:
# # # # 	30 --> file open 
# # # # 	.
# # # # 	.
# # # # 	50 --> error
# # # # 	.
# # # # 	.
# # # # 	.
# # # # 	100 
# # # # except:
# # # # 	____ 
# # # # finally:
# # # # 	close 


# # # try:
# # # 	def mulnums(n1,n2):
# # # 		res = n1 * n2 
# # # 		print(res)

# # # 	# mulnums("abc" ,"def") # error
# # # 	mulnums(100,2)
# # # except TypeError:
# # # 	print("enter numbers only")
# # # 	n2 = "" # try 
# # # finally:
# # # 	print("close")

# # # finally --> closures --> file port socket database

# # # if else --> close 
# # # try except --> continue

# # # __init__ --> constructor --> create object --> auto 
# # # __del__ --> destructor --> delete instance --> explicitly

# # # databases 
# # # 	database --> store and manipulate data 
# # # 	variables , collections , file --> only store data 

# # # file data --> python --> add --> file data 
# # # 10 , 20 -> read -> 30 -> write 

# # # database --> local , remote 

# # # types of data 
# # # 	- structured data  --> excel 
# # # 	- semi structured data --> book
# # # 		book --> para --> lines 
# # # 	- un structured data 
# # # 		txt , image 

# # # structured , semi structured --> real time
	
# # # types of databases 
# # # 	-> structured database
# # # 	-> un structured database

# # # database --> query language 

# # # structured database --> structured query language --> SQL 
# # # un structured database -->NO structured query language -> NoSQL 

# # # SQL databases --> MySQL , oracle , db2 , mssql , postgres , sqlite 
# # # NoSQL databases --> mongoDB , cassandra . . 

# # # mysql 
# # # 	- version --> 8.0.4
# # # 	- mariadb 
# # # 	4 components
# # # 		- host  --> localhost / private IP 
# # # 		- port  --> 3306 / ____ 
# # # 		- user  --> root / ____ 
# # # 		- password -->    / ____ 

# # # mysql install --> ~330mb --> MSI installer  --> ??
# # # 	- libs 
# # # 	- mysql shell  --> prompt 
# # # 	- mysqlworkbench  --> GUI application

# # # wamp / mamp / Xammp --> pre installed

# # # architecture , queries 
	
# # # mysql 
# # # 	database
# # # 		tables 
# # # 			columns 

# # # rows --> records --> data 			

# # # c:/>mysql -u <username> -p 
# # # Enter password: ***** 

# # # mysql>show databases;
# # # mysql
# # # sys 
# # # info_schema
# # # perf_schema

# # # mysql>create database school; # generate a database

# # # mysql>show databases;
# # # mysql
# # # sys 
# # # info_schema
# # # perf_schema
# # # school 

# # # mysql>drop database school; # remove the database

# # # mysql>show databases;
# # # mysql
# # # sys 
# # # info_schema
# # # perf_schema

# # # mysql>create database school; # generate a database

# # # mysql>show databases;
# # # mysql
# # # sys 
# # # info_schema
# # # perf_schema
# # # school

# # # mysql>use school; # school database --> active 

# # # 3 components
# # # 	- table name  --> students 
# # # 	- col name -->    rno , name , email , standard , fee 
# # # 	- col datatype 

# # # tinyint --> one digit --> 0 1 2 

# # # rno ,    name ,     email ,    standard ,   fee
# # # int 	varchar	  varchar		int 		tinyint 


# # # mysql>create table students(
# # # 	rno int(32),
# # # 	name varchar(32),
# # # 	email varchar(32),
# # # 	standard int(10),
# # # 	fee tinyint
# # # 	);

# # # 100 students --> 5 john 
# # # (
# # # rno int(32) unique not null auto_increment,
# # # name varchar(32) not null ,
# # # email varchar(32) , 
# # # standard int(10) not null,
# # # fee tinyint not null );

# # # john --> 5 students
# # # j@g.com --> 1 , more students
# # # 6 --> more students
# # # 0 --> more students

# # # 10 --> 1 student
# # # 20 --> 1 student

# # # rno -> unique , int , incremented , auto_increment --> 1 2 3 4 . . . 
# # # rno --> primary key
# # # 		-> one table --> 1 pk 
# # # 		-> prefer --> int 
# # # 		-> auto_increment -> mandatory --> PK 
# # # 		-> PK --> 1 row 


# # # mysql>create table students(
# # # 	rno int(32) unique not null auto_increment,
# # # 	name varchar(32) not null ,
# # # 	email varchar(32) , 
# # # 	standard int(10) not null,
# # # 	fee tinyint not null 
# # # 	primary key rno );

# # # mysql>show tables;
# # # students

# # # mysql>drop table students;

# # # mysql>show tables;

# # # mysql>create table students(
# # # 	rno int(32) unique not null auto_increment,
# # # 	name varchar(32) not null ,
# # # 	email varchar(32) , 
# # # 	standard int(10) not null,
# # # 	fee tinyint not null 
# # # 	primary key rno );

# # # mysql>show tables;
# # # students

# # # put , get data 

# # # put -> insert query
# # # get -> select query 

# # # insert query 
# # # ------------

# # # mysql>insert into <tablename> values (v1,v2,v3,v4 . . . . );

# # # mysql>insert into students values (v1,v2,v3,v4,v5);
# # # mysql>insert into students values (NULL,v2,v3,v4,v5); # Null -> prev+1
# # # mysql>insert into students(name,email) values (___ , ___); # 2 values

# # # select query
# # # ------------

# # # mysql>select <colname> from <tablename>;
# # # mysql>select name from students; # all names 

# # # mysql>select <colname1>,<colname2>,<colname3> from <tablename>;
# # # mysql>select name,fee,standard from students; # all names,fee,standards

# # # mysql>select * from <tablename>;
# # # mysql>select * from students; # all cols all data 

# # # mysql>select * from students where rno = 5 ; # all cols of rno 5 student
# # # mysql>select * from students sort_by(rno); # all cols all data sorted
# # # mysql>select * from students group_by(fee); # all cols all data grouped

# # # clauses --> where , sort_by , group_by

# # # databases --> clauses , stored_procedures --> ???
# # # 	python --> functions
# # # 	mysql --> stored_procedures

# # # school --> students , standards , sections , subjects --> ??
# # # login --> users 
# # # 			user_id , user_name , user_pwd

# # # python   --> mysql 
# # # language --> database

# # # connectors --> external modules
# # # install --> external module --> establish connection

# # # connector --> PyMySQL , mysql-connect , MySqlDB

# # # pip install PyMySQL # download + install connector

# # # machine --> language , database , connector
# # # 			python  , mysql , PyMySQL

# # # 4 components 
# # # 	--> host , user , pwd , dbname

# # # -> direct connection
# # # -> secure db connection 			

# # # connection 
# # # 	creating objects --> connection object , cursor object
# # # 	closing --> connection object 

# # # try:
# # # 	# create connection object
# # # 	# execute queries
# # # except Exception as e:
# # # 	# capture exceptions 
# # # finally:
# # # 	# close connection object

# # # connections(2) , python , mysql

# # # data --> databases queries --> mysql 
# # # data -> python --> database queries -> mysql 

# # # establish connection --> PytHOn and MySQL

# # # pip install PyMySQL # connector
# # dbconn.py # filename 

# # # import PyMySQL # connector

# # # # connection object --> conn
# # # # all connectors 
# # # # 	.connect() --> host , user , pwd , dbname 

# # # conn = PyMySQL.connect("localhost","admin","9876","school")
# # # # conn # connection object

# # # # cursor object --> cur 
# # # # .cursor()
# # # cur = conn.cursor()

# # # # python --> queries -> strings 
# # # createTableQ = '''
# # # create table if not exists students(
# # # 	rno int(32),
# # # 	name varchar(32),
# # # 	email varchar(32),
# # # 	standard int(10),
# # # 	fee tinyint
# # # 	);
# # # '''

# # # # .execute() --> execution of queries --> called by cursor object 
# # # cur.execute(createTableQ) # table gets created  

# # # insertQ = "insert into students values (v1,v2,v3,v4,v5);"
# # # cur.execute(insertQ) # execute the insert query XX transfer of data XX 
# # # conn.commit() # insert 

# # # selectQ 
# # # 	fetch_one()
# # # 	fecth_many()
# # # 	fetch_all()

# # # conn.close() # closes connection 


# # # queries --> DML  --> execute + commit  --> insert 
# # # 			DDL  --> execute --> create

# # # django --> query sets 

# # # insecure connection
# # # try:
# # # 	import PyMySQL 
# # # 	conn = PyMySQL.connect("localhost","admin","9876","school")
# # # 	if conn:
# # # 		cur = conn.cursor()
# # # 		createTableQ = '''
# # # 		create table if not exists students(
# # # 			rno int(32),
# # # 			name varchar(32),
# # # 			email varchar(32),
# # # 			standard int(10),
# # # 			fee tinyint
# # # 			);'''
# # # 		cur.execute(createTableQ) 
# # # 		insertQ = "insert into students values (v1,v2,v3,v4,v5);"
# # # 		cur.execute(insertQ)
# # # 		conn.commit()
# # # 	else:
# # # 		print("connection not established") 
# # # except Exception as e:
# # # 	print(e)
# # # finally:
# # # 	conn.close() 

# # # secure database connection
# # # 	configuration file --> credentials 
# # # 	parser --> get data from config 
# # # 	dbconn --> get data from parser 

# # # config.ini --> parser.py --> dbconn.py 

# # # config.ini --> section + data 
# # try:
# # 	import PyMySQL 
# # 	from dbparser import getdbdetails
# # 	dbdict = getdbdetails(sectionname="mysql3")
# # 	conn = PyMySQL.connect(**dbdict)
# # 	if conn:
# # 		cur = conn.cursor()
# # 		createTableQ = '''
# # 		create table if not exists students(
# # 			rno int(32),
# # 			name varchar(32),
# # 			email varchar(32),
# # 			standard int(10),
# # 			fee tinyint
# # 			);'''
# # 		cur.execute(createTableQ) 
# # 		insertQ = "insert into students values (v1,v2,v3,v4,v5);"
# # 		cur.execute(insertQ)
# # 		conn.commit()
# # 	else:
# # 		print("connection not established") 
# # except Exception as e:
# # 	print(e)
# # finally:
# # 	conn.close() 

# git 
# 	- version control system
# 	- source code management 

# proj 
# 	-> d1 
# 	-> d2 
# 	-> d3 

# git version 2.13.1
# install git 

# 	- files 
# 	- folders 

# folder --> files , folders 

# folder  -->  repository 

# demo  --> folder 
# 	-> 1.py 
# 	-> 2.py 
# 	-> 3.py 

# c:/desktop/demo>git init # initialisation of repo
# /Users/digitallync/Desktop/demo/.git 

# local repository
# ^
# |
# staging area <-- 3 files
# ^
# |
# working directory <-- 3 files

# c:/desktop/demo>git add <filename> # adds single file
# c:/desktop/demo>git add . # add all files
# c:/desktop/demo>git status

# wd --> 3 , sa --> 3 files 

# c:/desktop/demo>git commit -m "<message>"

# working tree clean --> all files are in local repo 

# remote repo 

# wd --> sa --> lr  --> laptop/machine

# dev1 --> lr1
# dev2 --> lr2 			remote repository
# dev3 --> lr3 

# remote repository --> global repository
# wd --> sa --> lr --> rr 

# remote repository 
# 	- build own (server)
# 	- 3rd party --> github , bitbucket  

# rr -> public , private --> github -> prev
# public --> free , visible all 
# private --> paid , visible colaborators 

# rr -> public , private --> github -> prev
# public --> free , visible all 
# private --> free , visible colaborators 

# 3 files --> local repository --> remote repository

# lr --> rr -> https://github.com/junaid238/demo6pm.git
# 	connection 


# lr --> /Users/digitallync/Desktop/demo/.git 
# rr -> https://github.com/junaid238/demo6pm.git

# c:/desktop/demo>git status 
# working tree clean 
# c:/desktop/demo>git remote add origin <link>
# # lr <--> rr
# connected --> lr with rr 

# 3 files --> local repository --> remote repository
# c:/desktop/demo>git push origin master

# modify code 

# files --> folder 

# c:/desktop/demo>git add . 
# c:/desktop/demo>git commit -m "message"
# c:/desktop/demo>git status
# c:/desktop/demo>git push origin master 

# files -> remote repository
# git clone <link> --> download repository

# files , material --> https://github.com/junaid238/gunturClasses.git
# python code --> https://github.com/junaid238/class_files.git


# multiple inheritance

# class a:
# 	addnums() # 1

# class b:
# 	addnums() # 2 

# class c(a,b):
# 	# addnums() # 3 

# c1 = c() 
# # c1.addnums() # 3 
# # c1.addnums() # 1 

# mro --> method resolution operator 
# multiple inheritance --> serach methods -> left , right 


# class parent2:
# 	def openums(self,n1,n2):
# 		res = n1 * n2 
# 		print(res)

# class parent1:
# 	def openums(self,n1,n2):
# 		res = n1 + n2 
# 		print(res)

# class child(parent2,parent1):
# 	# def openums(self,n1,n2):
# 	# 	res = n1 ** n2 
# 	# 	print(res)
# 	pass

# c1 = child()
# c1.openums(100,2)
# print(child.mro()) # search pattern of components
	# child , parent1 , parent2 , object
# for i in child.mro():
# 	print(i)

# object creation 
# calling component
# search component

# pip install pyqt4 
# pip install tkinter 

# keyboard inputs
# a = input("enter a number : ")
# print(a)
# run --> file -> ask -> passing -> run --> output

# CLI inputs 
# import sys 
# sys.argv 
# 	- list 
# 	- all inputs compile time (during run time)
# 	- first element argv --> filename 
# 	- next inputs --> 2 3 4 . . .
# print(sys.argv)

# run + inputs --> output

# py + django + mysql --> backend

# mobile --> req --> django --> web --> mysql 
# mobile <--- api <-- response <---


# mobile app --> mobile language + web language 
# 				android studio + py + mysql 

# material files , task files , assessment -->  ??