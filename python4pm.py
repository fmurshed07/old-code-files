# # # # # # # # # # # # # # # # # # # # # # # # # # khan
# # # # # # # # # # # # # # # # # # # # # # # # # # 	35 hrs 
# # # # # # # # # # # # # # # # # # # # # # # # # # 	python 

# # # # # # # # # # # # # # # # # # # # # # # # # # - basics of programming 
# # # # # # # # # # # # # # # # # # # # # # # # # # - collections 
# # # # # # # # # # # # # # # # # # # # # # # # # # - functional programming
# # # # # # # # # # # # # # # # # # # # # # # # # # - oopy + database 

# # # # # # # # # # # # # # # # # # # # # # # # # # 3 --> git 
# # # # # # # # # # # # # # # # # # # # # # # # # # 2 --> django (fw)

# # # # # # # # # # # # # # # # # # # # # # # # # # 3 -> assessment test 
# # # # # # # # # # # # # # # # # # # # # # # # # # 3 -> project(poc)

# # # # # # # # # # # # # # # # # # # # # # # # # python --> scripting + programming language

# # # # # # # # # # # # # # # # # # # # # # # # # programming vs scripting

# # # # # # # # # # # # # # # # # # # # # # # # # programming --> 0 , code 

# # # # # # # # # # # # # # # # # # # # # # # # # 2000 		---> 		2019
# # # # # # # # # # # # # # # # # # # # # # # # # fb.com	   --> code	-->	fb.com --> program 
# # # # # # # # # # # # # # # # # # # # # # # # # 0 ----->				100 

# # # # # # # # # # # # # # # # # # # # # # # # # scripting

# # # # # # # # # # # # # # # # # # # # # # # # # win       ---> 10 X code(mouse click) ---> 10 folders 
# # # # # # # # # # # # # # # # # # # # # # # # # code --> script

# # # # # # # # # # # # # # # # # # # # # # # # # python -->  1991 --> rossum --> free 
# # # # # # # # # # # # # # # # # # # # # # # # # 	python.org 

# # # # # # # # # # # # # # # # # # # # # # # # # py --> 3.7 --> latest stable version 
# # # # # # # # # # # # # # # # # # # # # # # # # py --> 2.7 --> most used stable version 

# # # # # # # # # # # # # # # # # # # # # # # # # py2 ---> py3  XXX 
# # # # # # # # # # # # # # # # # # # # # # # # # py3 ---> py2  XXX 

# # # # # # # # # # # # # # # # # # # # # # # # # architectural changes  --> !!! 
# # # # # # # # # # # # # # # # # # # # # # # # # py3 vs py2

# # # # # # # # # # # # # # # # # # # # # # # # # use cases 
# # # # # # # # # # # # # # # # # # # # # # # # # ---------
# # # # # # # # # # # # # # # # # # # # # # # # # web app 
# # # # # # # # # # # # # # # # # # # # # # # # # gui app 
# # # # # # # # # # # # # # # # # # # # # # # # # automate (devops scripting)
# # # # # # # # # # # # # # # # # # # # # # # # # scientific computing 

# # # # # # # # # # # # # # # # # # # # # # # # # mobile app
# # # # # # # # # # # # # # # # # # # # # # # # # testing automation 
# # # # # # # # # # # # # # # # # # # # # # # # # game 
# # # # # # # # # # # # # # # # # # # # # # # # # 3d design

# # # # # # # # # # # # # # # # # # # # # # # # # web applications
# # # # # # # # # # # # # # # # # # # # # # # # # 	- network 
# # # # # # # # # # # # # # # # # # # # # # # # # 	- browser
# # # # # # # # # # # # # # # # # # # # # # # # # flipkart , fb , google , youtube , bank  . . . . 
# # # # # # # # # # # # # # # # # # # # # # # # # python --> youtube , google , torrents , dropbox , flickr , instagram
# # # # # # # # # # # # # # # # # # # # # # # # # java --> irctc , banks

# # # # # # # # # # # # # # # # # # # # # # # # # python vs java 
# # # # # # # # # # # # # # # # # # # # # # # # # youtube 
# # # # # # # # # # # # # # # # # # # # # # # # # 	lots of data 
# # # # # # # # # # # # # # # # # # # # # # # # # 	less time 
# # # # # # # # # # # # # # # # # # # # # # # # # 	python 
# # # # # # # # # # # # # # # # # # # # # # # # # 	less secure

# # # # # # # # # # # # # # # # # # # # # # # # # bank.online.com 
# # # # # # # # # # # # # # # # # # # # # # # # # 	less data
# # # # # # # # # # # # # # # # # # # # # # # # # 	lots of time 
# # # # # # # # # # # # # # # # # # # # # # # # # 	java
# # # # # # # # # # # # # # # # # # # # # # # # # 	lots secure  

# # # # # # # # # # # # # # # # # # # # # # # # # speed vs security
# # # # # # # # # # # # # # # # # # # # # # # # # python --> lots of data , speed 

# # # # # # # # # # # # # # # # # # # # # # # # # python --> XX web apps XX 
# # # # # # # # # # # # # # # # # # # # # # # # # python + web framework --> web app
# # # # # # # # # # # # # # # # # # # # # # # # # web FW --> django , flask , . . . . 
# # # # # # # # # # # # # # # # # # # # # # # # # py + django --> web app

# # # # # # # # # # # # # # # # # # # # # # # # # GUI app 
# # # # # # # # # # # # # # # # # # # # # # # # # -------
# # # # # # # # # # # # # # # # # # # # # # # # # 	- XX network XX 
# # # # # # # # # # # # # # # # # # # # # # # # # 	- XX browser XX 
# # # # # # # # # # # # # # # # # # # # # # # # # 	- calc , ms , old games
# # # # # # # # # # # # # # # # # # # # # # # # # 	- billing systems 
# # # # # # # # # # # # # # # # # # # # # # # # # 	- py , java , js 

# # # # # # # # # # # # # # # # # # # # # # # # # py --> gui apps 
# # # # # # # # # # # # # # # # # # # # # # # # # gui framework /libs --> pyqt4 , tkinter 
# # # # # # # # # # # # # # # # # # # # # # # # # py+pyqt4 / py+tkinter --> gui app 

# # # # # # # # # # # # # # # # # # # # # # # # # gui vs web 
# # # # # # # # # # # # # # # # # # # # # # # # # gui 
# # # # # # # # # # # # # # # # # # # # # # # # # 	less dependencies 
# # # # # # # # # # # # # # # # # # # # # # # # # 	data local 
# # # # # # # # # # # # # # # # # # # # # # # # # 	machine friendly
# # # # # # # # # # # # # # # # # # # # # # # # # web 
# # # # # # # # # # # # # # # # # # # # # # # # # 	data remote 
# # # # # # # # # # # # # # # # # # # # # # # # # 	user friendly
# # # # # # # # # # # # # # # # # # # # # # # # # 	lots dependencies

# # # # # # # # # # # # # # # # # # # # # # # # # automation for devops / cloud 
# # # # # # # # # # # # # # # # # # # # # # # # # -----------------------------
# # # # # # # # # # # # # # # # # # # # # # # # # devops --> set of tools 
# # # # # # # # # # # # # # # # # # # # # # # # # dev t1 t2 t3 t4 . . . . user 

# # # # # # # # # # # # # # # # # # # # # # # # # scripts --> shell , ruby , perl , python

# # # # # # # # # # # # # # # # # # # # # # # # # scientific computing
# # # # # # # # # # # # # # # # # # # # # # # # # --------------------
# # # # # # # # # # # # # # # # # # # # # # # # # advanced algos 
# # # # # # # # # # # # # # # # # # # # # # # # # 	maths 
# # # # # # # # # # # # # # # # # # # # # # # # # 	stats 

# # # # # # # # # # # # # # # # # # # # # # # # # ml , dl , nn , ai , ds , iot , bd . . 
# # # # # # # # # # # # # # # # # # # # # # # # # ds --> py , R , sass , matlab  , C++ 

# # # # # # # # # # # # # # # # # # # # # # # # # sass , matlab --> paid 
# # # # # # # # # # # # # # # # # # # # # # # # # R , c++ --> tough , sc only 
# # # # # # # # # # # # # # # # # # # # # # # # # py --> sc + wapp

# # # # # # # # # # # # # # # # # # # # # # # # # py + libs --> sc 
# # # # # # # # # # # # # # # # # # # # # # # # # py + fw --> sc


# # # # # # # # # # # # # # # # # # # # # # # # # install
# # # # # # # # # # # # # # # # # # # # # # # # # py3 --> latest  
# # # # # # # # # # # # # # # # # # # # # # # # # py2 --> most used 

# # # # # # # # # # # # # # # # # # # # # # # # # Features 
# # # # # # # # # # # # # # # # # # # # # # # # # 	- interpreted 
# # # # # # # # # # # # # # # # # # # # # # # # # 	- open source --> free 
# # # # # # # # # # # # # # # # # # # # # # # # # 	- oopL --> objects oops 
# # # # # # # # # # # # # # # # # # # # # # # # # 	- dynamically typed
# # # # # # # # # # # # # # # # # # # # # # # # # 	- multi domain --> web , gui , scripting , ds , ml
# # # # # # # # # # # # # # # # # # # # # # # # # 	- cross platform --> mutli os 

# # # # # # # # # # # # # # # # # # # # # # # # # executions 
# # # # # # # # # # # # # # # # # # # # # # # # # 	compile --> c , cpp , java 
# # # # # # # # # # # # # # # # # # # # # # # # # 	interpret --> py  

# # # # # # # # # # # # # # # # # # # # # # # # # cpp --> 100 lines --> 10 , 40 , 60 
# # # # # # # # # # # # # # # # # # # # # # # # # code->compile->errors10 40 60->fix 3->compile->bytecode->run->op 100%

# # # # # # # # # # # # # # # # # # # # # # # # # py --> 100 lines --> 10 40 60 
# # # # # # # # # # # # # # # # # # # # # # # # # code->interpret->op9error10->fix10->interpret->op39error40->fix 40->interpret->op59error60->fix60->interpret->op100%

# # # # # # # # # # # # # # # # # # # # # # # # # dynamically typed language

# # # # # # # # # # # # # # # # # # # # # # # # # 10 --> number --> dynamically typing 
# # # # # # # # # # # # # # # # # # # # # # # # # number 10 --> number 

# # # # # # # # # # # # # # # # # # # # # # # # # install
# # # # # # # # # # # # # # # # # # # # # # # # # 	py3.7 --> python.org 

# # # # # # # # # # # # # # # # # # # # # # # # # 	win --> download + run 
# # # # # # # # # # # # # # # # # # # # # # # # # 	linux,mac --> pre installed py2 --> upgrade --> py3

# # # # # # # # # # # # # # # # # # # # # # # # # python install
# # # # # # # # # # # # # # # # # # # # # # # # # 	- libs 
# # # # # # # # # # # # # # # # # # # # # # # # # 	- IDLE 
# # # # # # # # # # # # # # # # # # # # # # # # # 	- python shell 

# # # # # # # # # # # # # # # # # # # # # # # # # cmd/terminal 

# # # # # # # # # # # # # # # # # # # # # # # # # c:/>python
# # # # # # # # # # # # # # # # # # # # # # # # # 2.7---------------
# # # # # # # # # # # # # # # # # # # # # # # # # -----------------
# # # # # # # # # # # # # # # # # # # # # # # # # -----------------
# # # # # # # # # # # # # # # # # # # # # # # # # >>>

# # # # # # # # # # # # # # # # # # # # # # # # # c:/>python3
# # # # # # # # # # # # # # # # # # # # # # # # # 3----------------
# # # # # # # # # # # # # # # # # # # # # # # # # -----------------
# # # # # # # # # # # # # # # # # # # # # # # # # -----------------
# # # # # # # # # # # # # # # # # # # # # # # # # >>>

# # # # # # # # # # # # # # # # # # # # # # # # # writing of python code 
# # # # # # # # # # # # # # # # # # # # # # # # # 	- single line  --> XX save XX 
# # # # # # # # # # # # # # # # # # # # # # # # # 		cmd / shell
# # # # # # # # # # # # # # # # # # # # # # # # # 	- python files 
# # # # # # # # # # # # # # # # # # # # # # # # # 		IDLE / editor --> .py 
# # # # # # # # # # # # # # # # # # # # # # # # # 	- python projects
# # # # # # # # # # # # # # # # # # # # # # # # # 		editor / IDE (PyCharm CE)

# # # # # # # # # # # # # # # # # # # # # # # # # running of python code 
# # # # # # # # # # # # # # # # # # # # # # # # # 	- single line 
# # # # # # # # # # # # # # # # # # # # # # # # # 		cmd / shell --> run 
# # # # # # # # # # # # # # # # # # # # # # # # # 	- file 
# # # # # # # # # # # # # # # # # # # # # # # # # 		editor
# # # # # # # # # # # # # # # # # # # # # # # # # 			c:/desktop>python <filename>.py 
# # # # # # # # # # # # # # # # # # # # # # # # # 		IDLE
# # # # # # # # # # # # # # # # # # # # # # # # # 			run --> run module 
# # # # # # # # # # # # # # # # # # # # # # # # # 	- project
# # # # # # # # # # # # # # # # # # # # # # # # # 		IDE --> editor + console 
# # # # # # # # # # # # # # # # # # # # # # # # # syntax , indendation 

# # # # # # # # # # # # # # # # # # # # # # # # # syntax --> easy 
# # # # # # # # # # # # # # # # # # # # # # # # # 	grammar of code 

# # # # # # # # # # # # # # # # # # # # # # # # # indendation --> strict
# # # # # # # # # # # # # # # # # # # # # # # # # 	structure use --> spaces , tabs



# # # # # # # # # # # # # # # # # # # # # # # # # keywords 
# # # # # # # # # # # # # # # # # # # # # # # # # 	- pre defined 
# # # # # # # # # # # # # # # # # # # # # # # # # 	- libs 
# # # # # # # # # # # # # # # # # # # # # # # # # 	- immutable XX modify XX add XX delete XX 

# # # # # # # # # # # # # # # # # # # # # # # # # py2 --> 31
# # # # # # # # # # # # # # # # # # # # # # # # # py3.5 --> 33 
# # # # # # # # # # # # # # # # # # # # # # # # # py3.7 --> 35 

# # # # # # # # # # # # # # # # # # # # # # # # >>>import keyword
# # # # # # # # # # # # # # # # # # # # # # # # >>>keyword.kwlist
# # # # # # # # # # # # # # # # # # # # # # # # py2
# # # # # # # # # # # # # # # # # # # # # # # # ['and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'exec', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'not', 'or', 'pass', 'print', 'raise', 'return', 'try', 'while', 'with', 'yield']

# # # # # # # # # # # # # # # # # # # # # # # # py3
# # # # # # # # # # # # # # # # # # # # # # # # ['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']

# # # # # # # # # # # # # # # # # # # # # # # # install python 
# # # # # # # # # # # # # # # # # # # # # # # # editor --> sublime text3 

# # # # # # # # # # # # # # # # # # # # # # # # _ set path 
# # # # # # # # # # # # # # # # # # # # # # # # _ install pip

# # # # # # # # # # # # # # # # # # # # # # # # identifiers 
# # # # # # # # # # # # # # # # # # # # # # # # -----------
# # # # # # # # # # # # # # # # # # # # # # # # 	- user defined words 
# # # # # # # # # # # # # # # # # # # # # # # # 	- naming programming components 
# # # # # # # # # # # # # # # # # # # # # # # # 	- rules 
# # # # # # # # # # # # # # # # # # # # # # # # 		- start lower case 
# # # # # # # # # # # # # # # # # # # # # # # # 		- start upper case ( not recommended )
# # # # # # # # # # # # # # # # # # # # # # # # 		- XX start number XX 
# # # # # # # # # # # # # # # # # # # # # # # # 		- XX start symbol XX @ _ __ (special)
# # # # # # # # # # # # # # # # # # # # # # # # 		- use number 
# # # # # # # # # # # # # # # # # # # # # # # # 		- XX use symbol XX _ 

# # # # # # # # # # # # # # # # # # # # # # # # name , AGE , mobile2 , email_address , _password , __name , @class - valid 
# # # # # # # # # # # # # # # # # # # # # # # # $name , 2mobile , user*name --> invalid

# # # # # # # # # # # # # # # # # # # # # # # # variables 
# # # # # # # # # # # # # # # # # # # # # # # # ---------
# # # # # # # # # # # # # # # # # # # # # # # # data containers 
# # # # # # # # # # # # # # # # # # # # # # # # 	- store data dynamically
# # # # # # # # # # # # # # # # # # # # # # # # 	- name  --> identifier
# # # # # # # # # # # # # # # # # # # # # # # # 	- value --> data 
# # # # # # # # # # # # # # # # # # # # # # # # 	- address --> location 

# # # # # # # # # # # # # # # # # # # # # # # # <varname> = <varvalue>
# # # # # # # # # # # # # # # # # # # # # # # # =  --> assignment operator 

# # # # # # # # # # # # # # # # # # # # # # # # a = 10 

# # # # # # # # # # # # # # # # # # # # # # # # name --> a 
# # # # # # # # # # # # # # # # # # # # # # # # value --> 10 
# # # # # # # # # # # # # # # # # # # # # # # # address --> id(<varname>)
# # # # # # # # # # # # # # # # # # # # # # # # datatype --> type(<varname>)

# # # # # # # # # # # # # # # # # # # # # # # # datatypes in python
# # # # # # # # # # # # # # # # # # # # # # # # -------------------
# # # # # # # # # # # # # # # # # # # # # # # # 2 types 
# # # # # # # # # # # # # # # # # # # # # # # # 	independent 
# # # # # # # # # # # # # # # # # # # # # # # # 		- numbers 
# # # # # # # # # # # # # # # # # # # # # # # # 		- strings 
# # # # # # # # # # # # # # # # # # # # # # # # 	collections
# # # # # # # # # # # # # # # # # # # # # # # # 		default collections
# # # # # # # # # # # # # # # # # # # # # # # # 			- lists 
# # # # # # # # # # # # # # # # # # # # # # # # 			- tuples 
# # # # # # # # # # # # # # # # # # # # # # # # 			- dictionaries
# # # # # # # # # # # # # # # # # # # # # # # # 		special collections 
# # # # # # # # # # # # # # # # # # # # # # # # 			- sets 
# # # # # # # # # # # # # # # # # # # # # # # # 			- frozensets 

# # # # # # # # # # # # # # # # # # # # # # # # numbers
# # # # # # # # # # # # # # # # # # # # # # # # -------
# # # # # # # # # # # # # # # # # # # # # # # # int float complex
# # # # # # # # # # # # # # # # # # # # # # # # all whole --> int  100 , 2 , 500, 234 , -30 , -345
# # # # # # # # # # # # # # # # # # # # # # # # all decimals --> float  10.4,3.6,70.67 ,10.00
# # # # # # # # # # # # # # # # # # # # # # # # complex --> a+ib --> c+dj 3+4j , 100+300j , 30+40j

# # # # # # # # # # # # # # # # # # # # # # # # int float complex --> py3 
# # # # # # # # # # # # # # # # # # # # # # # # int long float complex --> py2

# # # # # # # # # # # # # # # # # # # # # # # # -----------int------------------|-------------long------------- py2 
# # # # # # # # # # # # # # # # # # # # # # # # -----------int------------------|--------------int------------- py3 

# # # # # # # # # # # # # # # # # # # # # # # # | --> maximum possible integer  --> 9223372036854775807

# # # # # # # # # # # # # # # # # # # # # # # # >>>import sys 
# # # # # # # # # # # # # # # # # # # # # # # # >>>sys.maxint  py2 
# # # # # # # # # # # # # # # # # # # # # # # # >>>sys.maxsize py3

# # # # # # # # # # # # # # # # # # # # # # # # numbers ---> operations

# # # # # # # # # # # # # # # # # # # # # # # # 6 kinds operations
# # # # # # # # # # # # # # # # # # # # # # # # 	numbers
# # # # # # # # # # # # # # # # # # # # # # # # 		- arithmetic 
# # # # # # # # # # # # # # # # # # # # # # # # 		- comparision
# # # # # # # # # # # # # # # # # # # # # # # # 		- logical 
# # # # # # # # # # # # # # # # # # # # # # # # 		- bitwise 
# # # # # # # # # # # # # # # # # # # # # # # # 	except numbers
# # # # # # # # # # # # # # # # # # # # # # # # 		- membership
# # # # # # # # # # # # # # # # # # # # # # # # 		- identity 

# # # # # # # # # # # # # # # # # # # # # # # # assignment --> = 

# # # # # # # # # # # # # # # # # # # # # # # # arithmetic --> 7 operators --> values 
# # # # # # # # # # # # # # # # # # # # # # # # a = 25 
# # # # # # # # # # # # # # # # # # # # # # # # b = 6 

# # # # # # # # # # # # # # # # # # # # # # # # + add 
# # # # # # # # # # # # # # # # # # # # # # # # - sub 
# # # # # # # # # # # # # # # # # # # # # # # # * mul 
# # # # # # # # # # # # # # # # # # # # # # # # / div  --> float
# # # # # # # # # # # # # # # # # # # # # # # # // floordiv  --> int 
# # # # # # # # # # # # # # # # # # # # # # # # % rem(modulo)
# # # # # # # # # # # # # # # # # # # # # # # # ** exponent(power)

# # # # # # # # # # # # # # # # # # # # # # # # py3 
# # # # # # # # # # # # # # # # # # # # # # # # a = 25 
# # # # # # # # # # # # # # # # # # # # # # # # b = 6 
# # # # # # # # # # # # # # # # # # # # # # # # / --> float 
# # # # # # # # # # # # # # # # # # # # # # # # // --> int

# # # # # # # # # # # # # # # # # # # # # # # # py2 
# # # # # # # # # # # # # # # # # # # # # # # # a = 25 
# # # # # # # # # # # # # # # # # # # # # # # # b = 6 
# # # # # # # # # # # # # # # # # # # # # # # # / --> int 
# # # # # # # # # # # # # # # # # # # # # # # # // --> int

# # # # # # # # # # # # # # # # # # # # # # # # py2 
# # # # # # # # # # # # # # # # # # # # # # # # a = 25.0
# # # # # # # # # # # # # # # # # # # # # # # # b = 6 
# # # # # # # # # # # # # # # # # # # # # # # # / --> float 
# # # # # # # # # # # # # # # # # # # # # # # # // --> int

# # # # # # # # # # # # # # # # # # # # # # # # comparision -- 6 -- True / False
# # # # # # # # # # # # # # # # # # # # # # # # >
# # # # # # # # # # # # # # # # # # # # # # # # <
# # # # # # # # # # # # # # # # # # # # # # # # >=
# # # # # # # # # # # # # # # # # # # # # # # # <=
# # # # # # # # # # # # # # # # # # # # # # # # ==  equality
# # # # # # # # # # # # # # # # # # # # # # # # !=  non equality

# # # # # # # # # # # # # # # # # # # # # # # # logical -- 3 -- True/False/values
# # # # # # # # # # # # # # # # # # # # # # # # and 
# # # # # # # # # # # # # # # # # # # # # # # # or 
# # # # # # # # # # # # # # # # # # # # # # # # not 

# # # # # # # # # # # # # # # # # # # # # # # # truthtables 

# # # # # # # # # # # # # # # # # # # # # # # # and 
# # # # # # # # # # # # # # # # # # # # # # # # ip1		ip2		. . . 	ip1 and ip2 . . .
# # # # # # # # # # # # # # # # # # # # # # # # t 		 t 				   t 
# # # # # # # # # # # # # # # # # # # # # # # # t      	 f 			       f 
# # # # # # # # # # # # # # # # # # # # # # # # f    	 t 			       f 
# # # # # # # # # # # # # # # # # # # # # # # # f 		 f  			   f 
# # # # # # # # # # # # # # # # # # # # # # # # and --> ttt 

# # # # # # # # # # # # # # # # # # # # # # # # or 
# # # # # # # # # # # # # # # # # # # # # # # # ip1     ip2	  . . .		ip1 or ip2 . . .
# # # # # # # # # # # # # # # # # # # # # # # # t        t                 t
# # # # # # # # # # # # # # # # # # # # # # # # t 		 f 				   t 
# # # # # # # # # # # # # # # # # # # # # # # # f 		 t 				   t 
# # # # # # # # # # # # # # # # # # # # # # # # f 		 f 				   f 
# # # # # # # # # # # # # # # # # # # # # # # # or --> fff 

# # # # # # # # # # # # # # # # # # # # # # # # not --> 1's complement 
# # # # # # # # # # # # # # # # # # # # # # # # not(f) --> t 
# # # # # # # # # # # # # # # # # # # # # # # # not(t) --> f 

# # # # # # # # # # # # # # # # # # # # # # # # 10 and 20   
# # # # # # # # # # # # # # # # # # # # # # # # 10 or 20    

# # # # # # # # # # # # # # # # # # # # # # # # 20 and 10
# # # # # # # # # # # # # # # # # # # # # # # # 20 or 10 

# # # # # # # # # # # # # # # # # # # # # # # # all numbers --> true

# # # # # # # # # # # # # # # # # # # # # # # # 10 and 20 
# # # # # # # # # # # # # # # # # # # # # # # # t  and t --> 20 

# # # # # # # # # # # # # # # # # # # # # # # # 10 or 20 
# # # # # # # # # # # # # # # # # # # # # # # # t --------> 10 

# # # # # # # # # # # # # # # # # # # # # # # # bitwise -- 6 -- values 

# # # # # # # # # # # # # # # # # # # # # # # # &  bw and
# # # # # # # # # # # # # # # # # # # # # # # # |  bw or 
# # # # # # # # # # # # # # # # # # # # # # # # ~  bw not
# # # # # # # # # # # # # # # # # # # # # # # # >> right shift 
# # # # # # # # # # # # # # # # # # # # # # # # << left shift
# # # # # # # # # # # # # # # # # # # # # # # # ^  xor 

# # # # # # # # # # # # # # # # # # # # # # # # 0 --> False
# # # # # # # # # # # # # # # # # # # # # # # # 1 --> True

# # # # # # # # # # # # # # # # # # # # # # # # number --> binary 
# # # # # # # # # # # # # # # # # # # # # # # # 	128   64    32     16   8   4   2    1 

# # # # # # # # # # # # # # # # # # # # # # # # 10   0     0     0      0   1   0   1    0  --> 00001010
# # # # # # # # # # # # # # # # # # # # # # # # 20   0     0     0      1   0   1   0    0  --> 00010100



# # # # # # # # # # # # # # # # # # # # # # # # 10|20   00011110 --> 30 
# # # # # # # # # # # # # # # # # # # # # # # # 10&20   00000000 --> 0 

# # # # # # # # # # # # # # # # # # # # # # # # XXX ~10 --> 11110101 XXX
# # # # # # # # # # # # # # # # # # # # # # # # ~ --> bw not --> 2's complement

# # # # # # # # # # # # # # # # # # # # # # # # ~x --> -(x+1)
# # # # # # # # # # # # # # # # # # # # # # # # ~10 --> -11 
# # # # # # # # # # # # # # # # # # # # # # # # ~23 --> -24 
# # # # # # # # # # # # # # # # # # # # # # # # not(10) --> False
# # # # # # # # # # # # # # # # # # # # # # # # ~10 --> -11 
# # # # # # # # # # # # # # # # # # # # # # # # ~(-10) --> 9 

# # # # # # # # # # # # # # # # # # # # # # # # 12 & 15 
# # # # # # # # # # # # # # # # # # # # # # # # 13 | 8 
# # # # # # # # # # # # # # # # # # # # # # # # ^ --> xor  --> ??
# # # # # # # # # # # # # # # # # # # # # # # # 10^20

# # # # # # # # # # # # # # # # # # # # # # # # >> , <<  

# # # # # # # # # # # # # # # # # # # # # # # # 10   -->  00001010

# # # # # # # # # # # # # # # # # # # # # # # # 10>>2  --> 00001010 >> 2 --> 00000010 --> 2 
# # # # # # # # # # # # # # # # # # # # # # # # 10<<2  --> 00001010 << 2 --> 00101000 --> 40 


# # # # # # # # # # # # # # # # # # # # # # # # output in python  --> new line 
# # # # # # # # # # # # # # # # # # # # # # # # ----------------

# # # # # # # # # # # # # # # # # # # # # # # # print , print() --> command  --> py2 
# # # # # # # # # # # # # # # # # # # # # # # # print() --> function  --> py3 

# # # # # # # # # # # # # # # # # # # # # # # # py2 
# # # # # # # # # # # # # # # # # # # # # # # # print(10)
# # # # # # # # # # # # # # # # # # # # # # # # print(20)
# # # # # # # # # # # # # # # # # # # # # # # # print(30)
# # # # # # # # # # # # # # # # # # # # # # # # print 10 
# # # # # # # # # # # # # # # # # # # # # # # # print 20 
# # # # # # # # # # # # # # # # # # # # # # # # print 30 

# # # # # # # # # # # # # # # # # # # # # # # # py3  
# # # # # # # # # # # # # # # # # # # # # # # # XXX py2 XXX 
# # # # # # # # # # # # # # # # # # # # # # # # print(10,end="")
# # # # # # # # # # # # # # # # # # # # # # # # print(20,end="")
# # # # # # # # # # # # # # # # # # # # # # # # print(30)

# # # # # # # # # # # # # # # # # # # # # # # strings 
# # # # # # # # # # # # # # # # # # # # # # # -------
# # # # # # # # # # # # # # # # # # # # # # # 	character 
# # # # # # # # # # # # # # # # # # # # # # # 	group of characters
# # # # # # # # # # # # # # # # # # # # # # # 	alphanumeric (numbers , symbols , alphabets)

# # # # # # # # # # # # # # # # # # # # # # # Features
# # # # # # # # # # # # # # # # # # # # # # # --------
# # # # # # # # # # # # # # # # # # # # # # # 	- immutable
# # # # # # # # # # # # # # # # # # # # # # # 	- <class str>
# # # # # # # # # # # # # # # # # # # # # # # 	- indexed 
# # # # # # # # # # # # # # # # # # # # # # # 	- sliced 
# # # # # # # # # # # # # # # # # # # # # # # 	- concatenated 
# # # # # # # # # # # # # # # # # # # # # # # 	- iterated 

# # # # # # # # # # # # # # # # # # # # # # # ' ' 
# # # # # # # # # # # # # # # # # # # # # # # " "

# # # # # # # # # # # # # # # # # # # # # # # <strname> = "<strvalue>"

# # # # # # # # # # # # # # # # # # # # # # tech = "python"
# # # # # # # # # # # # # # # # # # # # # # # print(tech)
# # # # # # # # # # # # # # # # # # # # # # # print(type(tech))

# # # # # # # # # # # # # # # # # # # # # # # "python" --> p   y    t    h    o    n  
# # # # # # # # # # # # # # # # # # # # # # # 			 0   1    2    3    4    5 --> forward indices 
# # # # # # # # # # # # # # # # # # # # # # # 			 -6  -5  -4   -3   -2   -1 --> reverse indices
# # # # # # # # # # # # # # # # # # # # # # # indexing --> extract single char 

# # # # # # # # # # # # # # # # # # # # # # # <strname>[<index>]
# # # # # # # # # # # # # # # # # # # # # # # print(tech[2])
# # # # # # # # # # # # # # # # # # # # # # # print(tech[-3])
# # # # # # # # # # # # # # # # # # # # # # # print(tech[0])
# # # # # # # # # # # # # # # # # # # # # # # print(tech[-5])
# # # # # # # # # # # # # # # # # # # # # # # print(tech[-4])
# # # # # # # # # # # # # # # # # # # # # # # print(tech[10]) # error

# # # # # # # # # # # # # # # # # # # # # # # slicing --> extract substring 

# # # # # # # # # # # # # # # # # # # # # # tech = "python and machine learning"
# # # # # # # # # # # # # # # # # # # # # # # print(tech[3])
# # # # # # # # # # # # # # # # # # # # # # # print(tech[6])

# # # # # # # # # # # # # # # # # # # # # # # hon --> 3,4,5 --> 3:6
# # # # # # # # # # # # # # # # # # # # # # # 2:10 --> 2 3 4 5 ...9

# # # # # # # # # # # # # # # # # # # # # # # <strname>[<start>:<end>]
# # # # # # # # # # # # # # # # # # # # # # # print(tech[3:6]) # hon 
# # # # # # # # # # # # # # # # # # # # # # # print(tech[2:10])  # 2 3 4 5 6 7 8 9 
# # # # # # # # # # # # # # # # # # # # # # # print(tech[:5])
# # # # # # # # # # # # # # # # # # # # # # # print(tech[15:])

# # # # # # # # # # # # # # # # # # # # # # # <strname>[<start>:<end>:<step>]
# # # # # # # # # # # # # # # # # # # # # # # print(tech[2:10])  #start=2 3 4 5 6 7 8 9 end=10 step=+1 
# # # # # # # # # # # # # # # # # # # # # # # print(tech[2:10:1])  #start=2 3 4 5 6 7 8 9 end=10 step=+1 
# # # # # # # # # # # # # # # # # # # # # # # print(tech[2:10:2])  #start=2 4 6 8 step=+2
# # # # # # # # # # # # # # # # # # # # # # # print(tech[::3])

# # # # # # # # # # # # # # # # # # # # # # # reversing string
# # # # # # # # # # # # # # # # # # # # # # # print(tech[10:2]) # start=10 +1 11
# # # # # # # # # # # # # # # # # # # # # # # print(tech[10:2:-1]) # 10 9 8 7 ... 3
# # # # # # # # # # # # # # # # # # # # # # # print(tech[::-1])

# # # # # # # # # # # # # # # # # # # # # # tech = "python and machine learning"
# # # # # # # # # # # # # # # # # # # # # # # machine 
# # # # # # # # # # # # # # # # # # # # # # # gninrael 
# # # # # # # # # # # # # # # # # # # # # # # print(tech[11:18])
# # # # # # # # # # # # # # # # # # # # # # # print(tech[-16:-9])

# # # # # # # # # # # # # # # # # # # # # # # print(tech[26:18:-1])
# # # # # # # # # # # # # # # # # # # # # # # print(tech[-1:-9:-1])

# # # # # # # # # # # # # # # # # # # # # # # concatenation 
# # # # # # # # # # # # # # # # # # # # # # # combining multiple strings only  
# # # # # # # # # # # # # # # # # # # # # # # concatenation operator --> + 
# # # # # # # # # # # # # # # # # # # # # # # tech = "python"
# # # # # # # # # # # # # # # # # # # # # # # db = "mysql"

# # # # # # # # # # # # # # # # # # # # # # # print(tech + db)

# # # # # # # # # # # # # # # # # # # # # # # newvar = tech +" "+ db 
# # # # # # # # # # # # # # # # # # # # # # # print(newvar)

# # # # # # # # # # # # # # # # # # # # # # # tech = "python"
# # # # # # # # # # # # # # # # # # # # # # # version = 3
# # # # # # # # # # # # # # # # # # # # # # # print(tech + version) # error

# # # # # # # # # # # # # # # # # # # # # # # tech = "python"
# # # # # # # # # # # # # # # # # # # # # # # version = 3
# # # # # # # # # # # # # # # # # # # # # # # print(tech + version) # error

# # # # # # # # # # # # # # # # # # # # # # tech = "python and machine learning"

# # # # # # # # # # # # # # # # # # # # # # # membership --> in , not in --> True / False 
# # # # # # # # # # # # # # # # # # # # # # # availability of chars , substrings

# # # # # # # # # # # # # # # # # # # # # # # print("p" in tech)
# # # # # # # # # # # # # # # # # # # # # # # print(" " in tech)
# # # # # # # # # # # # # # # # # # # # # # # print("hon" in tech)
# # # # # # # # # # # # # # # # # # # # # # # print("in" in tech)

# # # # # # # # # # # # # # # # # # # # # # # print("P" in tech)
# # # # # # # # # # # # # # # # # # # # # # # print("P" not in tech)
# # # # # # # # # # # # # # # # # # # # # # # print("phon" in tech)

# # # # # # # # # # # # # # # # # # # # # # # identity --> is , is not -- True / False

# # # # # # # # # # # # # # # # # # # # # # tech = "python"

# # # # # # # # # # # # # # # # # # # # # # # print("python" is tech)
# # # # # # # # # # # # # # # # # # # # # # # print(tech is "python")
# # # # # # # # # # # # # # # # # # # # # # # print("Python" is tech)
# # # # # # # # # # # # # # # # # # # # # # # print("pyt" is tech)

# # # # # # # # # # # # # # # # # # # # # # # concatenation , special strings 

# # # # # # # # # # # # # # # # # # # # # # # tech = "python"
# # # # # # # # # # # # # # # # # # # # # # # db = "mysql"
# # # # # # # # # # # # # # # # # # # # # # # newvar = tech +" "+ db 
# # # # # # # # # # # # # # # # # # # # # # # print(newvar)

# # # # # # # # # # # # # # # # # # # # # # tech = "python"
# # # # # # # # # # # # # # # # # # # # # # version = 3 


# # # # # # # # # # # # # # # # # # # # # # # XX print(tech + version) XX

# # # # # # # # # # # # # # # # # # # # # # # string literals 
# # # # # # # # # # # # # # # # # # # # # # # 	- static storages 
# # # # # # # # # # # # # # # # # # # # # # # 	%s --> str 
# # # # # # # # # # # # # # # # # # # # # # # 	%d --> int
# # # # # # # # # # # # # # # # # # # # # # # 	%f --> float 

# # # # # # # # # # # # # # # # # # # # # # # print("%s%d" %(tech,version))


# # # # # # # # # # # # # # # # # # # # # # # tech = "java"
# # # # # # # # # # # # # # # # # # # # # # # version = 8
# # # # # # # # # # # # # # # # # # # # # # # year = 2019 

# # # # # # # # # # # # # # # # # # # # # # # print("the version of python is 3.7 in 2019")
# # # # # # # # # # # # # # # # # # # # # # # print("the version of %s is %f in %d" %(tech,version,year))

# # # # # # # # # # # # # # # # # # # # # # name = "khan"
# # # # # # # # # # # # # # # # # # # # # # marks = 80

# # # # # # # # # # # # # # # # # # # # # # # khan has secured 80 marks
# # # # # # # # # # # # # # # # # # # # # # # print("%s has secured %d marks" %(name,marks))
# # # # # # # # # # # # # # # # # # # # # # # khan has secured 80 % marks
# # # # # # # # # # # # # # # # # # # # # # # print("%s has secured %d %% marks" %(name,marks))
# # # # # # # # # # # # # # # # # # # # # # # escape char --> % --> string literals

# # # # # # # # # # # # # # # # # # # # # # name = "khan"
# # # # # # # # # # # # # # # # # # # # # # marks = 80

# # # # # # # # # # # # # # # # # # # # # # # type casting 
# # # # # # # # # # # # # # # # # # # # # # # 	datatype1 --> datatype2 only allowed

# # # # # # # # # # # # # # # # # # # # # # # int --> float 
# # # # # # # # # # # # # # # # # # # # # # # 8 --> 8.0
# # # # # # # # # # # # # # # # # # # # # # # int --> str 
# # # # # # # # # # # # # # # # # # # # # # # 100 --> "100"
# # # # # # # # # # # # # # # # # # # # # # # str --> int 
# # # # # # # # # # # # # # # # # # # # # # # "500" --> 500 
# # # # # # # # # # # # # # # # # # # # # # # "abc" --> XXX 
# # # # # # # # # # # # # # # # # # # # # # # float --> int  XX 

# # # # # # # # # # # # # # # # # # # # # # # a = 100 
# # # # # # # # # # # # # # # # # # # # # # # print(type(a))

# # # # # # # # # # # # # # # # # # # # # # # a = str(a)
# # # # # # # # # # # # # # # # # # # # # # # print(type(a))

# # # # # # # # # # # # # # # # # # # # # # # name = "khan"
# # # # # # # # # # # # # # # # # # # # # # # marks = 80
# # # # # # # # # # # # # # # # # # # # # # # print(name+str(marks))

# # # # # # # # # # # # # # # # # # # # # # # tech = "python"
# # # # # # # # # # # # # # # # # # # # # # # version = 3 
# # # # # # # # # # # # # # # # # # # # # # # print(tech + str(version))

# # # # # # # # # # # # # # # # # # # # # # # >>> num = "100"
# # # # # # # # # # # # # # # # # # # # # # # >>> num 
# # # # # # # # # # # # # # # # # # # # # # # '100'
# # # # # # # # # # # # # # # # # # # # # # # >>> type(num)
# # # # # # # # # # # # # # # # # # # # # # # <class 'str'>
# # # # # # # # # # # # # # # # # # # # # # # >>> 
# # # # # # # # # # # # # # # # # # # # # # # >>> num = int(num)
# # # # # # # # # # # # # # # # # # # # # # # >>> num
# # # # # # # # # # # # # # # # # # # # # # # 100
# # # # # # # # # # # # # # # # # # # # # # # >>> type(num)
# # # # # # # # # # # # # # # # # # # # # # # <class 'int'>
# # # # # # # # # # # # # # # # # # # # # # # >>> 
# # # # # # # # # # # # # # # # # # # # # # # >>> 
# # # # # # # # # # # # # # # # # # # # # # # >>> num = "abc"
# # # # # # # # # # # # # # # # # # # # # # # >>> num 
# # # # # # # # # # # # # # # # # # # # # # # 'abc'

# # # # # # # # # # # # # # # # # # # # # # # special chars 
# # # # # # # # # # # # # # # # # # # # # # # \n --> new line 
# # # # # # # # # # # # # # # # # # # # # # # \t --> tab space

# # # # # # # # # # # # # # # # # # # # # # # para = "first second third fourth fifth python3"
# # # # # # # # # # # # # # # # # # # # # # # print(para)

# # # # # # # # # # # # # # # # # # # # # # # para = "first\nsecond\nthird\nfourth\nfifth\npython\t3"
# # # # # # # # # # # # # # # # # # # # # # # print(para)

# # # # # # # # # # # # # # # # # # # # # # # multi line string --> ''' ''' 
# # # # # # # # # # # # # # # # # # # # # # # book = '''first
# # # # # # # # # # # # # # # # # # # # # # # second 
# # # # # # # # # # # # # # # # # # # # # # # third
# # # # # # # # # # # # # # # # # # # # # # # fourth 
# # # # # # # # # # # # # # # # # # # # # # # fifth'''
# # # # # # # # # # # # # # # # # # # # # # # print(book)

# # # # # # # # # # # # # # # # # # # # # # # escape chars
# # # # # # # # # # # # # # # # # # # # # # # path = "c\desktop\python\newcode\technology\programs"
# # # # # # # # # # # # # # # # # # # # # # # print(path)

# # # # # # # # # # # # # # # # # # # # # # # path = "c\desktop\python\\newcode\\technology\programs"
# # # # # # # # # # # # # # # # # # # # # # # print(path)

# # # # # # # # # # # # # # # # # # # # # # # path = "c\\desktop\\python\\newcode\\technology\\programs"
# # # # # # # # # # # # # # # # # # # # # # # print(path)

# # # # # # # # # # # # # # # # # # # # # # # raw string
# # # # # # # # # # # # # # # # # # # # # # # path = r"c\desktop\python\newcode\technology\programs"
# # # # # # # # # # # # # # # # # # # # # # # print(path)

# # # # # # # # # # # # # # # # # # # # # # # comments 
# # # # # # # # # # # # # # # # # # # # # # # 	- non executable line of code 
# # # # # # # # # # # # # # # # # # # # # # # single line comment --> # 
# # # # # # # # # # # # # # # # # # # # # # # multi line comment --> ''' ''' 

# # # # # # # # # # # # # # # # # # # # # # # functions
# # # # # # # # # # # # # # # # # # # # # # # 	- attribute fecthing functions --> .
# # # # # # # # # # # # # # # # # # # # # # # 	- parameterised functions --> (<something>)
	
# # # # # # # # # # # # # # # # # # # # # # # string functions
# # # # # # # # # # # # # # # # # # # # # # # 	- case based 
# # # # # # # # # # # # # # # # # # # # # # # 	- check 
# # # # # # # # # # # # # # # # # # # # # # # 	- operational

# # # # # # # # # # # # # # # # # # # # # # # case based 
# # # # # # # # # # # # # # # # # # # # # # stmt = "Python and Machine learning"

# # # # # # # # # # # # # # # # # # # # # # # print(stmt)
# # # # # # # # # # # # # # # # # # # # # # # <strname>.lower() 
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.lower()) # all chars --> lower case 

# # # # # # # # # # # # # # # # # # # # # # # <strname>.upper() 
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.upper()) # all chars --> upper case 

# # # # # # # # # # # # # # # # # # # # # # # <strname>.swapcase() 
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.swapcase()) # lower --> upper , upper --> lower

# # # # # # # # # # # # # # # # # # # # # # # <strname>.capitalize()
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.capitalize()) # first char string --> upper

# # # # # # # # # # # # # # # # # # # # # # # <strname>.title() 
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.title()) # first char word -> upper

# # # # # # # # # # # # # # # # # # # # # # # check  --> True / False

# # # # # # # # # # # # # # # # # # # # # # stmt = "Python and Machine learning"

# # # # # # # # # # # # # # # # # # # # # # # <strname>.startswith(<char/word>)
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.startswith("P"))
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.startswith("Pyt"))
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.startswith("p")) 
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.startswith("Machine"))

# # # # # # # # # # # # # # # # # # # # # # # <strname>.endswith(<char/word>)
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.endswith("g"))
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.endswith("and"))
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.endswith("learning"))
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.endswith("and Machine learning"))

# # # # # # # # # # # # # # # # # # # # # # # <strname>.isdigit()
# # # # # # # # # # # # # # # # # # # # # # # n = "abc"
# # # # # # # # # # # # # # # # # # # # # # # print(n.isdigit())
# # # # # # # # # # # # # # # # # # # # # # # n = "100"
# # # # # # # # # # # # # # # # # # # # # # # print(n.isdigit())
# # # # # # # # # # # # # # # # # # # # # # # n = "100 "
# # # # # # # # # # # # # # # # # # # # # # # print(n.isdigit())
# # # # # # # # # # # # # # # # # # # # # # # n = 100 # int
# # # # # # # # # # # # # # # # # # # # # # # print(n.isdigit()) # error

# # # # # # # # # # # # # # # # # # # # # # # operational

# # # # # # # # # # # # # # # # # # # # # # stmt = "python and machine learning"

# # # # # # # # # # # # # # # # # # # # # # # len(<strname>)
# # # # # # # # # # # # # # # # # # # # # # # print(len(stmt)) # no of chars

# # # # # # # # # # # # # # # # # # # # # # # <strname>.index(<char/word>)
# # # # # # # # # # # # # # # # # # # # # # # 	- index value
# # # # # # # # # # # # # # # # # # # # # # # 	- char --> first occurence
# # # # # # # # # # # # # # # # # # # # # # # 	- word --> index value of first char
# # # # # # # # # # # # # # # # # # # # # # 	# - char not found --> error 

# # # # # # # # # # # # # # # # # # # # # # # print(stmt.index("p")) # 0 
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.index("python")) # 0
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.index("n")) # 5
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.index(" ")) # 6
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.index("z")) # error

# # # # # # # # # # # # # # # # # # # # # # stmt = "python and machine learning"
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.index("n")) # 0 1 2 3 4 5
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.index("n",6)) # 6 7 8 
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.index("n",9))
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.index("n",17))
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.index("n",24))

# # # # # # # # # # # # # # # # # # # # # # # print(stmt.index(" ")) # 6 
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.index(" ",7)) # 10
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.index(" ",11)) # 18
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.index(" ",19)) # error

# # # # # # # # # # # # # # # # # # # # # # # <strname>.find(<char/word>)
# # # # # # # # # # # # # # # # # # # # # # # 	- index value
# # # # # # # # # # # # # # # # # # # # # # # 	- char --> first occurence
# # # # # # # # # # # # # # # # # # # # # # # 	- word --> index value of first char
# # # # # # # # # # # # # # # # # # # # # # # 	- char not found --> -1 

# # # # # # # # # # # # # # # # # # # # # # stmt = "python and machine learning"
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.find("n")) 
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.find("n",6))
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.find("n",9))
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.find("n",17))
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.find("n",24))

# # # # # # # # # # # # # # # # # # # # # # # print(stmt.find("z")) # -1


# # # # # # # # # # # # # # # # # # # # # # stmt = "python and machine learning"

# # # # # # # # # # # # # # # # # # # # # # # <strname>.count(<char/word>)
# # # # # # # # # # # # # # # # # # # # # # # # 	- reps 
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.count("p"))
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.count("n"))
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.count(" "))
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.count("and"))
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.count("in"))
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.count("z"))

# # # # # # # # # # # # # # # # # # # # # # stmt = "python and machine learning"

# # # # # # # # # # # # # # # # # # # # # # # <strname>.replace(<old> , <new>)
# # # # # # # # # # # # # # # # # # # # # # # print(stmt)
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.replace("python" , "java"))
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.replace("n" , "m"))
# # # # # # # # # # # # # # # # # # # # # # # print(stmt)
# # # # # # # # # # # # # # # # # # # # # # # stmt = stmt.replace("python" , "java")
# # # # # # # # # # # # # # # # # # # # # # # print(stmt)
# # # # # # # # # # # # # # # # # # # # # # # print(stmt)
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.replace("n" , "m" , 7))

# # # # # # # # # # # # # # # # # # # # # # stmt = "python and machine learning"

# # # # # # # # # # # # # # # # # # # # # # # <strname>.split()
# # # # # # # # # # # # # # # # # # # # # # # 	- split string into words 
# # # # # # # # # # # # # # # # # # # # # # # 	- delimiter ---> " "
# # # # # # # # # # # # # # # # # # # # # # # 	- collection of words 

# # # # # # # # # # # # # # # # # # # # # # # print(stmt.split())
# # # # # # # # # # # # # # # # # # # # # # # <strname>.split(<delimiter>)
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.split("a"))
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.split("and"))

# # # # # # # # # # # # # # # # # # # # # # # words = stmt.split()
# # # # # # # # # # # # # # # # # # # # # # # print(words) # collection

# # # # # # # # # # # # # # # # # # # # # # # <delimiter>.join(<collection>)
# # # # # # # # # # # # # # # # # # # # # # # print(" ".join(words))
# # # # # # # # # # # # # # # # # # # # # # # print("-".join(words))

# # # # # # # # # # # # # # # # # # # # # # # emp = ["khan" , "python" , "lync"]
# # # # # # # # # # # # # # # # # # # # # # # print(" ".join(emp))
# # # # # # # # # # # # # # # # # # # # # # # print("-".join(emp))

# # # # # # # # # # # # # # # # # # # # # # # ascii 
# # # # # # # # # # # # # # # # # # # # # # # char --> asciivalue ord(<char>)
# # # # # # # # # # # # # # # # # # # # # # # asciivalue --> char chr(<asciivalue>)

# # # # # # # # # # # # # # # # # # # # # # # print(ord("b"))
# # # # # # # # # # # # # # # # # # # # # # # print(ord("B"))
# # # # # # # # # # # # # # # # # # # # # # # print(ord("z"))
# # # # # # # # # # # # # # # # # # # # # # # print(ord("P"))
# # # # # # # # # # # # # # # # # # # # # # # print(ord("abc")) # error
# # # # # # # # # # # # # # # # # # # # # # # print(ord("+"))

# # # # # # # # # # # # # # # # # # # # # # # "100" --> 100 
# # # # # # # # # # # # # # # # # # # # # # # "abc" --> 67 68 69 

# # # # # # # # # # # # # # # # # # # # # # # print(chr(100))
# # # # # # # # # # # # # # # # # # # # # # # print(chr(82))
# # # # # # # # # # # # # # # # # # # # # # # print(chr(69))
# # # # # # # # # # # # # # # # # # # # # # # print(chr(32))

# # # # # # # # # # # # # # # # # # # # # # # word = chr(100) + chr(68) + chr(90)
# # # # # # # # # # # # # # # # # # # # # # # print(word)

# # # # # # # # # # # # # # # # # # # # # # stmt = "   in india we live   "
# # # # # # # # # # # # # # # # # # # # # # # print(stmt)

# # # # # # # # # # # # # # # # # # # # # # # <strname>.strip()
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.strip())

# # # # # # # # # # # # # # # # # # # # # # # <strname>.lstrip()
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.lstrip())

# # # # # # # # # # # # # # # # # # # # # # # <strname>.rstrip()
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.rstrip())

# # # # # # # # # # # # # # # # # # # # # # stmt = "   in india we live   "
# # # # # # # # # # # # # # # # # # # # # # # print(stmt)

# # # # # # # # # # # # # # # # # # # # # # # print(stmt.strip("i"))
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.strip(" i"))
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.strip(" in")) # dia we live 
# # # # # # # # # # # # # # # # # # # # # # # print(stmt.strip(" live")) # n india w 

# # # # # # # # # # # # # # # # # # # # # # # n = "python"
# # # # # # # # # # # # # # # # # # # # # # # len(n) # 6 
# # # # # # # # # # # # # # # # # # # # # # # print(n.zfill(10))
# # # # # # # # # # # # # # # # # # # # # # # print(n.zfill(8))

# # # # # # # # # # # # # # # # # # # # # # # n = "324"
# # # # # # # # # # # # # # # # # # # # # # # print(n.zfill(6))

# # # # # # # # # # # # # # # # # # # # # # # n = 23 # int 
# # # # # # # # # # # # # # # # # # # # # # # print(str(n).zfill(6))

# # # # # # # # # # # # # # # # # # # # # # # inputs in python 
# # # # # # # # # # # # # # # # # # # # # # # 	- keyboard inputs 
# # # # # # # # # # # # # # # # # # # # # # # 	- CLI inputs 

# # # # # # # # # # # # # # # # # # # # # # keyboard inputs 
# # # # # # # # # # # # # # # # # # # # # # py3
# # # # # # # # # # # # # # # # # # # # # # user --> value --> input() --> code	
# # # # # # # # # # # # # # # # # # # # # # 10 --> input() --> "10"
# # # # # # # # # # # # # # # # # # # # # # 2.4 --> input() --> "2.4"
# # # # # # # # # # # # # # # # # # # # # # khan --> input() --> "khan"
# # # # # # # # # # # # # # # # # # # # # # int,float,str --> input() --> str  py3 

# # # # # # # # # # # # # # # # # # # # # # syntax
# # # # # # # # # # # # # # # # # # # # # # ------
# # # # # # # # # # # # # # # # # # # # # # <variable> = input("<dialouge>")

# # # # # # # # # # # # # # # # # # # # # # a = input("enter a value : ")
# # # # # # # # # # # # # # # # # # # # # # print(a)
# # # # # # # # # # # # # # # # # # # # # # print(type(a))

# # # # # # # # # # # # # # # # # # # # # # int,float,str --> input() --> int,float,str py2  
# # # # # # # # # # # # # # # # # # # # # # int,float,str --> raw_input() --> str py2  

# # # # # # # # # # # # # # # # # # # # # # a = input("enter a number : ") # 100
# # # # # # # # # # # # # # # # # # # # # # b = input("enter a number : ") # 20 
# # # # # # # # # # # # # # # # # # # # # # print(a+b) # 10020

# # # # # # # # # # # # # # # # # # # # # # a = int(input("enter a number : ")) # 100
# # # # # # # # # # # # # # # # # # # # # # b = int(input("enter a number : ")) # 20 
# # # # # # # # # # # # # # # # # # # # # # print(a+b) # 120

# # # # # # # # # # # # # # # # # # # # # # enter a statement 
# # # # # # # # # # # # # # # # # # # # # # "Python is easy"
# # # # # # # # # # # # # # # # # # # # # # enter a character
# # # # # # # # # # # # # # # # # # # # # # "P"

# # # # # # # # # # # # # # # # # # # # # # True 
# # # # # # # # # # # # # # # # # # # # # # index : 0 
# # # # # # # # # # # # # # # # # # # # # # count : 1 


# # # # # # # # # # # # # # # # # # # # # # enter a statement 
# # # # # # # # # # # # # # # # # # # # # # "Python is easy"
# # # # # # # # # # # # # # # # # # # # # # enter a character
# # # # # # # # # # # # # # # # # # # # # # "y"

# # # # # # # # # # # # # # # # # # # # # # True 
# # # # # # # # # # # # # # # # # # # # # # index : 1 
# # # # # # # # # # # # # # # # # # # # # # count : 2 

# # # # # # # # # # # # # # # # # # # # # # stmt = input("enter a statement : ")
# # # # # # # # # # # # # # # # # # # # # # char = input("enter a character : ")
# # # # # # # # # # # # # # # # # # # # # # print(char in stmt)
# # # # # # # # # # # # # # # # # # # # # # print(stmt.find(char)) # index
# # # # # # # # # # # # # # # # # # # # # # print(stmt.count(char)) # count


# # # # # # # # # # # # # # # # # # # # # # enter a statement 
# # # # # # # # # # # # # # # # # # # # # # "Python is easy"
# # # # # # # # # # # # # # # # # # # # # # enter a character
# # # # # # # # # # # # # # # # # # # # # # "y"
# # # # # # # # # # # # # # # # # # # # # # enter a new character
# # # # # # # # # # # # # # # # # # # # # # "z"

# # # # # # # # # # # # # # # # # # # # # # "Pzthon is easz"

# # # # # # # # # # # # # # # # # # # # # # enter a stmt 
# # # # # # # # # # # # # # # # # # # # # # python is an easy programming language
# # # # # # # # # # # # # # # # # # # # # # enter a delimiter
# # # # # # # # # # # # # # # # # # # # # # " "
# # # # # # # # # # # # # # # # # # # # # # enter a new delimiter
# # # # # # # # # # # # # # # # # # # # # # "-"
# # # # # # # # # # # # # # # # # # # # # # python-is-an-easy-programming-language


# # # # # # # # # # # # # # # # # # # # # # conditional statements
# # # # # # # # # # # # # # # # # # # # # # 	descisions 
# # # # # # # # # # # # # # # # # # # # # # 		condition --> True / False
# # # # # # # # # # # # # # # # # # # # # # 		min 1 statement

# # # # # # # # # # # # # # # # # # # # # # 		- condition
# # # # # # # # # # # # # # # # # # # # # # 		- statement

# # # # # # # # # # # # # # # # # # # # # # if -> 1 statement
# # # # # # # # # # # # # # # # # # # # # # if else -> 2 statements
# # # # # # # # # # # # # # # # # # # # # # if elif elif elif  . . else -> 5 statements

# # # # # # # # # # # # # # # # # # # # # # XXX switch case XXX 

# # # # # # # # # # # # # # # # # # # # # # syntax
# # # # # # # # # # # # # # # # # # # # # # ------

# # # # # # # # # # # # # # # # # # # # # # if <condition>:
# # # # # # # # # # # # # # # # # # # # # # 	<statements>

# # # # # # # # # # # # # # # # # # # # # # if <condition>:
# # # # # # # # # # # # # # # # # # # # # # 	<statements1>
# # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # 	<statements2>

# # # # # # # # # # # # # # # # # # # # # # if <condition1>:
# # # # # # # # # # # # # # # # # # # # # # 	<statements1>
# # # # # # # # # # # # # # # # # # # # # # elif <condition2>:
# # # # # # # # # # # # # # # # # # # # # # 	<statements2>
# # # # # # # # # # # # # # # # # # # # # # elif <condition3>:
# # # # # # # # # # # # # # # # # # # # # # 	<statements3>
# # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # 	<statements4>

# # # # # # # # # # # # # # # # # # # # # # True --> statements --> executed 
# # # # # # # # # # # # # # # # # # # # # # False --> exit 

# # # # # # # # # # # # # # # # # # # # # # true1 --> executed
# # # # # # # # # # # # # # # # # # # # # # true2 XX 
# # # # # # # # # # # # # # # # # # # # # # true3 XX 

# # # # # # # # # # # # # # # # # # # # # # a = 10
# # # # # # # # # # # # # # # # # # # # # # if a>5: 
# # # # # # # # # # # # # # # # # # # # # # 	print("hello")

# # # # # # # # # # # # # # # # # # # # # # a = 1
# # # # # # # # # # # # # # # # # # # # # # if a>5: 
# # # # # # # # # # # # # # # # # # # # # # 	print("hello")

# # # # # # # # # # # # # # # # # # # # # # a = 1
# # # # # # # # # # # # # # # # # # # # # # if a>5: 
# # # # # # # # # # # # # # # # # # # # # # 	print("hello")
# # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # 	print("bye")

# # # # # # # # # # # # # # # # # # # # # # a = 10 
# # # # # # # # # # # # # # # # # # # # # # if a>5:
# # # # # # # # # # # # # # # # # # # # # # 	print("gt5")
# # # # # # # # # # # # # # # # # # # # # # elif a>1:
# # # # # # # # # # # # # # # # # # # # # # 	print("gt1")
# # # # # # # # # # # # # # # # # # # # # # elif a>8:
# # # # # # # # # # # # # # # # # # # # # # 	print("gt8")
# # # # # # # # # # # # # # # # # # # # # # elif a>3:
# # # # # # # # # # # # # # # # # # # # # # 	print("gt3")
# # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # 	print("bye")

# # # # # # # # # # # # # # # # # # # # # # nested conditional statements

# # # # # # # # # # # # # # # # # # # # # # if <condition>:
# # # # # # # # # # # # # # # # # # # # # # 	if <condition1>:
# # # # # # # # # # # # # # # # # # # # # # 		<statements>
# # # # # # # # # # # # # # # # # # # # # # 	else:
# # # # # # # # # # # # # # # # # # # # # # 		<statements2>
# # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # 	<statements>

# # # # # # # # # # # # # # # # # # # # # # enter a number 
# # # # # # # # # # # # # # # # # # # # # # 10 
# # # # # # # # # # # # # # # # # # # # # # 10 is even 

# # # # # # # # # # # # # # # # # # # # # # enter a number 
# # # # # # # # # # # # # # # # # # # # # # 11
# # # # # # # # # # # # # # # # # # # # # # 11 is odd 

# # # # # # # # # # # # # # # # # # # # # # a = int(input("enter a number : ")) # str --> int
# # # # # # # # # # # # # # # # # # # # # # if a%2 == 0 :
# # # # # # # # # # # # # # # # # # # # # # 	print("%d is even "%(a))
# # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # 	print("%d is odd "%(a))


# # # # # # # # # # # # # # # # # # # # # # int str --> ???
# # # # # # # # # # # # # # # # # # # # # # 	int --> even odd ???
# # # # # # # # # # # # # # # # # # # # # # 	str --> enter only numbers 

# # # # # # # # # # # # # # # # # # # # # # a = input("enter a number : ")
# # # # # # # # # # # # # # # # # # # # # # if a.isdigit(): # int 
# # # # # # # # # # # # # # # # # # # # # # 	a = int(a)
# # # # # # # # # # # # # # # # # # # # # # 	if a%2==0:
# # # # # # # # # # # # # # # # # # # # # # 		print("%d is even "%(a))
# # # # # # # # # # # # # # # # # # # # # # 	else:
# # # # # # # # # # # # # # # # # # # # # # 		print("%d is odd "%(a))
# # # # # # # # # # # # # # # # # # # # # # else: # str 
# # # # # # # # # # # # # # # # # # # # # # 	print("enter only numbers ")


# # # # # # # # # # # # # # # # # # # # # # enter time in hh:mm:ssFF format 
# # # # # # # # # # # # # # # # # # # # # # 08:23:30am 
# # # # # # # # # # # # # # # # # # # # # # 08:23:30

# # # # # # # # # # # # # # # # # # # # # # enter time in hh:mm:ssFF format 
# # # # # # # # # # # # # # # # # # # # # # 08:23:30pm 
# # # # # # # # # # # # # # # # # # # # # # 20:23:30

# # # # # # # # # # # # # # # # # # # # # # enter time in hh:mm:ssFF format 
# # # # # # # # # # # # # # # # # # # # # # 8:23:30am 
# # # # # # # # # # # # # # # # # # # # # # enter in exact format


# # # # # # # # # # # # # # # # # # # # # # time = input("enter time in hh:mm:ssFF format ")
# # # # # # # # # # # # # # # # # # # # # # if len(time) == 10 :
# # # # # # # # # # # # # # # # # # # # # # 	hh = time[:2]
# # # # # # # # # # # # # # # # # # # # # # 	mm = time[3:5]
# # # # # # # # # # # # # # # # # # # # # # 	ss = time[6:8]
# # # # # # # # # # # # # # # # # # # # # # 	if time.endswith("am"):
# # # # # # # # # # # # # # # # # # # # # # 		print(time[0:8])
# # # # # # # # # # # # # # # # # # # # # # 	else:
# # # # # # # # # # # # # # # # # # # # # # 		hh = int(hh)
# # # # # # # # # # # # # # # # # # # # # # 		hh = hh + 12 
# # # # # # # # # # # # # # # # # # # # # # 		print("%d:%s"%(hh,time[3:8]))
# # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # 	print("enter in exact format")

# # # # # # # # # # # # # # # # # # # # # # inp --> 10 
# # # # # # # # # # # # # # # # # # # # # # 100 
# # # # # # # # # # # # # # # # # # # # # # inp --> python
# # # # # # # # # # # # # # # # # # # # # # 6
# # # # # # # # # # # # # # # # # # # # # # inp --> 2.3
# # # # # # # # # # # # # # # # # # # # # # 4 
# # # # # # # # # # # # # # # # # # # # # # 9
# # # # # # # # # # # # # # # # # # # # # # inp --> abc.defs 
# # # # # # # # # # # # # # # # # # # # # # 3
# # # # # # # # # # # # # # # # # # # # # # 4

# # # # # # # # # # # # # # # # # # # # # inp = input("enter an input : ")
# # # # # # # # # # # # # # # # # # # # # if inp.isdigit():
# # # # # # # # # # # # # # # # # # # # # 	print(int(inp)**2)
# # # # # # # # # # # # # # # # # # # # # elif ("." in inp):
# # # # # # # # # # # # # # # # # # # # # 	# 100.23
# # # # # # # # # # # # # # # # # # # # # 	i = inp.index(".") # 3
# # # # # # # # # # # # # # # # # # # # # 	f = inp[:i] # 100
# # # # # # # # # # # # # # # # # # # # # 	s = inp[i+1:] # 23 
# # # # # # # # # # # # # # # # # # # # # 	if f.isdigit() and s.isdigit():
# # # # # # # # # # # # # # # # # # # # # 		print(int(f)**2)
# # # # # # # # # # # # # # # # # # # # # 		print(int(s)**2)
# # # # # # # # # # # # # # # # # # # # # 	else:
# # # # # # # # # # # # # # # # # # # # # 		print(len(f))
# # # # # # # # # # # # # # # # # # # # # 		print(len(s))
# # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # 	print(len(inp))

# # # # # # # # # # # # # # # # # # # # # tasks strings , condsts --> ??

# # # # # # # # # # # # # # # # # # # # # condition statements









# # # # # # # # # # # # # # # # # # # # # 3 / 5 
# # # # # # # # # # # # # # # # # # # # # enter a number 
# # # # # # # # # # # # # # # # # # # # # 6 
# # # # # # # # # # # # # # # # # # # # # 6 is multiple of 3 only 

# # # # # # # # # # # # # # # # # # # # # enter a number 
# # # # # # # # # # # # # # # # # # # # # 10
# # # # # # # # # # # # # # # # # # # # # 10 is multiple of 5 only 

# # # # # # # # # # # # # # # # # # # # # enter a number 
# # # # # # # # # # # # # # # # # # # # # 15
# # # # # # # # # # # # # # # # # # # # # 15 is multiple of 3 and 5  

# # # # # # # # # # # # # # # # # # # # # enter a number 
# # # # # # # # # # # # # # # # # # # # # 11
# # # # # # # # # # # # # # # # # # # # # 11 is not a multiple of 3 and 5  

# # # # # # # # # # # # # # # # # # # # # enter a number 
# # # # # # # # # # # # # # # # # # # # # abc
# # # # # # # # # # # # # # # # # # # # # invalid input passed 

# # # # # # # # # # # # # # # # # # # # # a = input("enter a number : ")
# # # # # # # # # # # # # # # # # # # # # if a.isdigit():
# # # # # # # # # # # # # # # # # # # # # 	a = int(a)
# # # # # # # # # # # # # # # # # # # # # 	if a%3==0 and a%5 == 0:
# # # # # # # # # # # # # # # # # # # # # 		print("%d is multiple of 3 and 5 " %(a))
# # # # # # # # # # # # # # # # # # # # # 	elif a%5 == 0:
# # # # # # # # # # # # # # # # # # # # # 		print("%d is multiple of 5 only" %(a))
# # # # # # # # # # # # # # # # # # # # # 	elif a%3==0 :
# # # # # # # # # # # # # # # # # # # # # 		print("%d is multiple of 3 only " %(a))
# # # # # # # # # # # # # # # # # # # # # 	else:
# # # # # # # # # # # # # # # # # # # # # 		print("none")
# # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # 	print("invalid input passed")

# # # # # # # # # # # # # # # # # # # # looping structures 
# # # # # # # # # # # # # # # # # # # # ------------------
# # # # # # # # # # # # # # # # # # # # 	- iterations 
# # # # # # # # # # # # # # # # # # # # 	- repetitions 

# # # # # # # # # # # # # # # # # # # # 2 kinds 
# # # # # # # # # # # # # # # # # # # # 	- fininte  --> limit
# # # # # # # # # # # # # # # # # # # # 	- infinite --> XX limit XX 

# # # # # # # # # # # # # # # # # # # # for --> finite
# # # # # # # # # # # # # # # # # # # # 	- numbers 
# # # # # # # # # # # # # # # # # # # # 	- strings 
# # # # # # # # # # # # # # # # # # # # 	- collections

# # # # # # # # # # # # # # # # # # # # while --> infinite / finite
# # # # # # # # # # # # # # # # # # # # 	- numbers 

# # # # # # # # # # # # # # # # # # # # for --> numbers
# # # # # # # # # # # # # # # # # # # # range() 
# # # # # # # # # # # # # # # # # # # # 	range(<end>) 
# # # # # # # # # # # # # # # # # # # # 	range(5) # 0 1 2 3 4 

# # # # # # # # # # # # # # # # # # # # 	range(<start> , <end>)
# # # # # # # # # # # # # # # # # # # # 	range(2,7) # 2 3 4 5 6 

# # # # # # # # # # # # # # # # # # # # 	range(<start> , <end> , <step>)
# # # # # # # # # # # # # # # # # # # # 	range(1,10,2) # 1 3 5 7 9 

# # # # # # # # # # # # # # # # # # # # 	range(<start> , <end> , -<step>) # start > end
# # # # # # # # # # # # # # # # # # # # 	range(10,5,-1) # 10 9 8 7 6 


# # # # # # # # # # # # # # # # # # # # for / while
# # # # # # # # # # # # # # # # # # # # 	initialisation --> start point 
# # # # # # # # # # # # # # # # # # # # 	limit  --> end point 
# # # # # # # # # # # # # # # # # # # # 	inc / dec  --> step 
# # # # # # # # # # # # # # # # # # # # 	statements

# # # # # # # # # # # # # # # # # # # # syntax
# # # # # # # # # # # # # # # # # # # # ------
# # # # # # # # # # # # # # # # # # # # for <dummy> in range():
# # # # # # # # # # # # # # # # # # # # 	<statements>

# # # # # # # # # # # # # # # # # # # # for i in range(5):
# # # # # # # # # # # # # # # # # # # # 	print(i)

# # # # # # # # # # # # # # # # # # # # for i in range(5,10):
# # # # # # # # # # # # # # # # # # # # 	print(i)

# # # # # # # # # # # # # # # # # # # # for i in range(5,100,5):
# # # # # # # # # # # # # # # # # # # # 	print(i)


# # # # # # # # # # # # # # # # # # # # for i in range(10,3,-1):
# # # # # # # # # # # # # # # # # # # # 	print(i)

# # # # # # # # # # # # # # # # # # # # for i in range(100,3,-10):
# # # # # # # # # # # # # # # # # # # # 	print(i)

# # # # # # # # # # # # # # # # # # # # patterns

# # # # # # # # # # # # # # # # # # # # n --> 5 
# # # # # # # # # # # # # # # # # # # # *
# # # # # # # # # # # # # # # # # # # # **
# # # # # # # # # # # # # # # # # # # # ***
# # # # # # # # # # # # # # # # # # # # ****
# # # # # # # # # # # # # # # # # # # # *****

# # # # # # # # # # # # # # # # # # # # n = 8 
# # # # # # # # # # # # # # # # # # # # for i in range(1,n+1):
# # # # # # # # # # # # # # # # # # # # 	print("*" * i)

# # # # # # # # # # # # # # # # # # # # 1
# # # # # # # # # # # # # # # # # # # # 22
# # # # # # # # # # # # # # # # # # # # 333
# # # # # # # # # # # # # # # # # # # # 4444
# # # # # # # # # # # # # # # # # # # # 55555

# # # # # # # # # # # # # # # # # # # # n = 5 
# # # # # # # # # # # # # # # # # # # # for i in range(1,n+1):
# # # # # # # # # # # # # # # # # # # # 	print(str(i)*i)

# # # # # # # # # # # # # # # # # # # # enter a start number 10 
# # # # # # # # # # # # # # # # # # # # enter a end number 30 

# # # # # # # # # # # # # # # # # # # # 10 is even 
# # # # # # # # # # # # # # # # # # # # 11 is odd 
# # # # # # # # # # # # # # # # # # # # 12  is even 
# # # # # # # # # # # # # # # # # # # # .
# # # # # # # # # # # # # # # # # # # # .
# # # # # # # # # # # # # # # # # # # # .
# # # # # # # # # # # # # # # # # # # # .
# # # # # # # # # # # # # # # # # # # # 30 is even 

# # # # # # # # # # # # # # # # # # # # s = int(input("enter a start number"))
# # # # # # # # # # # # # # # # # # # # e = int(input("enter a end number"))
# # # # # # # # # # # # # # # # # # # # for i in range(s,e+1):
# # # # # # # # # # # # # # # # # # # # 	if i%2 == 0:
# # # # # # # # # # # # # # # # # # # # 		print("%d is even "%(i))
# # # # # # # # # # # # # # # # # # # # 	else:
# # # # # # # # # # # # # # # # # # # # 		print("%d is odd "%(i))

# # # # # # # # # # # # # # # # # # # # nested loops 
# # # # # # # # # # # # # # # # # # # # 	for numbers 

# # # # # # # # # # # # # # # # # # # # enter a number 
# # # # # # # # # # # # # # # # # # # # 12 

# # # # # # # # # # # # # # # # # # # # composite / prime
# # # # # # # # # # # # # # # # # # # # 12 -->  1 2 3 4 6 12 --> composite

# # # # # # # # # # # # # # # # # # # # 12%1 == 0 
# # # # # # # # # # # # # # # # # # # # 12%2 == 0 
# # # # # # # # # # # # # # # # # # # # .
# # # # # # # # # # # # # # # # # # # # .
# # # # # # # # # # # # # # # # # # # # .
# # # # # # # # # # # # # # # # # # # # 12%12 == 0
# # # # # # # # # # # # # # # # # # # # n = 12
# # # # # # # # # # # # # # # # # # # # c = 0  # 6
# # # # # # # # # # # # # # # # # # # # for i in range(1,n+1):
# # # # # # # # # # # # # # # # # # # # 	if n%i == 0 : # 1 2 3 4 6 12
# # # # # # # # # # # # # # # # # # # # 		c = c+1 
# # # # # # # # # # # # # # # # # # # # 		print(i)

# # # # # # # # # # # # # # # # # # # # if c >2:
# # # # # # # # # # # # # # # # # # # # 	print("composite")
# # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # 	print("prime")

# # # # # # # # # # # # # # # # # # # n = 5 
# # # # # # # # # # # # # # # # # # # # 1
# # # # # # # # # # # # # # # # # # # # 12
# # # # # # # # # # # # # # # # # # # # 123
# # # # # # # # # # # # # # # # # # # # 1234
# # # # # # # # # # # # # # # # # # # # 12345

# # # # # # # # # # # # # # # # # # # n = 5 

# # # # # # # # # # # # # # # # # # # # 1
# # # # # # # # # # # # # # # # # # # # for i in range(1,2):
# # # # # # # # # # # # # # # # # # # # 	print(i,end="")
# # # # # # # # # # # # # # # # # # # # print()
# # # # # # # # # # # # # # # # # # # # # 12
# # # # # # # # # # # # # # # # # # # # for i in range(1,3):
# # # # # # # # # # # # # # # # # # # # 	print(i,end="")
# # # # # # # # # # # # # # # # # # # # print()
# # # # # # # # # # # # # # # # # # # # # 123
# # # # # # # # # # # # # # # # # # # # for i in range(1,4):
# # # # # # # # # # # # # # # # # # # # 	print(i,end="")
# # # # # # # # # # # # # # # # # # # # print()
# # # # # # # # # # # # # # # # # # # # # 1234
# # # # # # # # # # # # # # # # # # # # for i in range(1,5):
# # # # # # # # # # # # # # # # # # # # 	print(i,end="")
# # # # # # # # # # # # # # # # # # # # print()
# # # # # # # # # # # # # # # # # # # # # 12345 
# # # # # # # # # # # # # # # # # # # # for i in range(1,6):
# # # # # # # # # # # # # # # # # # # # 	print(i,end="")
# # # # # # # # # # # # # # # # # # # # print()

# # # # # # # # # # # # # # # # # # # # for j in range(2,7): # 2 ,7
# # # # # # # # # # # # # # # # # # # # 	for i in range(1,j): # 2 3 4 5 6
# # # # # # # # # # # # # # # # # # # # 		print(i,end="")
# # # # # # # # # # # # # # # # # # # # 	print()
# # # # # # # # # # # # # # # # # # # # 1
# # # # # # # # # # # # # # # # # # # # 12
# # # # # # # # # # # # # # # # # # # # 123
# # # # # # # # # # # # # # # # # # # # 1234
# # # # # # # # # # # # # # # # # # # # 12345

# # # # # # # # # # # # # # # # # # # # n = 10
# # # # # # # # # # # # # # # # # # # # for j in range(1,n+1): # 2 ,7
# # # # # # # # # # # # # # # # # # # # 	for i in range(1,j+1): # 2 3 4 5 6
# # # # # # # # # # # # # # # # # # # # 		print(i,end="")
# # # # # # # # # # # # # # # # # # # # 	print()


# # # # # # # # # # # # # # # # # # # # for --> strings 

# # # # # # # # # # # # # # # # # # # tech = "python and machine learning"

# # # # # # # # # # # # # # # # # # # # for <dummy> in <strname>:
# # # # # # # # # # # # # # # # # # # # 	<statements>
# # # # # # # # # # # # # # # # # # # # for i in tech:
# # # # # # # # # # # # # # # # # # # # 	print(i)


# # # # # # # # # # # # # # # # # # # # tech = "python and MACHINE learning"
# # # # # # # # # # # # # # # # # # # # # o a a i e e a i 
# # # # # # # # # # # # # # # # # # # # vowels = "aeiou"

# # # # # # # # # # # # # # # # # # # # for char in tech:
# # # # # # # # # # # # # # # # # # # # 	if char.lower() in vowels:
# # # # # # # # # # # # # # # # # # # # 		print(char)


# # # # # # # # # # # # # # # # # # # tech = "python and machine learning"
# # # # # # # # # # # # # # # # # # # char = "m"

# # # # # # # # # # # # # # # # # # # # for i in tech:
# # # # # # # # # # # # # # # # # # # # 	if ord(i) > ord(char):
# # # # # # # # # # # # # # # # # # # # 		print(i)


# # # # # # # # # # # # # # # # # # # # tech = "python"
# # # # # # # # # # # # # # # # # # # # op = "" # qzuipo

# # # # # # # # # # # # # # # # # # # # for i in tech:
# # # # # # # # # # # # # # # # # # # # 	# print(chr(ord(i)+1))
# # # # # # # # # # # # # # # # # # # # 	op = op + chr(ord(i)+1)
# # # # # # # # # # # # # # # # # # # # print(op)

# # # # # # # # # # # # # # # # # # # tech = "python and machine learning"
# # # # # # # # # # # # # # # # # # # # h -- 2 
# # # # # # # # # # # # # # # # # # # # n -- 5
# # # # # # # # # # # # # # # # # # # #   -- 3 

# # # # # # # # # # # # # # # # # # # # for i in tech:
# # # # # # # # # # # # # # # # # # # # 	if tech.count(i) > 1:
# # # # # # # # # # # # # # # # # # # # 		print(i + " -- " +str(tech.count(i)))

# # # # # # # # # # # # # # # # # # # tech = "python and machine learning"
# # # # # # # # # # # # # # # # # # # char = "n"

# # # # # # # # # # # # # # # # # # # # for i in tech:
# # # # # # # # # # # # # # # # # # # # 	print(i + " -- " +str(tech.index(i)))

# # # # # # # # # # # # # # # # # # # # for i in range(len(tech)): # 0123456789
# # # # # # # # # # # # # # # # # # # # 	print(tech[i] + "  --  " + str(i) )

# # # # # # # # # # # # # # # # # # # # for i in range(len(tech)): # 0123456789
# # # # # # # # # # # # # # # # # # # # 	if tech[i] == char:
# # # # # # # # # # # # # # # # # # # # 		print(tech[i] + "  --  " + str(i) )

# # # # # # # # # # # # # # # # # # # # while , control statements 

# # # # # # # # # # # # # # # # # # # while
# # # # # # # # # # # # # # # # # # # 	- finite , infinite
# # # # # # # # # # # # # # # # # # # 	- numbers only 

# # # # # # # # # # # # # # # # # # # for --> range() --> initialisation , limit , inc/dec 
# # # # # # # # # # # # # # # # # # # while --> explicitly  

# # # # # # # # # # # # # # # # # # # syntax
# # # # # # # # # # # # # # # # # # # ------
# # # # # # # # # # # # # # # # # # # <initialisation>
# # # # # # # # # # # # # # # # # # # while <condition>:
# # # # # # # # # # # # # # # # # # # 	<statements>
# # # # # # # # # # # # # # # # # # # 	<inc/dec>

# # # # # # # # # # # # # # # # # # # a = 1 # initialisation 
# # # # # # # # # # # # # # # # # # # while a<=10: # condition
# # # # # # # # # # # # # # # # # # # 	print(a) # statement
# # # # # # # # # # # # # # # # # # # 	a = a+1 # increment 

# # # # # # # # # # # # # # # # # # # a = 10 # initialisation 
# # # # # # # # # # # # # # # # # # # while a>0: # condition
# # # # # # # # # # # # # # # # # # # 	print(a) # statement
# # # # # # # # # # # # # # # # # # # 	a = a-1 # decrement 

# # # # # # # # # # # # # # # # # # # a = 10 
# # # # # # # # # # # # # # # # # # # while a<20: # always T 
# # # # # # # # # # # # # # # # # # # 	print(a) # 10 
# # # # # # # # # # # # # # # # # # # XX inc / dec 

# # # # # # # # # # # # # # # # # # # while True:
# # # # # # # # # # # # # # # # # # # 	print("hello")




# # # # # # # # # # # # # # # # # # # tech = "python and machine learning"
# # # # # # # # # # # # # # # # # # # char = " "

# # # # # # # # # # # # # # # # # # # ind = -1
# # # # # # # # # # # # # # # # # # # for i in tech:
# # # # # # # # # # # # # # # # # # # 	if i == char:
# # # # # # # # # # # # # # # # # # # 		# print(tech.index(char))
# # # # # # # # # # # # # # # # # # # 		ind = tech.index(char,ind+1) # 0 , 6 , 9 ,17, 24
# # # # # # # # # # # # # # # # # # # 		print(ind) # 5 

# # # # # # # # # # # # # # # # # # # while --> ???

# # # # # # # # # # # # # # # # # # # control statements
# # # # # # # # # # # # # # # # # # # 	pass
# # # # # # # # # # # # # # # # # # # 		no statements
# # # # # # # # # # # # # # # # # # # 		skip execution
# # # # # # # # # # # # # # # # # # # 		XX implementation XX 
# # # # # # # # # # # # # # # # # # # 		ifelse , for , functions , classes . . . . . 
# # # # # # # # # # # # # # # # # # 	# break 
# # # # # # # # # # # # # # # # # # 	# 	stop execution
# # # # # # # # # # # # # # # # # # 	# 	condition --> true 
# # # # # # # # # # # # # # # # # # 	# 	loops 
# # # # # # # # # # # # # # # # # # 	# 	exit the loop 
# # # # # # # # # # # # # # # # # # 	# continue
# # # # # # # # # # # # # # # # # # 	# 	pause execution
# # # # # # # # # # # # # # # # # # 	# 	condition --> True 
# # # # # # # # # # # # # # # # # # 	# 	loops 

# # # # # # # # # # # # # # # # # # # a = 10
# # # # # # # # # # # # # # # # # # # if a > 5 :
# # # # # # # # # # # # # # # # # # # 	pass
# # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # 	print("bye")

# # # # # # # # # # # # # # # # # # # for i in range(10):
# # # # # # # # # # # # # # # # # # # 	pass

# # # # # # # # # # # # # # # # # # # for i in range(1,10): # 123456789
# # # # # # # # # # # # # # # # # # # 	if i==5: # 1 2 3 4 5 
# # # # # # # # # # # # # # # # # # # 		break   # --> exit
# # # # # # # # # # # # # # # # # # # 	print(i) # 1 2 3 4 

# # # # # # # # # # # # # # # # # # # for i in range(1,10): # 123456789
# # # # # # # # # # # # # # # # # # # 	print(i) # 1 2 3 4 5
# # # # # # # # # # # # # # # # # # # 	if i==5: # 1 2 3 4 5 
# # # # # # # # # # # # # # # # # # # 		break # --> exit
	
# # # # # # # # # # # # # # # # # # tech = "python and machine learning"

# # # # # # # # # # # # # # # # # # # for i in tech:
# # # # # # # # # # # # # # # # # # # 	if i == "n":
# # # # # # # # # # # # # # # # # # # 		break
# # # # # # # # # # # # # # # # # # # 	print(i) # p y t h o 

# # # # # # # # # # # # # # # # # # # for i in tech:
# # # # # # # # # # # # # # # # # # # 	print(i) # p y t h o n
# # # # # # # # # # # # # # # # # # # 	if i == "n":
# # # # # # # # # # # # # # # # # # # 		break

# # # # # # # # # # # # # # # # # # # for i in range(1,10): 
# # # # # # # # # # # # # # # # # # # 	if i == 5: # 1 2 3 4 5 6
# # # # # # # # # # # # # # # # # # # 		continue # 5
# # # # # # # # # # # # # # # # # # # 	print(i) # 12346789

# # # # # # # # # # # # # # # # # # # tech = "python and machine learning"
# # # # # # # # # # # # # # # # # # # for i in tech:
# # # # # # # # # # # # # # # # # # # 	if i == "n":
# # # # # # # # # # # # # # # # # # # 		continue
# # # # # # # # # # # # # # # # # # # 	print(i)

# # # # # # # # # # # # # # # # # # module - 2 collections

# # # # # # # # # # # # # # # # # # collections
# # # # # # # # # # # # # # # # # # 	lists 
# # # # # # # # # # # # # # # # # # 	tuples 
# # # # # # # # # # # # # # # # # # 	dictionaries
# # # # # # # # # # # # # # # # # # 	sets 
# # # # # # # # # # # # # # # # # # 	frozensets
# # # # # # # # # # # # # # # # # # sequences 
# # # # # # # # # # # # # # # # # # 	lists
# # # # # # # # # # # # # # # # # # 	tuples 

# # # # # # # # # # # # # # # # # # Features
# # # # # # # # # # # # # # # # # # --------
# # # # # # # # # # # # # # # # # # heterogeneous 
# # # # # # # # # # # # # # # # # # order - 1Xn 
# # # # # # # # # # # # # # # # # # each --> class 
# # # # # # # # # # # # # # # # # # nested 
# # # # # # # # # # # # # # # # # # stacks 

# # # # # # # # # # # # # # # # # # storage architecture 
# # # # # # # # # # # # # # # # # # 	stack 
# # # # # # # # # # # # # # # # # # 	queue 

# # # # # # # # # # # # # # # # # # list 
# # # # # # # # # # # # # # # # # # 	- mutable 
# # # # # # # # # # # # # # # # # # 	- <class list>
# # # # # # # # # # # # # # # # # # 	- sequence --> ordered
# # # # # # # # # # # # # # # # # # 	- i s c i 
# # # # # # # # # # # # # # # # # 	# - repetitions

# # # # # # # # # # # # # # # # # # syntax
# # # # # # # # # # # # # # # # # # ------
# # # # # # # # # # # # # # # # # # <listname> = [<ele1>,<ele2>,<ele3>,<ele4>,<ele5>]

# # # # # # # # # # # # # # # # # # nums = [10,20,30,40,50,90]
# # # # # # # # # # # # # # # # # # print(nums)
# # # # # # # # # # # # # # # # # # print(type(nums))

# # # # # # # # # # # # # # # # # # l1 = ["python",34,5.6,"mysql","java","hyd",10,34,34]
# # # # # # # # # # # # # # # # # # print(l1)

# # # # # # # # # # # # # # # # # # <listname>[<index>]
# # # # # # # # # # # # # # # # # # print(l1[3])
# # # # # # # # # # # # # # # # # # print(l1[-2])
# # # # # # # # # # # # # # # # # # print(l1[0])

# # # # # # # # # # # # # # # # # # <listname>[<sindex>:<eindex>]
# # # # # # # # # # # # # # # # # # print(l1[2:5])
# # # # # # # # # # # # # # # # # # print(l1[7:3:-1])

# # # # # # # # # # # # # # # # # # l1 = [1,3,3,42,4,5,46,2] # 8
# # # # # # # # # # # # # # # # # # l2 = [34,5.6,"mysql","java","hyd"] # 5

# # # # # # # # # # # # # # # # # # l3 = l1 + l2 # 13 
# # # # # # # # # # # # # # # # # # print(l3)
# # # # # # # # # # # # # # # # # # 26 

# # # # # # # # # # # # # # # # # # l1 = [1,3,3,42,4,5,46,2] # 8
# # # # # # # # # # # # # # # # # # l2 = [34,5.6,"mysql","java","hyd"] # 5
# # # # # # # # # # # # # # # # # # <list1>.extend(<list2>)
# # # # # # # # # # # # # # # # # # l1.extend(l2)
# # # # # # # # # # # # # # # # # # print(l1) 
# # # # # # # # # # # # # # # # # # print(l2)
# # # # # # # # # # # # # # # # # # 13 + 5 = 18 

# # # # # # # # # # # # # # # # # l1 = ["python",34,5.6,"mysql","java","hyd",10,34,34]

# # # # # # # # # # # # # # # # # # for i in l1:
# # # # # # # # # # # # # # # # # # 	print(i)

# # # # # # # # # # # # # # # # # # print(len(l1))
# # # # # # # # # # # # # # # # # # print(l1.index(5.6))
# # # # # # # # # # # # # # # # # # print(l1.count(34))

# # # # # # # # # # # # # # # # # # adding elements 
# # # # # # # # # # # # # # # # # print(l1)

# # # # # # # # # # # # # # # # # # <listname>.append(<element>)
# # # # # # # # # # # # # # # # # # l1.append(100)
# # # # # # # # # # # # # # # # # # print(l1)
# # # # # # # # # # # # # # # # # # l1.append("cpp")
# # # # # # # # # # # # # # # # # # print(l1)
# # # # # # # # # # # # # # # # # # l1.append([100,200])
# # # # # # # # # # # # # # # # # # print(l1)
# # # # # # # # # # # # # # # # # # <listname>.insert(<index>,<element>)
# # # # # # # # # # # # # # # # # # l1.insert(3,"cpp")
# # # # # # # # # # # # # # # # # # print(l1)

# # # # # # # # # # # # # # # # # # removing elements 
# # # # # # # # # # # # # # # # # # del <listname>[<index>]
# # # # # # # # # # # # # # # # # # del l1[3]
# # # # # # # # # # # # # # # # # # print(l1)

# # # # # # # # # # # # # # # # # # <listname>.pop()
# # # # # # # # # # # # # # # # # # l1.pop()
# # # # # # # # # # # # # # # # # # print(l1)

# # # # # # # # # # # # # # # # # # <listname>.remove(<element>)
# # # # # # # # # # # # # # # # # # l1.remove("python")
# # # # # # # # # # # # # # # # # # print(l1)
# # # # # # # # # # # # # # # # # # l1.remove(34)
# # # # # # # # # # # # # # # # # # print(l1)

# # # # # # # # # # # # # # # # # # for i in range(l1.count(34)):
# # # # # # # # # # # # # # # # # # 	l1.remove(34)
# # # # # # # # # # # # # # # # # # print(l1)

# # # # # # # # # # # # # # # # # # <listname>[<index>] = <newvalue>
# # # # # # # # # # # # # # # # # # l1[3] = "oracle"
# # # # # # # # # # # # # # # # # # print(l1)

# # # # # # # # # # # # # # # # # # l1[2:6] = 100,200,300,400
# # # # # # # # # # # # # # # # # # print(l1)

# # # # # # # # # # # # # # # # # # l1[2:6] = [100,200,300,400]
# # # # # # # # # # # # # # # # # # print(l1)

# # # # # # # # # # # # # # # # l1 = ["python",[30,5.6,"mysql"],"java","hyd",[10,3,4],34]
# # # # # # # # # # # # # # # # # print(l1[0]) # python
# # # # # # # # # # # # # # # # # print(l1[3]) # hyd
# # # # # # # # # # # # # # # # # print(l1[1])
# # # # # # # # # # # # # # # # # print(l1[1][2])
# # # # # # # # # # # # # # # # # print(l1[4][0]) 

# # # # # # # # # # # # # # # # # l2 = [[[[[[10]]]]]]
# # # # # # # # # # # # # # # # # print(l2[0][0][0][0][0][0])

# # # # # # # # # # # # # # # # # tasks lists

# # # # # # # # # # # # # # # # l1 = ["python",[30,5.6,"mysql"],"java","hyd",[10,3,4],34]
# # # # # # # # # # # # # # # # # print(l1)
# # # # # # # # # # # # # # # # # print(type(l1))
# # # # # # # # # # # # # # # # # print(l1[0])
# # # # # # # # # # # # # # # # # print(l1[5])

# # # # # # # # # # # # # # # # # print(l1[1][0])
# # # # # # # # # # # # # # # # # print(l1[4][2])

# # # # # # # # # # # # # # # # # print(l1)
# # # # # # # # # # # # # # # # # l1[3] = "cPP"
# # # # # # # # # # # # # # # # # print(l1)

# # # # # # # # # # # # # # # # # print(l1)
# # # # # # # # # # # # # # # # # del l1[2]
# # # # # # # # # # # # # # # # # print(l1)

# # # # # # # # # # # # # # # # # print(l1)
# # # # # # # # # # # # # # # # # l1.append(100)
# # # # # # # # # # # # # # # # # print(l1)
# # # # # # # # # # # # # # # # # l1.append("c++")
# # # # # # # # # # # # # # # # # print(l1)

# # # # # # # # # # # # # # # # # print(l1)
# # # # # # # # # # # # # # # # # l1.pop()
# # # # # # # # # # # # # # # # # print(l1)
# # # # # # # # # # # # # # # # # l1.pop()
# # # # # # # # # # # # # # # # # print(l1)
# # # # # # # # # # # # # # # # # l1.pop()
# # # # # # # # # # # # # # # # # print(l1)

# # # # # # # # # # # # # # # # # enter a number 
# # # # # # # # # # # # # # # # # 10
# # # # # # # # # # # # # # # # # [1,2,3,4, . . . . 10]

# # # # # # # # # # # # # # # # # n = 10 
# # # # # # # # # # # # # # # # # op = []

# # # # # # # # # # # # # # # # # for i in range(1,n+1): # 123...10
# # # # # # # # # # # # # # # # # 	op.append(i)
# # # # # # # # # # # # # # # # # print(op)

# # # # # # # # # # # # # # # # l1 = ["python",30,5,6,"mysql","java","hyd",10,3,4,34]
# # # # # # # # # # # # # # # # # ints -->  [30,5,6,10,3,4,34]
# # # # # # # # # # # # # # # # # strs -->  ["python","mysql","java","hyd"]

# # # # # # # # # # # # # # # # # ints = []
# # # # # # # # # # # # # # # # # strs = []
# # # # # # # # # # # # # # # # # for i in l1:
# # # # # # # # # # # # # # # # # 	if type(i) is int:
# # # # # # # # # # # # # # # # # 		ints.append(i)
# # # # # # # # # # # # # # # # # 	else:
# # # # # # # # # # # # # # # # # 		strs.append(i)
# # # # # # # # # # # # # # # # # print(ints)
# # # # # # # # # # # # # # # # # print(strs)


# # # # # # # # # # # # # # # # l1 = ["python",30,5,6,"mysql","java","hyd",10,3,4,5]
# # # # # # # # # # # # # # # # # op --> [6,900,25,36,5,4,3,100,9,16,25]
# # # # # # # # # # # # # # # # # op = []

# # # # # # # # # # # # # # # # # for i in l1:
# # # # # # # # # # # # # # # # # 	if type(i) is int:
# # # # # # # # # # # # # # # # # 		op.append(i**2)
# # # # # # # # # # # # # # # # # 	else:
# # # # # # # # # # # # # # # # # 		op.append(len(i))
# # # # # # # # # # # # # # # # # print(op)


# # # # # # # # # # # # # # # # l1 = ["python",[30,5.6,"mysql"],"java","hyd",[10,3,4],34] # int str list
# # # # # # # # # # # # # # # # # op --> ["python",30,5,6,"mysql","java","hyd",10,3,4,34] # int str 
# # # # # # # # # # # # # # # # # op = []

# # # # # # # # # # # # # # # # # for i in l1:
# # # # # # # # # # # # # # # # # 	if type(i) is str or type(i) is int:
# # # # # # # # # # # # # # # # # 		op.append(i)
# # # # # # # # # # # # # # # # # 	else:
# # # # # # # # # # # # # # # # # 		for j in i:
# # # # # # # # # # # # # # # # # 			op.append(j)

# # # # # # # # # # # # # # # # # print(op)

# # # # # # # # # # # # # # # # l1 = ['python', 30, 5.6, 'mysql', 'java', 'hyd', 10, 3, 4, 34]
# # # # # # # # # # # # # # # # # op --> [[p,y,t,h,o,n] , [m,y,s,q,l] , [j,a,v,a] , [h,y,d]]
# # # # # # # # # # # # # # # # op = []

# # # # # # # # # # # # # # # # for i in l1:
# # # # # # # # # # # # # # # # 	if type(i) is str:
# # # # # # # # # # # # # # # # 		chars = []
# # # # # # # # # # # # # # # # 		for j in i:
# # # # # # # # # # # # # # # # 			chars.append(j)
# # # # # # # # # # # # # # # # 		op.append(chars)

# # # # # # # # # # # # # # # # # print(op)


# # # # # # # # # # # # # # # # l1 = [10,20,30,40,50]
# # # # # # # # # # # # # # # # l2 = [34,5,35,345,3]

# # # # # # # # # # # # # # # # # # op = [[10,34],[20,5] . . . .[50,3]]
# # # # # # # # # # # # # # # # op = []

# # # # # # # # # # # # # # # # for i in range(len(l1)): # 01234
# # # # # # # # # # # # # # # # 	d = []
# # # # # # # # # # # # # # # # 	d.append(l1[i])
# # # # # # # # # # # # # # # # 	d.append(l2[i])
# # # # # # # # # # # # # # # # 	op.append(d)
# # # # # # # # # # # # # # # # print(op)


# # # # # # # # # # # # # # # l2 = [34,5,35,345,3]

# # # # # # # # # # # # # # # # <listname>.sort() 
# # # # # # # # # # # # # # # # l2.sort()
# # # # # # # # # # # # # # # # print(l2)
# # # # # # # # # # # # # # # # l2.sort(reverse = True)
# # # # # # # # # # # # # # # # print(l2)

# # # # # # # # # # # # # # # # l1 = ["python","mysql","java","hyd"]
# # # # # # # # # # # # # # # # l1.sort()
# # # # # # # # # # # # # # # # print(l1)


# # # # # # # # # # # # # # # # list comprehensions , tuples 

# # # # # # # # # # # # # # # n = 10 

# # # # # # # # # # # # # # # # nums = [] # initialisation
# # # # # # # # # # # # # # # # for i in range(1,n+1): # iteration
# # # # # # # # # # # # # # # # 	nums.append(i) # assignment
# # # # # # # # # # # # # # # # print(nums)

# # # # # # # # # # # # # # # # evens = [] # initialisation
# # # # # # # # # # # # # # # # for i in range(1,n+1): # iteration 
# # # # # # # # # # # # # # # # 	if i%2 == 0: # condition
# # # # # # # # # # # # # # # # 		evens.append(i) # assignment
# # # # # # # # # # # # # # # # print(evens)

# # # # # # # # # # # # # # # # sqs = [] # initialisation
# # # # # # # # # # # # # # # # for i in range(1,n+1): # iteration
# # # # # # # # # # # # # # # # 	sqs.append(i**2) # operation + assignment
# # # # # # # # # # # # # # # # print(sqs)

# # # # # # # # # # # # # # # # evensqs = [] # initialisation
# # # # # # # # # # # # # # # # for i in range(1,n+1): # iteration
# # # # # # # # # # # # # # # # 	if i%2==0: # condition
# # # # # # # # # # # # # # # # 		evensqs.append(i**2) # operation + assignment
# # # # # # # # # # # # # # # # print(evensqs)

# # # # # # # # # # # # # # # # initialisation , iteration , operation , condition , assignment

# # # # # # # # # # # # # # # # <listname> = [<assignment> <iteration>]
# # # # # # # # # # # # # # # # nums = [i for i in range(1,n+1)] 
# # # # # # # # # # # # # # # # print(nums)

# # # # # # # # # # # # # # # # <listname> = [<assignment> <iteration> <condition>]
# # # # # # # # # # # # # # # # evens = [i for i in range(1,n+1) if i%2==0]
# # # # # # # # # # # # # # # # print(evens)

# # # # # # # # # # # # # # # # <listname> = [<operation+assignment> <iteration> ]
# # # # # # # # # # # # # # # # sqs = [i**2 for i in range(1,n+1)]
# # # # # # # # # # # # # # # # print(sqs)

# # # # # # # # # # # # # # # # <listname> = [<operation+assignment> <iteration> <condition>]
# # # # # # # # # # # # # # # # evensqs = [i**2 for i in range(1,n+1) if i%2==0]
# # # # # # # # # # # # # # # # print(evensqs)

# # # # # # # # # # # # # # # # stmt = "python and Machine learning"
# # # # # # # # # # # # # # # # [6,3,7,8]

# # # # # # # # # # # # # # # # word = "python"
# # # # # # # # # # # # # # # # [-- ,-- ,--,--,--,--]

# # # # # # # # # # # # # # # tuples 
# # # # # # # # # # # # # # # 	- immutable
# # # # # # # # # # # # # # # 	- class tuple 
# # # # # # # # # # # # # # # 	- heterogeneous
# # # # # # # # # # # # # # # 	- repetitions
# # # # # # # # # # # # # # # 	- stakcs LIFO
# # # # # # # # # # # # # # # 	- sequence --> ordered

# # # # # # # # # # # # # # # syntax
# # # # # # # # # # # # # # # ------
# # # # # # # # # # # # # # # <tuplename> = (<ele1>,<ele2>,<ele3>,<ele4>,<ele5>)

# # # # # # # # # # # # # # nums = (23,34,5,46,57,659,32,432)
# # # # # # # # # # # # # # # print(nums)
# # # # # # # # # # # # # # # print(type(nums))

# # # # # # # # # # # # # # # print(nums[3])
# # # # # # # # # # # # # # # print(nums[-2])
# # # # # # # # # # # # # # # print(nums[5])

# # # # # # # # # # # # # # # print(nums[0:3])
# # # # # # # # # # # # # # # print(nums[4:7])

# # # # # # # # # # # # # # # nums[3] = 100 
# # # # # # # # # # # # # # # print(nums)

# # # # # # # # # # # # # # # del nums[4]
# # # # # # # # # # # # # # # print(nums)

# # # # # # # # # # # # # # # print(len(nums))
# # # # # # # # # # # # # # # print(nums.index(32))
# # # # # # # # # # # # # # # print(nums.count(32))

# # # # # # # # # # # # # # # XX append insert pop remove XX 

# # # # # # # # # # # # # # nums = (23,34,5,46,57,659,32,432)
# # # # # # # # # # # # # # print(nums)
# # # # # # # # # # # # # # # print(type(nums))
# # # # # # # # # # # # # # # tuple --> list --> modify --> list --> tuple 

# # # # # # # # # # # # # # nums = list(nums)
# # # # # # # # # # # # # # # print(nums)
# # # # # # # # # # # # # # # print(type(nums))

# # # # # # # # # # # # # # nums[3] = 100 
# # # # # # # # # # # # # # # print(nums)
# # # # # # # # # # # # # # # print(type(nums))

# # # # # # # # # # # # # # nums = tuple(nums)
# # # # # # # # # # # # # # print(nums)
# # # # # # # # # # # # # # # print(type(nums))

# # # # # # # # # # # # # # t1 = ("python",[30,5],6,"mysql",("java","hyd",10,3),4,34)
# # # # # # # # # # # # # # op --> ("python",30,5,6,"mysql","java","hyd",10,3,4,34)
# # # # # # # # # # # # # # op = []
# # # # # # # # # # # # # # for i in t1:
# # # # # # # # # # # # # # 	if type(i) is str or type(i) is int:
# # # # # # # # # # # # # # 		op.append(i)
# # # # # # # # # # # # # # 	else:
# # # # # # # # # # # # # # 		for j in i:
# # # # # # # # # # # # # # 			op.append(j)
# # # # # # # # # # # # # # print(tuple(op))

# # # # # # # # # # # # # dictionaries 
# # # # # # # # # # # # # 	- key value pairs 
# # # # # # # # # # # # # 	- collection
# # # # # # # # # # # # # 	- XX sequence XX ordered XX  
# # # # # # # # # # # # # 	- random , arbitary 
# # # # # # # # # # # # # 	- key ==> index , value ==> element 
# # # # # # # # # # # # # 	- mutable
# # # # # # # # # # # # # 	- class dict 

# # # # # # # # # # # # # syntax 

# # # # # # # # # # # # # <dictname> = {k1:v1 , k2:v2 , k3:v3 , k4:v4}
# # # # # # # # # # # # # keys --> k1 k2 k3 k4 
# # # # # # # # # # # # # 	immutable
# # # # # # # # # # # # # 	unique 
# # # # # # # # # # # # # values --> v1 v2 v3 v4 
# # # # # # # # # # # # # 	any datatype
# # # # # # # # # # # # # 	repeated 

# # # # # # # # # # # # tech={"python":3.7 ,"java":8 ,5:25 ,"c":"cpp"}
# # # # # # # # # # # # # keys --> python , java , 5 , c 
# # # # # # # # # # # # # values --> 3.7 8 25 cpp
# # # # # # # # # # # # # print(tech)
# # # # # # # # # # # # # print(tech[5])
# # # # # # # # # # # # # print(tech["python"])
# # # # # # # # # # # # # print(tech)
# # # # # # # # # # # # # tech["python"] = 20 
# # # # # # # # # # # # # print(tech)

# # # # # # # # # # # # # print(tech)
# # # # # # # # # # # # # tech[5] = 500
# # # # # # # # # # # # # print(tech)

# # # # # # # # # # # # # print(tech)
# # # # # # # # # # # # # tech[7] = 100
# # # # # # # # # # # # # print(tech)

# # # # # # # # # # # # tech={"python":3.7 ,"java":8 ,5:25 ,"c":"cpp"}

# # # # # # # # # # # # # for i in tech:
# # # # # # # # # # # # # 	print(i)

# # # # # # # # # # # # # for i in tech.keys():
# # # # # # # # # # # # # 	print(i)

# # # # # # # # # # # # # for i in tech.values():
# # # # # # # # # # # # # 	print(i)

# # # # # # # # # # # # # for i in tech.items():
# # # # # # # # # # # # # 	print(i)


# # # # # # # # # # # # # tech={"python":3.7 ,"java":8 ,5:25 ,"c":"cpp"}
# # # # # # # # # # # # # print(tech)

# # # # # # # # # # # # # del tech[5]
# # # # # # # # # # # # # print(tech)

# # # # # # # # # # # # # tech.popitem() 
# # # # # # # # # # # # # print(tech)

# # # # # # # # # # # # # tech.pop(5) 
# # # # # # # # # # # # # print(tech)

# # # # # # # # # # # # # nums = {7:60,1:10,3:20}
# # # # # # # # # # # # # nums.popitem()
# # # # # # # # # # # # # print(nums)

# # # # # # # # # # # # # n = 10 
# # # # # # # # # # # # # d = {}

# # # # # # # # # # # # # for i in range(1,n+1):
# # # # # # # # # # # # # 	d[i] = i**2
# # # # # # # # # # # # # print(d)

# # # # # # # # # # # # # dictionary comprehensions
# # # # # # # # # # # # # syntax
# # # # # # # # # # # # # ------
# # # # # # # # # # # # # <dictname> = {<assignment> <iteration>}
# # # # # # # # # # # # # <dictname> = {<assignment> <iteration> <condition>}

# # # # # # # # # # # # # d = {i:i**2 for i in range(1,11)}
# # # # # # # # # # # # # print(d)

# # # # # # # # # # # # # d = {i:i+10 for i in range(10)}
# # # # # # # # # # # # # print(d)

# # # # # # # # # # # # # d = {i:j for i in range(10) for j in range(10,20)}
# # # # # # # # # # # # # print(d)

# # # # # # # # # # # # # d = {i:i+10 for i in range(10) if i%2==0 and i%3==0}
# # # # # # # # # # # # # print(d)

# # # # # # # # # # # # # stmt = "python and machine learning"
# # # # # # # # # # # # # words = {i:len(i) for i in stmt.split()}
# # # # # # # # # # # # # print(words)

# # # # # # # # # # # # # sets and frozensets
# # # # # # # # # # # # 	# - special datatypes 
# # # # # # # # # # # # 	# - py2.4 + 
# # # # # # # # # # # # 	# - collections 
# # # # # # # # # # # # 	# - XX sequences XX
# # # # # # # # # # # # 	# - XX ordered XX 
# # # # # # # # # # # # 	# - unique 
# # # # # # # # # # # # 	# - heterogeneous
# # # # # # # # # # # # 	# - nested 

# # # # # # # # # # # # # sets 
# # # # # # # # # # # # # 	- mutable
# # # # # # # # # # # # 	# - set

# # # # # # # # # # # # # syntax
# # # # # # # # # # # # # ------
# # # # # # # # # # # # # <setname> = {<ele1>,<ele2>,<ele3>,<ele4>}

# # # # # # # # # # # # nums = {10,2,30,5,6,323,21}
# # # # # # # # # # # # # print(nums)
# # # # # # # # # # # # # print(type(nums))

# # # # # # # # # # # # # X indexing X slicing X 

# # # # # # # # # # # # # for i in nums:
# # # # # # # # # # # # # 	print(i)

# # # # # # # # # # # # nums = {10,2,3,30,10,5,6,32,3,21}
# # # # # # # # # # # # # print(nums)
# # # # # # # # # # # # # print(type(nums))
# # # # # # # # # # # # # emp = {}
# # # # # # # # # # # # # print(emp)
# # # # # # # # # # # # # print(type(emp))

# # # # # # # # # # # # # emp = set(())
# # # # # # # # # # # # # print(emp)


# # # # # # # # # # # # s1 = {100,20,30,40,90}
# # # # # # # # # # # # s2 = {40,50,60,70}
# # # # # # # # # # # # s3 = {100,30}
# # # # # # # # # # # # s4 = {200}

# # # # # # # # # # # # # print(s1.union(s2))
# # # # # # # # # # # # # print(s1.intersection(s2))
# # # # # # # # # # # # # print(s1.difference(s2))
# # # # # # # # # # # # # print(s2.difference(s1))

# # # # # # # # # # # # # print(s1.issubset(s2))
# # # # # # # # # # # # # print(s3.issubset(s1))
# # # # # # # # # # # # # print(s1.issuperset(s2))
# # # # # # # # # # # # # print(s1.issuperset(s3))
# # # # # # # # # # # # # print(s1.isdisjoint(s2))
# # # # # # # # # # # # # print(s1.isdisjoint(s4))

# # # # # # # # # # # # # print(s1)
# # # # # # # # # # # # # s1.add(234)
# # # # # # # # # # # # # print(s1)
# # # # # # # # # # # # # s1.add("mysql")
# # # # # # # # # # # # # print(s1)

# # # # # # # # # # # # # s1.remove(100)
# # # # # # # # # # # # # print(s1)

# # # # # # # # # # # # # frozensets --> ??
# # # # # # # # # # # # # 	- immutable
# # # # # # # # # # # # # 	- frozenset
# # # # # # # # # # # # # 	- XX add XX remove XX 

# # # # # # # # # # # # # list ---> tuple 
# # # # # # # # # # # # # set  ---> frozenset

# # # # # # # # # # # # # module - 3 
# # # # # # # # # # # # # 	part 1 --> functions
# # # # # # # # # # # # # 	part 2 --> modules and packages 
# # # # # # # # # # # # # 	part 3 --> file handling 

# # # # # # # # # # # # functions
# # # # # # # # # # # # 	100 lines of code 
# # # # # # # # # # # # 	3 times --> even/odd --> 10 lines 
# # # # # # # # # # # # 	30 lines --> 3 e/o 

# # # # # # # # # # # # 	1 time --> even / odd --> function --> 10
# # # # # # # # # # # # 	2 , 3 time --> use function --> 2

# # # # # # # # # # # # 	- reusability of code 
# # # # # # # # # # # # 	- modularisation of code 
# # # # # # # # # # # # 	- class function 
# # # # # # # # # # # # 	- first class objects 

# # # # # # # # # # # # 2 types 
# # # # # # # # # # # # 	- pre defined
# # # # # # # # # # # # 	- user defined 

# # # # # # # # # # # # parameters 			returntype 
# # # # # # # # # # # # 	0 					0 
# # # # # # # # # # # # 	1					0 
# # # # # # # # # # # # 	0 					1
# # # # # # # # # # # # 	1 					1

# # # # # # # # # # # # 3 components
# # # # # # # # # # # # 	- definition  
# # # # # # # # # # # # 		- function name 
# # # # # # # # # # # # 		- inputs 
# # # # # # # # # # # # 		- mandatory 
# # # # # # # # # # # # 		- once 
# # # # # # # # # # # # 	- implementation
# # # # # # # # # # # # 		- logic 
# # # # # # # # # # # # 		- inputs <-- definition
# # # # # # # # # # # # 		- mandatory
# # # # # # # # # # # # 		- once
# # # # # # # # # # # # 	- call 
# # # # # # # # # # # # 		- trigger--> output
# # # # # # # # # # # # 		- optional 
# # # # # # # # # # # # 		- multiple 

# # # # # # # # # # # # syntax
# # # # # # # # # # # # ------

# # # # # # # # # # # # def  <functionname>(): # definition
# # # # # # # # # # # # 	<logics> # implementation

# # # # # # # # # # # # <functionname>() # call 
# # # # # # # # # # # # <functionname>()
# # # # # # # # # # # # <functionname>()

# # # # # # # # # # # def sayhello(): # definition
# # # # # # # # # # # 	print("hello") # implementation / logics

# # # # # # # # # # # # sayhello() # call
# # # # # # # # # # # # sayhello()
# # # # # # # # # # # # sayhello()

# # # # # # # # # # # # print(sayhello) # functionname --> location
# # # # # # # # # # # # print(type(sayhello)) # function

# # # # # # # # # # # # parameters / arguements
# # # # # # # # # # # # 	- inputs 
# # # # # # # # # # # # 	- formal 
# # # # # # # # # # # # 		- definition
# # # # # # # # # # # # 		- variables 
# # # # # # # # # # # # 		- local to function
# # # # # # # # # # # # 	- actual 
# # # # # # # # # # # # 		- call 
# # # # # # # # # # # # 		- values
# # # # # # # # # # # # 		- non local 

# # # # # # # # # # # # 4 kinds 
# # # # # # # # # # # # 	- positional
# # # # # # # # # # # # 	- default
# # # # # # # # # # # # 	- variable length 
# # # # # # # # # # # # 	- keyworded

# # # # # # # # # # # # def sayhello(name): # formal
# # # # # # # # # # # # 	print("hello " + name)

# # # # # # # # # # # # sayhello("john") # actual

# # # # # # # # # # # # positional parameters
# # # # # # # # # # # # 	no of actual == no of formal

# # # # # # # # # # # # def addnums(a,b): # 2 
# # # # # # # # # # # # 	res = a + b 
# # # # # # # # # # # # 	print(res)

# # # # # # # # # # # # addnums(10,20) # 2 
# # # # # # # # # # # # addnums(10) # 1
# # # # # # # # # # # # addnums() # 0 

# # # # # # # # # # # # def login(username , password):
# # # # # # # # # # # 	# print("name of user is " + str(username))
# # # # # # # # # # # 	# print("password of user is " + str(password))

# # # # # # # # # # # # login("john","12345")
# # # # # # # # # # # # login("jane","*123@*")
# # # # # # # # # # # # login() # error --> 0 , 1 
# # # # # # # # # # # # login("4582" , "khan")

# # # # # # # # # # # # - positions XX 
# # # # # # # # # # # # - exact no of parameters XX 

# # # # # # # # # # # # def avg(a,b,c,d,e):
# # # # # # # # # # # # 	res = (a+b+c+d+e)//5
# # # # # # # # # # # # 	print(res)

# # # # # # # # # # # # avg(10,30,50,20,10) # 24
# # # # # # # # # # # # avg(2,3,4,5) # error
# # # # # # # # # # # # avg(10,123,40,345,20,104,42)

# # # # # # # # # # # def avg(a,b,c,d,e):
# # # # # # # # # # # 	res = (a+b+c+d+e)//5
# # # # # # # # # # # 	print(res)

# # # # # # # # # # # # avg(10,30,50,20,10) # 24
# # # # # # # # # # # # print(avg(10,30,50,20,10)) # 24 + None


# # # # # # # # # # # # return 4 
# # # # # # # # # # # # 	- return values
# # # # # # # # # # # # 	- return variables 
# # # # # # # # # # # # 	- return functionname
# # # # # # # # # # # # 	- return functioncall

# # # # # # # # # # # # def avg(a,b,c,d,e):
# # # # # # # # # # # # 	res = (a+b+c+d+e)//5
# # # # # # # # # # # # 	return "php" # value --> exit 
# # # # # # # # # # # # 	return 100 # value
# # # # # # # # # # # # 	return 2.3 # value

# # # # # # # # # # # # ans = avg(10,30,50,20,10)
# # # # # # # # # # # # print(ans)

# # # # # # # # # # # # def avg(a,b,c,d,e):
# # # # # # # # # # # # 	res = (a+b+c+d+e)//5
# # # # # # # # # # # # 	return res # variable
# # # # # # # # # # # # res = avg(10,30,50,20,10)
# # # # # # # # # # # # print(res)

# # # # # # # # # # # # parameters(2)

# # # # # # # # # # # # default parameters

# # # # # # # # # # # # def login(user , pwd): # formal parameters
# # # # # # # # # # # # 	print("user name is " + user )
# # # # # # # # # # # # 	print("user password is " + pwd )

# # # # # # # # # # # # login(pwd="38745",user="john") # call --> formal parameters

# # # # # # # # # # # # def subscription(user , account="free"): # definition -> actual
# # # # # # # # # # # # 	print("user is "+ user )
# # # # # # # # # # # # 	print("account type is "+ account )

# # # # # # # # # # # # subscription("khan","paid")
# # # # # # # # # # # # subscription("john","premium")
# # # # # # # # # # # # subscription("jane")

# # # # # # # # # # # # variable length parameters
# # # # # # # # # # # 	# - multiple parameters
# # # # # # # # # # # 	# - 0 .... n 
# # # # # # # # # # # 	# - tuple 
# # # # # # # # # # # 	# - name of tuples --> args 
# # # # # # # # # # # 	# - formal parameters --> *args 

# # # # # # # # # # # # def avg(*args):
# # # # # # # # # # # # 	res = sum(args)//len(args)
# # # # # # # # # # # # 	print(res)
		
# # # # # # # # # # # # avg(10,20) # 15
# # # # # # # # # # # # avg(10,20,30) # 20
# # # # # # # # # # # # avg(21,32,4,35,6,67,587,9,2)
# # # # # # # # # # # # avg() , avg(10) --> XX 

# # # # # # # # # # # # def avg(a,b,*args):
# # # # # # # # # # # # 	res = (a+b+sum(args)) // (2+len(args))
# # # # # # # # # # # # 	print(res)
# # # # # # # # # # # # avg(10,20) # 15
# # # # # # # # # # # # avg(10,20,30) # 20
# # # # # # # # # # # # avg(21,32,4,35,6,67,587,9,2)

# # # # # # # # # # # # def makecake(flav="vannilla",wei ="3",shape = "round"):
# # # # # # # # # # # # 	print(flav)
# # # # # # # # # # # # 	print(wei)
# # # # # # # # # # # # 	print(shape)
# # # # # # # # # # # # 	print

# # # # # # # # # # # # makecake("vannilla" , "3" , "round")
# # # # # # # # # # # # makecake("choc" , shape="round" , wei="4")
# # # # # # # # # # # # makecake(shape="oval" , wei="3" , flav="pine")
# # # # # # # # # # # # makecake("choc" , shape	= "round")
# # # # # # # # # # # # makecake("strw" , "2" )
# # # # # # # # # # # # makecake(shape="rect" , wei = "4" )
# # # # # # # # # # # # makecake(wei = "5")
# # # # # # # # # # # # makecake(shape="sqaure")
# # # # # # # # # # # # makecake()

# # # # # # # # # # # # keyworded parameters
# # # # # # # # # # # # 	- dictionary
# # # # # # # # # # # # 	- kwargs
# # # # # # # # # # # # 	- **kwargs


# # # # # # # # # # # # def makecake(flav="vannilla",wei ="3",shape = "round",**kwargs):
# # # # # # # # # # # # 	print(flav)
# # # # # # # # # # # # 	print(wei)
# # # # # # # # # # # # 	print(shape)
# # # # # # # # # # # # 	print(kwargs)

# # # # # # # # # # # # makecake("vannilla" , "3" , "round",color="red",toppings="almonds")


# # # # # # # # # # # # 2 return types 
# # # # # # # # # # # # 	- functionname
# # # # # # # # # # # # 	- functioncall


# # # # # # # # # # # # def hello():
# # # # # # # # # # # # 	print("hello")

# # # # # # # # # # # # def bye():
# # # # # # # # # # # # 	print("bye")
# # # # # # # # # # # # 	return hello

# # # # # # # # # # # # print(hello()) 
# # # # # # # # # # # # print(bye()) #  / bye + location
# # # # # # # # # # # # print(hello)
# # # # # # # # # # # # print(bye)
# # # # # # # # # # # # abc = bye() # bye 
# # # # # # # # # # # # abc()
# # # # # # # # # # # # abc()
# # # # # # # # # # # # abc()

# # # # # # # # # # # # print(type(hello))
# # # # # # # # # # # # print(type(bye))

# # # # # # # # # # # # print(type(hello())) # hello + nonetype
# # # # # # # # # # # # print(type(bye())) # bye + function

# # # # # # # # # # # # def hello():
# # # # # # # # # # # # 	print("hello")

# # # # # # # # # # # # def bye():
# # # # # # # # # # # # 	print("bye")
# # # # # # # # # # # # 	return hello()

# # # # # # # # # # # # hello()
# # # # # # # # # # # # print(hello())

# # # # # # # # # # # # bye() # bye+hello
# # # # # # # # # # # # print(bye()) # bye +  hello 
# # # # # # # # # # # # 	bye + print(hello())
# # # # # # # # # # # # 	bye + hello + print()
# # # # # # # # # # # # print(type(hello()))
# # # # # # # # # # # # print(type(bye())) # bye + hello + 

# # # # # # # # # # # # def hello():
# # # # # # # # # # # # 	print("hello")
# # # # # # # # # # # # 	return 100 
# # # # # # # # # # # # def bye():
# # # # # # # # # # # # 	print("bye")
# # # # # # # # # # # # 	return hello()
# # # # # # # # # # # # print(type(bye()))

# # # # # # # # # # # # lambda functions / anonymous functions / lambda operator 
# # # # # # # # # # # 	# - single line implementation
# # # # # # # # # # # 	# - def XX 
# # # # # # # # # # # 	# - single line 
# # # # # # # # # # # 	# - auto returned 
# # # # # # # # # # # 	# - parameters

# # # # # # # # # # # # syntax
# # # # # # # # # # # # ------
# # # # # # # # # # # # <functionname> = lambda <parameters> : <implementation>

# # # # # # # # # # # # addnums = lambda a,b : a+b 
# # # # # # # # # # # # print(addnums(10,20))

# # # # # # # # # # # # makeemail = lambda user , comp : user + "@"+comp+".com"
# # # # # # # # # # # # print(makeemail("khan","lync"))

# # # # # # # # # # # # special functions
# # # # # # # # # # # # 	map() 
# # # # # # # # # # # # 	filter() 
# # # # # # # # # # # # 	reduce() 

# # # # # # # # # # # # map() 
# # # # # # # # # # # # 	- corresponding operations
# # # # # # # # # # # # 	- inputs --> function with rtype , collection(s)
# # # # # # # # # # # # 	- output --> map object
# # # # # # # # # # # # 	- map object --> converted --> collection

# # # # # # # # # # # # l1 = [2,3,4,5,3]

# # # # # # # # # # # # def sq(a):
# # # # # # # # # # # # 	res = a**2 
# # # # # # # # # # # # 	return res

# # # # # # # # # # # # mo = map(sq,l1)
# # # # # # # # # # # # print(list(mo))

# # # # # # # # # # # # print(list(map(lambda a:a**2 , [2,3,4,5,3])))

# # # # # # # # # # # # l1 = [4,345,4,56,57,68,67]
# # # # # # # # # # # # l2 = [100,4,6,5,67,8,76]

# # # # # # # # # # # # mo = map(lambda a,b:a+b , l1 , l2)
# # # # # # # # # # # # print(list(mo))

# # # # # # # # # # # # filter()
# # # # # # # # # # # # 	- filter operations
# # # # # # # # # # # # 	- inputs --> function with rtype , collection
# # # # # # # # # # # # 	- output --> filter object
# # # # # # # # # # # # 	- filter object --> converted --> collection 

# # # # # # # # # # # # l1 = [i for i in range(20)]
# # # # # # # # # # # # print(l1)

# # # # # # # # # # # # fo = filter(lambda a:a%2==0 , l1)
# # # # # # # # # # # # print(list(fo))

# # # # # # # # # # # # reduce() 
# # # # # # # # # # # # 	- cumulative operations
# # # # # # # # # # # # 	- XX internal function XX 
# # # # # # # # # # # # 	- from functools import reduce 
# # # # # # # # # # # # 	- function with rtype , collection
# # # # # # # # # # # # 	- value 

# # # # # # # # # # # l1 = [i for i in range(1,11)]

# # # # # # # # # # # from functools import reduce

# # # # # # # # # # # # val = reduce(lambda a,b:a+b ,l1)
# # # # # # # # # # # # print(val)

# # # # # # # # # # # # val = reduce(lambda a,b:a*b ,l1)
# # # # # # # # # # # # print(val)

# # # # # # # # # # # module 3 part 2 --> modules and packages

# # # # # # # # # # # 	module --> python file (.py , .pyc , .ipynb)

# # # # # # # # # # # 	3 types 
# # # # # # # # # # # 		- internal default
# # # # # # # # # # # 		- internal imported 
# # # # # # # # # # # 		- external 

# # # # # # # # # # # internal default modules 
# # # # # # # # # # # 	- libs 
# # # # # # # # # # # 	- XX import XX 
# # # # # # # # # # # 	- default available components
# # # # # # # # # # # 	- print() len() sort()

# # # # # # # # # # # internal imported modules
# # # # # # # # # # # 	- libs 
# # # # # # # # # # # 	- import 
# # # # # # # # # # # 	- XX default available components XX 
# # # # # # # # # # # 	- reduce() , sys.maxint , keyword.kwlist 

# # # # # # # # # # # external modules
# # # # # # # # # # # 	- XX libs XX 
# # # # # # # # # # # 	- external source / manually 
# # # # # # # # # # # 	- download install import 

# # # # # # # # # # # package manager --> download + install external modules / packages

# # # # # # # # # # # python packaging index --> PyPI 
# # # # # # # # # # # install pip 

# # # # # # # # # # # get-pip.py 

# # # # # # # # # # # c:/>pip list --> all  modules/ packages --> 22 
# # # # # # # # # # # c:/>pip freeze --> manually downloaded --> 20
# # # # # # # # # # # c:/>pip install <module/packagename> --> download + installed
# # # # # # # # # # # c:/>pip uninstall <module/packagename>

# # # # # # # # # # # importing 
# # # # # # # # # # # 3 types
# # # # # # # # # # # 	- complete import 
# # # # # # # # # # # 		- all components
# # # # # # # # # # # 		- reference mandatory

# # # # # # # # # # # 	import <module/packagename>

# # # # # # # # # # # import python9am
# # # # # # # # # # # print(python9am.a)
# # # # # # # # # # # print(python9am.b)
	
# # # # # # # # # # 	# - specific import 
# # # # # # # # # # 	# 	- specific components
# # # # # # # # # # 	# 	- reference XX mandatory XX 
# # # # # # # # # # 	# from <modulename> import <component>

# # # # # # # # # # # from python9am import a , b 
# # # # # # # # # # # print(a)
# # # # # # # # # # # print(b)

# # # # # # # # # # 	# - * import 
# # # # # # # # # # 	# 	- all components
# # # # # # # # # # 	# 	- reference XX mandatory XX 
# # # # # # # # # # 	# from <modulename> import * 

# # # # # # # # # # # from python9am import * 
# # # # # # # # # # # print(a)
# # # # # # # # # # # print(b)

# # # # # # # # # # # import pythonwebapplicationinterface

# # # # # # # # # # # alias 

# # # # # # # # # # # import python9am as p9
# # # # # # # # # # # print(p9.a)
# # # # # # # # # # # print(p9.b)
	
# # # # # # # # # # # random , os 

# # # # # # # # # # # random 
# # # # # # # # # # # 	- numbers , collections only 
# # # # # # # # # # # 	- pseudo random numbers 
# # # # # # # # # # # 	- internal imported	

# # # # # # # # # # import random 

# # # # # # # # # # # print(random.random()) # float --> 0 and 1 
# # # # # # # # # # # print(random.randint(2,10)) # integer --> n1 and n2 
# # # # # # # # # # # print(random.randrange(2,10)) # integer --> n1 and n2 

# # # # # # # # # # # randint vs randrange --> ???

# # # # # # # # # # l1 = [i for i in range(15)]
# # # # # # # # # # # print(l1)

# # # # # # # # # # # random.shuffle(l1)
# # # # # # # # # # # print(l1)

# # # # # # # # # # # print(random.choice(l1))
# # # # # # # # # # # print(random.sample(l1,k = 5))

# # # # # # # # # # # gennums(5) # 43834
# # # # # # # # # # # gennums(3) # 971
# # # # # # # # # # # gennums(8) # 38764127

# # # # # # # # # # # genchars(3) # jfb
# # # # # # # # # # # genchars(6) # frgucn

# # # # # # # # # # # os module

# # # # # # # # # # import random

# # # # # # # # # # def getnums(n): # 5 
# # # # # # # # # # 	res = ""
# # # # # # # # # # 	for i in range(n): # 5 
# # # # # # # # # # 		res = res + str(random.randint(0,9))
# # # # # # # # # # 	# print(res)
# # # # # # # # # # 	return res 

# # # # # # # # # # # gennums(4)
# # # # # # # # # # # gennums(7)

# # # # # # # def getchars(n):
# # # # # # # 	res = ""
# # # # # # # 	for i in range(n):
# # # # # # # 		res = res + chr(random.randint(97,122))
# # # # # # # 	# print(res)
# # # # # # 	# return res 

# # # # # # # # # # # getchars(4)
# # # # # # # # # # # getchars(8)

# # # # # # # # # # # 4389HrNr8904IRUn
# # # # # # # # # # # 3485Koin7460KtUo
# # # # # # # # # # # 6547kjdU4573KJoe
# # # # # # # # # # # user already exists 
# # # # # # # # # # # 3498ruBI3756kjKi

# # # # # # # # # # # genpwd(name)
# # # # # # # # # # # 	checkuser(name)
# # # # # # # # # # # 		- 0 --> user exists
# # # # # # # # # # # 		- 1 --> user not exists
# # # # # # # # # # # 			getnums(4) + getchars(4) + getnums(4) + getchars(4)

# # # # # # # # # # d = {}
# # # # # # # # # # def checkuser(name):
# # # # # # # # # # 	if name in list(d.keys()):
# # # # # # # # # # 		return 0 
# # # # # # # # # # 	else:
# # # # # # # # # # 		return 1 

# # # # # # # # # # def genpwd(name):
# # # # # # # # # # 	if checkuser(name) == 0:
# # # # # # # # # # 		print("user already exists")
# # # # # # # # # # 	else:
# # # # # # # # # # 		password = getnums(4) + getchars(4) + getnums(4) + getchars(4)
# # # # # # # # # # 		d[name] = password
# # # # # # # # # # 		print(password)

# # # # # # # # # # # genpwd("khan")
# # # # # # # # # # # genpwd("john")
# # # # # # # # # # # genpwd("jane")
# # # # # # # # # # # genpwd("john")
# # # # # # # # # # # genpwd("harry")

# # # # # # # # # # # print(d)

# # # # # # # # # # # getchars(4) UHec
# # # # # # # # # # # getchars(4) rfhs
# # # # # # # # # # # getchars(4) UHBI
# # # # # # # # # # # getchars(4) UHHw
# # # # # # # # # # # getchars(4) wejU

# # # # # # # # # # # os module 	
# # # # # # # # # # # 	- os operations 
# # # # # # # # # # # 		- empty folders / directories 
# # # # # # # # # # # 		- sys paths 
# # # # # # # # # # # 	- internal imported

# # # # # # # # # # import os 

# # # # # # # # # # # print(os.name) # posix , nt 
# # # # # # # # # # # print(os.getcwd()) # current working directory

# # # # # # # # # # # XXXX change os XXXX --> pys 
# # # # # # # # # # # os.chdir("/Users/digitallync/Downloads") # change directory
# # # # # # # # # # # print(os.getcwd())
# # # # # # # # # # # XXXX change os XXXX --> Downloads

# # # # # # # # # # # print(os.listdir("/Users/digitallync/Desktop/pys"))

# # # # # # # # # # # for i in os.listdir("/Users/digitallync/Desktop/pys"):
# # # # # # # # # # # 	print(i)

# # # # # # # # # # # making directories

# # # # # # # # # # # os.mkdir("demo")
# # # # # # # # # # # os.makedirs("d1/d2/d3")

# # # # # # # # # # # removing directories

# # # # # # # # # # # os.rmdir("demo")
# # # # # # # # # # # os.removedirs("d1/d2/d3")

# # # # # # # # # # # file , directory --> os XXX shutil 
# # # # # # # # # # # import shutil

# # # # # # # # # # # sys paths --> os.path.

# # # # # # # # # # # print(os.path.split("/Users/digitallync/Desktop/pys"))
# # # # # # # # # # # print(os.path.split("/Users/digitallync/Desktop/pys/weekend.py"))


# # # # # # # # # # # print(os.path.splitext("/Users/digitallync/Desktop/pys"))
# # # # # # # # # # # print(os.path.splitext("/Users/digitallync/Desktop/pys/weekend.py"))

# # # # # # # # # # # os , task

# # # # # # # # # # # enter a sys path 
# # # # # # # # # # # /Users/digitallync/Desktop/

# # # # # # # # # # # Desktop
# # # # # # # # # # # 	pys 
# # # # # # # # # # # 	pdfs 
# # # # # # # # # # # 	project 
# # # # # # # # # # # 	images 
# # # # # # # # # # # 	school 

# # # # # # # # # # # 	demo.py 
# # # # # # # # # # # 	python4pm.py 
# # # # # # # # # # # 	notes.pdf 
# # # # # # # # # # # 	task.txt 
# # # # # # # # # # # 	fees.xlsx 
# # # # # # # # # # # 	dates.xlsx
# # # # # # # # # # # 	material.txt 

# # # # # # # # # # # 	txts 
# # # # # # # # # # # 	xlsxs 

# # # # # # # # # # # module 3 part 3 --> file handling 

# # # # # # # # # # file --> store data 
# # # # # # # # # # 	--> dependencies on language
# # # # # # # # # # 	--> XX re initialisation XX
		
# # # # # # # # # # 	python code 
# # # # # # # # # # 		-> variables
# # # # # # # # # # 		-> collections

# # # # # # # # # # file --> 3 components
# # # # # # # # # # 	-> filename 
# # # # # # # # # # 	-> extension
# # # # # # # # # # 	-> path --> location

# # # # # # # # # # create 
# # # # # # # # # # open 
# # # # # # # # # # operate 
# # # # # # # # # # save 
# # # # # # # # # # close 

# # # # # # # # # # file not existing --> create + open 
# # # # # # # # # # file exists --> open 

# # # # # # # # # # open()
# # # # # # # # # # 	- create,open --> not exists
# # # # # # # # # # 	- open --> exists

# # # # # # # # # # modes of operation --> 7 
# # # # # # # # # # 	r --> read only 
# # # # # # # # # # 	w --> write only 
# # # # # # # # # # 	a --> append 
# # # # # # # # # # 	rb --> read binary 
# # # # # # # # # # 	wb --> write binary 
# # # # # # # # # # 	+ --> update

# # # # # # # # # # open() --> file , mode 
# # # # # # # # # # 		-> file object --> output
# # # # # # # # # # close() --> closing the opened file 
# # # # # # # # # # XXX save XXX --> auto saved 

# # # # # # # # # fo = open("demo.txt" , "a") # create + open

# # # # # # # # # # WRITE ON FILE 
# # # # # # # # # # <fileobject>.write(<string>)
# # # # # # # # # # fo.write("python\n")
# # # # # # # # # # fo.write("mysql\n")
# # # # # # # # # # fo.write("php\n")
# # # # # # # # # # fo.write(100) # int --> error
# # # # # # # # # # fo.write(str(100))

# # # # # # # # # # <fileobject>.writelines(<listname>)
# # # # # # # # # # l1 = [str(i)+"\n" for i in range(10)]
# # # # # # # # # # fo.writelines(l1)

# # # # # # # # # fo.close() # closed 


# # # # # # # # # # w --> empty --> write data 
# # # # # # # # # # a --> continue --> write data 

# # # # # # # # # enter a user name 
# # # # # # # # # khan 
# # # # # # # # # ________________

# # # # # # # # # enter a user name 
# # # # # # # # # john 
# # # # # # # # # ________________

# # # # # # # # # enter a user name 
# # # # # # # # # jane 
# # # # # # # # # ________________

# # # # # # # # # users.txt 

# # # # # # # # # khan 			- 			________________
# # # # # # # # # john			- 			________________
# # # # # # # # # jane			-			________________

# # # # # # # # # # reading of data 
# # # # # # # # # 	# - mode --> r 
# # # # # # # # # 	# - xlsx , img --> rb 


# # # # # # # # # python --> txt html 
# # # # # # # # # image --> PIL , pillow
# # # # # # # # # excel --> xlsxwriter 
# # # # # # # # # csv --> csv 
# # # # # # # # # structured data --> pandas 
# # # # # # # # # pdf --> pypdf2 
# # # # # # # # # data image --> binary 
# # # # # # # # # binary -> image 

# # # # # # # # fr = open("demo.txt" , "r")
# # # # # # # # # <fileobject>.read() 
# # # # # # # # 	# -> entire data 
# # # # # # # # 	# -> start (current cursor position) --> end
# # # # # # # # 	# -> default --> start  
# # # # # # # # # print(fr.read()) # 0 --> end 
# # # # # # # # # print(fr.read(10)) # 0 --> 10
# # # # # # # # # print(fr.read(5)) # 11 --> 15 
# # # # # # # # # print(fr.read()) # 16 --> end 

# # # # # # # # # <fileobject>.readline() # first line -> ccp
# # # # # # # # # print(fr.readline()) # 0 --> 1st line
# # # # # # # # # print(fr.readline()) # 1 --> 1st line --> 2 2nd line
# # # # # # # # # print(fr.readline()) # 0 --> 1st line
# # # # # # # # # print(fr.readline(3)) # 1 2 3  
# # # # # # # # # print(fr.readline()) # 4 --> end of line

# # # # # # # # # <fileobject>.readlines()
# # # # # # # # # print(fr.readlines(1)) # 1 -> 7
# # # # # # # # # print(fr.readlines()[3])
# # # # # # # # # print(fr.readlines()[4])

# # # # # # # # # <fileobject>.tell() # current cursor position
# # # # # # # # # print(fr.tell())
# # # # # # # # # fr.read(10)
# # # # # # # # # print(fr.tell())
# # # # # # # # # fr.readline()
# # # # # # # # # print(fr.tell())
# # # # # # # # # fr.read() 
# # # # # # # # # print(fr.tell())

# # # # # # # # fr.close() 

# # # # # # # # # [7 , 13 , 17 , 22 , 34]
# # # # # # # # # 1-7 --> python 
# # # # # # # # # 8 -> 13 -> python , mysql 
# # # # # # # # # 14 -> 17 -> python mysql php 

# # # # # # # # enter a user name 
# # # # # # # # khan 
# # # # # # # # __________________
# # # # # # # # enter a user name 
# # # # # # # # john 
# # # # # # # # __________________
# # # # # # # # enter a user name 
# # # # # # # # jane 
# # # # # # # # __________________
# # # # # # # # enter a user name 
# # # # # # # # harry  
# # # # # # # # __________________
# # # # # # # # enter a user name 
# # # # # # # # john  
# # # # # # # # user already exists


# # # # # # # # users.txt 

# # # # # # # # khan 			- 			3248khan3274yixn
# # # # # # # # john			- 			3248khan3274yixn
# # # # # # # # jane			-			________________
# # # # # # # # harry 			- 			________________

# # # # # # # # getuser() --> ask user for name 
# # # # # # # # checkuser() --> read file check user ?? 
# # # # # # # # 				-> 0  --> getchars getnums genpwd
# # # # # # # # 				-> 1 
# # # # # # # # writeFile() --> user , password -->  file 

# # # # # # # # seek() --> move cursor  
# # # # # # # # 		offset , whence
# # # # # # # # 		0 1 2  , no of chars
# # # # # # # # 0 -> start of file 
# # # # # # # # 1 -> current position 
# # # # # # # # 2 -> end of file

# # # # # # # # # 0 
# # # # # # # # seek(0,12) # 12 
# # # # # # # # seek(1,14) # 26 
# # # # # # # # seek(2,-10) # 25 

# # # # # # # # file + password --> ??
# # # # # # # # os cleaning --> ??

# # # # # # # classes and objects 
# # # # # # # 	class --> XX mandatory XX --> explicitly
# # # # # # # 	java , c++ --> mandatory --> explicitly
# # # # # # # 	class --> reusability

# # # # # # # class --> collection of variables , functions
# # # # # # # 	variables --> class variables
# # # # # # # 	functions --> methods 
# # # # # # # class --> class variables + methods --> attributes 
# # # # # # # <class type>
# # # # # # # class --> blueprint of object 

# # # # # # # object --> representation , instance of class 

# # # # # # # single class --> multiple objects 
# # # # # # # XXX single object --> multiple classes XXX 

# # # # # # # syntax 
# # # # # # # ------
# # # # # # # class <classname>:
# # # # # # # 	<class variables>
# # # # # # # 	<methods>

# # # # # # # <objectname1> = <classname>() 
# # # # # # # <objectname2> = <classname>() 
# # # # # # # <objectname3> = <classname>() 
# # # # # # # <objectname4> = <classname>() 

# # # # # # class organisation:
# # # # # # 	# class variables --> class , object reference
# # # # # # 	oname = "lync"
# # # # # # 	oloc = "hyd"
# # # # # # 	ocount = 10 

# # # # # # 	# print(oname)
# # # # # # 	# print(oloc)
# # # # # # 	# print(ocount)

# # # # # # emp1 = organisation()
# # # # # # emp2 = organisation()
# # # # # # emp3 = organisation()

# # # # # # # reference -> components --> inside to outside
# # # # # # 	# - class reference (<classname>.)
# # # # # # 	# - object reference (<objectname>.)

# # # # # # # print(organisation.oname) # class reference
# # # # # # # print(emp1.oloc) # object reference

# # # # # # # print(organisation.oname)
# # # # # # # print(emp1.oname)
# # # # # # # print(emp2.oname)
# # # # # # # print(emp3.oname)

# # # # # # # emp1.oname =  "digitallync" # object reference -> only object
# # # # # # # print(organisation.oname)
# # # # # # # print(emp1.oname) # digitallync
# # # # # # # print(emp2.oname)
# # # # # # # print(emp3.oname)

# # # # # # # organisation.oname = "DL" # class reference -> objects , class
# # # # # # # print(organisation.oname)
# # # # # # # print(emp1.oname)
# # # # # # # print(emp2.oname)
# # # # # # # print(emp3.oname)


# # # # # # # print(organisation) # classname --> XX location XX
# # # # # # # print(emp1) # objectname --> location
# # # # # # # print(emp2) # objectname --> location
# # # # # # # print(emp3) # objectname --> location


# # # # # # # object reference --> final 

# # # # # # # class organisation:
# # # # # # # 	oname = "lync"
# # # # # # # 	oloc = "hyd"
# # # # # # # 	ocount = 10 

# # # # # # # 	def addnums(self,a,b):
# # # # # # # 		print(self) # reference of object only 
# # # # # # # 		res = a+b
# # # # # # # 		print(res)

# # # # # # # emp1 = organisation()
# # # # # # # emp2 = organisation()
# # # # # # # emp3 = organisation()

# # # # # # # print(emp1) # location
# # # # # # # emp1.addnums(10,20) # object reference
# # # # # # # organisation.addnums(100,200) # class reference

# # # # # # # class variables --> object , class reference
# # # # # # # methods --> object reference

# # # # # # # types of methods 
# # # # # # # 	- instance methods 
# # # # # # # 	- class methods 
# # # # # # # 	- static methods

# # # # # # # self --> python == this --> java 

# # # # # # # class organisation:
# # # # # # # 	oname = "lync"
# # # # # # # 	oloc = "hyd"
# # # # # # # 	ocount = 10 

# # # # # # # 	def hire(self,name,role):
# # # # # # # 		print("name is " + name)
# # # # # # # 		print("role is " + role)
# # # # # # # 		organisation.ocount = organisation.ocount + 1

# # # # # # # emp1 = organisation()
# # # # # # # emp2 = organisation()
# # # # # # # emp3 = organisation()

# # # # # # # print(organisation.ocount) # 10

# # # # # # # emp1.hire("khan","pd")
# # # # # # # emp1.hire("john","d")
# # # # # # # emp1.hire("jane","c")

# # # # # # # print(organisation.ocount) # 10

# # # # # # # constructors , types of methods 


# # # # # # # hire --> optional
# # # # # # # called --> inc 
# # # # # # # xx called XX --> X inc X 

# # # # # # # method --> mandatory --> constructor
# # # # # # # 	object creation --> calls
# # # # # # # 	constructor --> __init__(self)

# # # # # # # class organisation:
# # # # # # # 	oname = "lync"
# # # # # # # 	oloc = "hyd"
# # # # # # # 	ocount = 10 

# # # # # # # 	def __init__(self,name,role): # constructor
# # # # # # # 		self.name = name 
# # # # # # # 		self.role = role 
# # # # # # # 		organisation.ocount = organisation.ocount + 1

# # # # # # # 	def printer(self):
# # # # # # # 		print("name is " + self.name)
# # # # # # # 		print("role is " + self.role)

# # # # # # # emp1 = organisation("khan","pd")
# # # # # # # emp2 = organisation("john","d")
# # # # # # # emp3 = organisation("jane","c")

# # # # # # # emp1.printer()

# # # # # # # types of methods 
# # # # # # # 	- instance methods 
# # # # # # # 		- self --> object location
# # # # # # # 		- called --> object reference
# # # # # # # 		- effect --> object only 
# # # # # # # 		- NO special	
# # # # # # # 		- printer() , empnchange() , hike()
# # # # # # # 	- class methods 
# # # # # # # 		- cls --> class location
# # # # # # # 		- called --> class , object reference
# # # # # # # 		- effect --> class and object 
# # # # # # # 		- decorator -> @classmethod
# # # # # # # 		- changecname() , changeaddress() , annualhike()
# # # # # # # 	- static methods
# # # # # # # 		- XXX 
# # # # # # # 		- called --> object reference 
# # # # # # # 		- effect --> None
# # # # # # # 		- decorator -> @staticmethod
# # # # # # # 		- calc(100,0.2) , datetoday()

# # # # # # # class --> organisation
# # # # # # # object --> employee 


# # # # # # class organisation:
# # # # # # 	oname = "lync"
# # # # # # 	oloc = "hyd"
# # # # # # 	ocount = 10 

# # # # # # 	# instance method --> constructor
# # # # # # 	def __init__(self,name,role): # constructor
# # # # # # 		self.name = name 
# # # # # # 		self.role = role 
# # # # # # 		organisation.ocount = organisation.ocount + 1

# # # # # # 	# instance method
# # # # # # 	def printer(self):
# # # # # # 		print("name is " + self.name)
# # # # # # 		print("role is " + self.role)

# # # # # # 	@classmethod
# # # # # # 	def changecname(cls,newname):
# # # # # # 		cls.oname = newname
# # # # # # 		print("org name has changed to " + cls.oname)

# # # # # # 	@staticmethod
# # # # # # 	def calc(num,perc):
# # # # # # 		res = num + (num*perc)
# # # # # # 		print(res)

# # # # # # emp1 = organisation("khan","pd")
# # # # # # emp2 = organisation("john","d")
# # # # # # emp3 = organisation("jane","c")

# # # # # # # emp1.printer()
# # # # # # # print(emp3.oname)
# # # # # # # emp1.changecname("DL")
# # # # # # # print(organisation.oname)
# # # # # # # print(emp1.oname)
# # # # # # # print(emp2.oname)
# # # # # # # print(emp3.oname)
# # # # # # # emp2.calc(100,0.2)

# # # # # # # decorator --> instance method , pre defined
# # # # # # # 			-> add privileges to immediate methods 


# # # # # # car --> __init__ name model 
# # # # # # 		start
# # # # # # 		acc 
# # # # # # 		brake
# # # # # # 		stop
# # # # # # 		printer 

# # # # # # c1 = car("___","____")
# # # # # # c1.start(40)
# # # # # # c1.acc(20)
# # # # # # c1.acc(30)
# # # # # # c1.acc(10)
# # # # # # c1.printer() ___ ___ 100 
# # # # # # c1.brake(50)
# # # # # # c1.acc(20)
# # # # # # c1.brake(50)
# # # # # # c1.printer() ___ ___  20 
# # # # # # c1.stop()  
# # # # # # c1.printer() ___ ___  20 

# # # # # # 0<speed<150

# # # # # # oops --> objects , classes 

# # # # # # java 
# # # # # # 	- class 
# # # # # # 	- object 
# # # # # # 	- inheritance 
# # # # # # 	- polymorphism 
# # # # # # 	- abstraction 
# # # # # # 	- encapsulation 

# # # # # # python 
# # # # # # 	- inheritance 
# # # # # # 	- polymorphism 
# # # # # # 	- abstraction 
# # # # # # 	- encapsulation 	

# # # # # # oops --> XX mandatory XX 
# # # # # # oops -> reusability of code 

# # # # # # inheritance
# # # # # # 	class1 class2
# # # # # # 	parent --> child 
# # # # # # 	super --> sub 

# # # # # # 	- single / simple inheritance 
# # # # # # 	- multiple inheritance
# # # # # # 	- multi level / hierarchial inheritance 
# # # # # # 	- hybrid inheritance 

# # # # # # single / simple inheritance -->" is a "relation
# # # # # # 	- exactly 2 classes 
# # # # # # 	- parent --> child 

# # # # # # 	bankaccount --> 4 
# # # # # # 	savingacc --> 3 <-- bankaccount
# # # # # # 	corporateacc --> 6 <-- bankaccount
# # # # # # 	jointacc --> 5 <-- bankaccount

# # # # # # ba --> 4 
# # # # # # sa --> 7 
# # # # # # ca --> 10 
# # # # # # ja --> 9 

# # # # # # multiple inheritance 
# # # # # # 	- min 3 classes 
# # # # # # 	- 1 child , remaining parent 
# # # # # # 	- parent1 , parent2 . . . --> child 
	
# # # # # # 	mangEmp --> 6 
# # # # # # 	techEmp --> 4 

# # # # # # 	developer 3 <-- techEmp
# # # # # # 	HR 5 <-- mangEmp
# # # # # # 	TechManager 2 <-- mangEmp , techEmp

# # # # # # 	me1 --> 6 
# # # # # # 	te --> 4 
# # # # # # 	d1 --> 7 
# # # # # # 	h1 --> 11
# # # # # # 	tm1 --> 12 

# # # # # # hierarchial / multi level inheritance 
# # # # # # 	- min 3 classes
# # # # # # 	- 1 child , 1 parent , remaining -> child + parent

# # # # # # 	a --> b --> c --> d--> e
# # # # # # 	dev -> lead -> man --> ceo

# # # # # # hybrid inheritance --> ?? 

# # # # # # syntax
# # # # # # ------

# # # # # # class company:
# # # # # # 	name = "lync"
# # # # # # 	address = "hyd"

# # # # # # class organisation:
# # # # # # 	cname = "DL"
# # # # # # 	cloc = "bom"

# # # # # # class firm(organisation,company):
# # # # # # 	name = "digitallync"
# # # # # # 	address = "hyd"

# # # # # # c1 = company()
# # # # # # o1 = organisation()

# # # # # # print(c1.name)
# # # # # # print(c1.cname) # error
# # # # # # print(o1.cname)
# # # # # # print(o1.name)

# # # # # # class company:
# # # # # # 	name = "lync"
# # # # # # 	address = "hyd"

# # # # # # class organisation(company):
# # # # # # 	cname = "DL"
# # # # # # 	cloc = "bom"

# # # # # # class firm(organisation):
# # # # # # 	name = "digitallync"
# # # # # # 	address = "hyd"

# # # # # class car:
# # # # # 	speed = 0 
	
# # # # # 	def __init__(self,name,model):
# # # # # 		self.name = name 
# # # # # 		self.model = model 
# # # # # 	def start(self,sspeed):
# # # # # 		self.speed = sspeed
# # # # # 	def acc(self,aspeed):
# # # # # 		self.speed = self.speed + aspeed
# # # # # 	def brake(self,bspeed):
# # # # # 		self.speed = self.speed - bspeed
# # # # # 	def stop(self):
# # # # # 		self.speed = 0 
# # # # # 	def printer(self):
# # # # # 		print("name of car is "+ self.name)
# # # # # 		print("model of car is "+ str(self.model))
# # # # # 		print("speed of car is "+ str(self.speed))

# # # # # organisation
# # # # # 	__init__ --> name role salary
# # # # # 	printer --> 
# # # # # 	hike --> perc 
# # # # # 	changeOrgName --> newname 

# # # # # o1 = organisation("khan","pd",100)
# # # # # o1.printer() # -- -- -- -- -- 100
# # # # # o1.hike(0.2)
# # # # # o1.printer() # khan pd __ __ __ 120 

# # # # polymorphism 
# # # # 	- static polymorphism
# # # # 	- dynamica polymorphism

# # # # 	- method overloading 
# # # # 	- method overriding 

# # # # method overloading 
# # # # 	- same definition
# # # # 	- multiple parameters --> calls 
# # # # 	- XX oops XX
# # # # 	- XX class object XX 
# # # # 	- variable length , keyworded parameters
# # # # 	- *args , **kwargs

# # # # def avg(*args):
# # # # 	print(args)

# # # # avg(10)
# # # # avg(1,2,3,45,4)

# # # # def makecake(**kwrags):
# # # # 	pass

# # # # method overriding
# # # # 	- same function
# # # # 	- multiple implementation
# # # # 	- magic methods --> __(--)__
# # # # 	- operator overloading

# # # # __init__ __del__ __str__ __len__ 


# # # # class organisation:
# # # # 	oname = "lync"
# # # # 	oloc = "hyd"
# # # # 	ocount = 10 
# # # # 	def __init__(self,name,role): # constructor
# # # # 		self.name = name 
# # # # 		self.role = role 
# # # # 		organisation.ocount = organisation.ocount + 1
# # # # 	def printer(self):
# # # # 		print("name is " + self.name)
# # # # 		print("role is " + self.role)

# # # # 	# instance method
# # # # 	def __str__(self):
# # # # 		return self.name 
# # # # 	def __repr__(self):
# # # # 		return self.role 

# # # # emp1 = organisation("khan","pd")
# # # # emp2 = organisation("john","d")
# # # # emp3 = organisation("jane","c")

# # # # print(emp1) # khan pd
# # # # print(emp2)

# # # # emp1 --> __str__ --> location --> print()
# # # # emp1 --> __str__ --> details --> print()

# # # # str --> str return
# # # # repr --> repr return 
# # # # str,repr --> str return

# # # # a = 10 
# # # # b = 20 
# # # # print(a+b)

# # # # a = int(10)
# # # # b = int(20) 
# # # # print(a+b) # __add__(a,b) --> 30

# # # # class num:
# # # # 	def __init__(self,n):
# # # # 		self.n = n

# # # # 	def __add__(first,second):
# # # # 		res = first.n * second.n
# # # # 		return res

# # # # a = num(10)
# # # # b = num(3)
# # # # print(a+b) # __add__(a,b) ---> __add__(10,3) --> 

# # # # abstraction 
# # # # 	- hide data 
# # # # 	- show data 

# # # # user1
# # # # 	username 
# # # # 	__password 

# # # # user2
# # # # 	username 
# # # # 	__password 

# # # # public , private , protected 

# # # class variables:
# # # 	a = 10 # public variables
# # # 	_b = 20 # protected variables
# # # 	__c = 30 # private variables
# # # 	# print(a)
# # # 	# print(_b)
# # # 	# print(__c)

# # # v = variables()
# # # print(v.a) # public variables
# # # print(v._b) # protected variables --> not recommended
# # # # print(v.__c) # XX private variables XX
# # # print(v._variables__c)

# # # # object._class__varname
# # # # encapsulation , exception handling

# # # encapsulation
# # # 	- binding 
# # # 		- properties --> single component --> class 
# # # 		- data --> single component --> object 
# # # 	- explicit concept
# # # 	- auto --> declare class , make object 
# # # 	- default concept 

# # # car --> start , stop ,acc , brake , __init__ --> class
# # # c1 --> 30 40 20 , verna 2019 --> object

# # exception handling 
# # 	exception --> error
# # 	- compile time exceptions --> XX handle XX 
# # 	- run time exceptions

# # 	handled exceptions --> fix 
# # 		TypeError 
# # 		ValueError 
# # 		NameError 
# # 	unhandled exceptions --> XX fix XX 
# # 		SyntaxError 
# # 		IndentationError 

# # exceptions --> classes 
# # Exception --> parent class 
# # 	TypeError --> child 1 
# # 	ValueError 
# # 	NameError
# # 	SyntaxError 
# # 	IndentationError 

# # handling procedures 
# # 	try except
# # 	try except except except except . . .
# # 	try except finally 

# # try --> code with errors
# # except --> errorname1 , dialouge1
# # except --> errorname2 , dialouge2
# # except --> errorname3 , dialouge3



# # try:
# # 	def subnums(a,b):
# # 		res = a-b
# # 		print(res)
# # 	# subnums(10,2)
# # 	subnums("python",2)

# # except TypeError:
# # 	print("pass only numbers")

# # code + error --> try + except 
# # code + no error  --> try 

# # try:
# # 	def addnums(a,b):
# # 		res = a+b
# # 		print(res)
# # 		print(ans)
# # 	addnums("python","mysql")
# # except TypeError:
# # 	print("pass only numbers")
# # except NameError:
# # 	print("undefined variable in code")

# # try:
# # 	def divnums(a,b):
# # 		res = a/b
# # 		print(res)
# # 	divnums(100,0)
# # 	divnums("python",10)
# # except NameError:
# # 	print("undefined variable in code")
# # except ValueError:
# # 	print("divide with non zero value")
# # except Exception as e:
# # 	print(e)

# # finally
# # 	code --> error --> execute 
# # 	code --> no error --> execute 

# # 100 lines 	-> no error 
# # try:
# # 	-> open file --> 30 

# # except Exception as e :
# # 	print(e)
# # finally:
# # 	-> close file --> 80 

# # 100 lines 	-> 50 error
# # try:
# # 	-> open file --> 30 
# # 	-> error --> 50 
	
# # except Exception as e :
# # 	print(e)
# # finally:
# # 	-> close file --> 80 

# # databases videos --> 201119
# # database connection + python --> 211119
# # git --> ???

# connections 
# 	mysql --> database
# 	python --> language 

# connectors --> database <--> language 
# connector --> python external module 
# 	PyMySQL , mysql-connect , MySQLDB 
# 	pip install PyMySQL

# python , mysql , PyMySQL

# pythonconn.py 

# import PyMySQL

# # connection object --> conn
# conn = PyMySQL.connect("localhost","admin","23768","school")
# # cursor object --> cur
# cur = conn.cursor()

# # create --> students 
# createTable = ''' create table if not exists students(
# 	rno int(32) unique auto_increment not null,
# 	name varchar(64) unique not null , 
# 	standard int(32) not null ,
# 	fee_status tinyint,
# # );'''
# cur.execute(createTable) # execute query --> table created

# insertQuery1 = "insert into students (1,'john',8,1);"
# insertQuery2 = "insert into students (3,'jane',7,1);"
# insertQuery3 = "insert into students (10,'harry',8,0);"

# cur.execute(insertQuery1)
# cur.execute(insertQuery2)
# cur.execute(insertQuery3)

# conn.commit() # take data python --> mysql table
# conn.close()

# names = set(["a","b","c","a","d"])
# standards = []

# for i in range(len(names)) :
# 	insertQuery = "insert into students ("+NULL+","+names[i] +");"
# 	print(insertQuery)

users 	
	username 
		khan
		john
	password 
		__________________
		__________________

git --> ??














